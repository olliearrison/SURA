{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"drawing-input\",\n    onMousemove: _cache[0] || (_cache[0] = (...args) => $options.handleMouseMove && $options.handleMouseMove(...args)),\n    onMousedown: _cache[1] || (_cache[1] = (...args) => $options.handleMouseDown && $options.handleMouseDown(...args)),\n    onMouseup: _cache[2] || (_cache[2] = (...args) => $options.handleMouseUp && $options.handleMouseUp(...args))\n  }, null, 32 /* HYDRATE_EVENTS */);\n}","map":{"version":3,"names":["_createElementBlock","class","onMousemove","_cache","args","$options","handleMouseMove","onMousedown","handleMouseDown","onMouseup","handleMouseUp"],"sources":["/Users/olliearrison/Desktop/SURA/src/components/DrawingInput.vue"],"sourcesContent":["<template>\n    <div class=\"drawing-input\" \n        @mousemove=\"handleMouseMove\" \n        @mousedown=\"handleMouseDown\" \n        @mouseup=\"handleMouseUp\"></div>\n</template>\n  \n<script>\nimport { draw } from \"./DrawHelper.js\";\n//import * as THREE from \"three\";\n//import { renderer, scene, camera } from \"../App.vue\";\n\nexport default {\n    name: 'DrawingInput',\n    data(){\n        return {\n            isDrawing: false,\n            stroke: {\n                show_stroke: true,\n                lineWidth: .01,\n                color: 0x000000,\n            }\n        };\n    },\n    methods: {\n        handleMouseMove(event) {\n            if (!this.isDrawing) return;\n            let x = event.clientX;\n            let y = event.clientY;\n            // Assuming a 2D drawing, so Z is constant, but this could be modified as per the requirement.\n            let z = 0;\n            draw.onMove(x, y, z);\n        },\n        handleMouseDown(event) {\n            console.log(\"mouse down\");\n            this.isDrawing = true;\n            let x = event.clientX;\n            let y = event.clientY;\n            let z = 0;\n            draw.onStart(x, y, z, this.stroke);\n        },\n        handleMouseUp() {\n            this.isDrawing = false;\n            draw.onEnd();\n        }\n    }\n}\n</script>\n\n<style scoped>\n.drawing-input {\n    width: 100%;\n    height: 100%;\n}\n</style>\n"],"mappings":";;uBACIA,mBAAA,CAGmC;IAH9BC,KAAK,EAAC,eAAe;IACrBC,WAAS,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,eAAA,IAAAD,QAAA,CAAAC,eAAA,IAAAF,IAAA,CAAe;IAC1BG,WAAS,EAAAJ,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAG,eAAA,IAAAH,QAAA,CAAAG,eAAA,IAAAJ,IAAA,CAAe;IAC1BK,SAAO,EAAAN,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAK,aAAA,IAAAL,QAAA,CAAAK,aAAA,IAAAN,IAAA,CAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}