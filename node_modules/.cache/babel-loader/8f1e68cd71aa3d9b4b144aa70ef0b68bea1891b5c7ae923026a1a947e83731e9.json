{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"arc\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1"],"sources":["/Users/olliearrison/Desktop/SURA/src/components/ArcballControl.vue"],"sourcesContent":["<template>\n    <div class=\"arc\"> </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\nimport { ArcballControls } from 'three/addons/controls/ArcballControls.js';\n\n\nexport default {\n  name: 'ArcballControl',\n  props: {\n  },\n  mounted() {\n    const renderer = new THREE.WebGLRenderer({alpha: true, antialias: true});\n    renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    this.$el.appendChild(renderer.domElement);\n\n    const scene = new THREE.Scene();\n\n    const camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 10000 );\n\n    const controls = new ArcballControls( camera, renderer.domElement, scene );\n    // increase the linewidth of the arcball wireframe\n    controls.wireframeLinewidth = 10;\n    const material = controls.line.material;\n    material.linewidth = 5;\n    material.needsUpdate = true;\n\n    controls.addEventListener( 'change', function () {\n\n      renderer.render( scene, camera );\n\n    } );\n\n    //controls.update() must be called after any manual changes to the camera's transform\n    camera.position.set( 0, 20, 100 );\n    controls.update();\n\n  }\n}\n</script>\n\n<style>\n.arc {\n  position: absolute;\n  top: 100px;\n  right: 100px;\n  width: 150px;  /* Adjust these as necessary */\n  height: 150px; /* Adjust these as necessary */\n}\n</style>"],"mappings":";;EACSA,KAAK,EAAC;AAAK;;uBAAhBC,mBAAA,CAAwB,OAAxBC,UAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}