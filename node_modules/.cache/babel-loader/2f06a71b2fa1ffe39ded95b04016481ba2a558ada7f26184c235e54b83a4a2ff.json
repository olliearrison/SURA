{"ast":null,"code":"import _defineProperty from \"/Users/olliearrison/Desktop/SURA/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/esnext.typed-array.to-reversed.js\";\nimport \"core-js/modules/esnext.typed-array.to-sorted.js\";\nimport \"core-js/modules/esnext.typed-array.with.js\";\nimport * as THREE from \"three\";\nimport { MeshLine, MeshLineMaterial, MeshLineRaycast } from \"three.meshline\";\nimport { drawSceneList, camera, plane } from \"../App.vue\";\nimport { grid } from \"./GridBackground.vue\";\nimport { index } from './DrawingInput.vue';\nlet draw = {\n  l: undefined,\n  draw: class draw {\n    constructor(stroke) {\n      _defineProperty(this, \"und\", void 0);\n      this.stroke = stroke;\n      this.line = new MeshLine();\n      this.geometry = new THREE.BufferGeometry();\n      this.vertices = [];\n      this.lineWidths = [];\n      this.geometry.setAttribute(\"position\", new THREE.BufferAttribute(new Float32Array(this.vertices), 3));\n      //this.geometry.setAttribute(\"widthCallback\", new THREE.BufferAttribute(new Float32Array(this.lineWidths), 1));\n\n      this.material = new MeshLineMaterial({\n        lineWidth: this.stroke.show_stroke ? this.stroke.lineWidth : .01,\n        sizeAttenuation: 1,\n        color: this.stroke.show_stroke ? this.stroke.color : 0xFFFFFF,\n        side: THREE.DoubleSide,\n        fog: true,\n        wireframe: false,\n        alphaTest: 0.9,\n        blending: THREE.NormalBlending,\n        transparent: false,\n        resolution: new THREE.Vector2(window.innerWidth, window.innerHeight),\n        repeat: new THREE.Vector2(.1, .1),\n        opacity: 1\n      });\n      this.mesh = new THREE.Mesh(this.line.geometry, this.material);\n      this.mesh.raycast = MeshLineRaycast;\n    }\n    translate(x, y) {\n      var vec = new THREE.Vector3();\n\n      // from stackoverflow\n      vec.set(x / window.innerWidth * 2 - 1, -(y / window.innerHeight) * 2 + 1, .5);\n      const raycaster = new THREE.Raycaster();\n      raycaster.setFromCamera(vec, camera);\n      var intersects = raycaster.intersectObject(plane);\n      const intersectPoints = intersects.map(intersection => intersection.point);\n      return intersectPoints;\n    }\n    start() {\n      drawSceneList[index].add(this.mesh);\n    }\n    move(x, y, z, stroke) {\n      //var v3 = this.translate(x, y, z);\n      this.vertices = [...this.vertices, x, y, z];\n      this.geometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(this.vertices), 3));\n      //console.log(this.vertices);\n      // This updates the MeshLine's geometry\n      var width = stroke.lineWidth;\n      this.lineWidths = [...this.lineWidths, width];\n      var widthCallback = p => {\n        return this.lineWidths[Math.floor(p * this.lineWidths.length)];\n      };\n      this.line.setGeometry(this.geometry, widthCallback);\n    }\n    erase(x, y) {\n      var vec = new THREE.Vector3();\n\n      // from stackoverflow\n      vec.set(x / window.innerWidth * 2 - 1, -(y / window.innerHeight) * 2 + 1, .5);\n      const raycaster = new THREE.Raycaster();\n      raycaster.params.Line.threshold = .1;\n\n      //raycaster.near = 0; // Set the minimum distance for intersection (default is 0)\n      //raycaster.far = 5; // Set the maximum distance for intersection (increase/decrease as needed)\n\n      raycaster.setFromCamera(vec, camera);\n      var intersects = raycaster.intersectObjects(drawSceneList[index].children, false);\n\n      //const intersectPoints = intersects.map((intersection) => intersection.point);\n      for (var i = 0; i < intersects.length; i++) {\n        var intersectedObject = intersects[i].object;\n        if (intersectedObject !== plane && intersectedObject !== grid) {\n          drawSceneList[index].remove(intersectedObject);\n          console.log(\"removed\");\n        }\n      }\n    }\n    end() {\n      if (this.vertices.length >= 3) {\n        this.geometry.computeBoundingBox();\n      }\n    }\n  },\n  onStart: function (x, y, stroke) {\n    //console.log(index);\n\n    if (stroke.eraser) {\n      this.l.erase(x, y);\n    } else {\n      this.l = new this.draw(stroke);\n      var coor = this.l.translate(x, y);\n      if (coor.length > 0) {\n        this.l.move(coor[0].x, coor[0].y, coor[0].z, stroke);\n        this.l.start();\n      }\n    }\n  },\n  onMove: function (x, y, stroke) {\n    if (this.l !== undefined) {\n      if (stroke.eraser) {\n        this.l.erase(x, y);\n      } else {\n        var coor = this.l.translate(x, y);\n        if (coor.length > 0) {\n          this.l.move(coor[0].x, coor[0].y, coor[0].z, stroke);\n        }\n      }\n    }\n  },\n  onEnd: function () {\n    this.l.end();\n  }\n};\nexport { draw };","map":{"version":3,"names":["THREE","MeshLine","MeshLineMaterial","MeshLineRaycast","drawSceneList","camera","plane","grid","index","draw","l","undefined","constructor","stroke","_defineProperty","line","geometry","BufferGeometry","vertices","lineWidths","setAttribute","BufferAttribute","Float32Array","material","lineWidth","show_stroke","sizeAttenuation","color","side","DoubleSide","fog","wireframe","alphaTest","blending","NormalBlending","transparent","resolution","Vector2","window","innerWidth","innerHeight","repeat","opacity","mesh","Mesh","raycast","translate","x","y","vec","Vector3","set","raycaster","Raycaster","setFromCamera","intersects","intersectObject","intersectPoints","map","intersection","point","start","add","move","z","width","widthCallback","p","Math","floor","length","setGeometry","erase","params","Line","threshold","intersectObjects","children","i","intersectedObject","object","remove","console","log","end","computeBoundingBox","onStart","eraser","coor","onMove","onEnd"],"sources":["/Users/olliearrison/Desktop/SURA/src/components/DrawHelper.js"],"sourcesContent":["import * as THREE from \"three\";\nimport { MeshLine, MeshLineMaterial, MeshLineRaycast } from \"three.meshline\";\nimport { drawSceneList, camera, plane } from \"../App.vue\";\nimport { grid } from \"./GridBackground.vue\";\nimport { index } from './DrawingInput.vue';\n\nlet draw = {\n    l: undefined,\n    draw: class {\n        constructor(stroke) {\n            this.stroke = stroke;\n            this.line = new MeshLine();\n            this.geometry = new THREE.BufferGeometry();\n            this.vertices = [];\n            this.lineWidths = [];\n            this.geometry.setAttribute(\"position\", new THREE.BufferAttribute(new Float32Array(this.vertices), 3));\n            //this.geometry.setAttribute(\"widthCallback\", new THREE.BufferAttribute(new Float32Array(this.lineWidths), 1));\n            \n            this.material = new MeshLineMaterial({\n                lineWidth: this.stroke.show_stroke ? this.stroke.lineWidth : .01,\n                sizeAttenuation: 1,\n                color: this.stroke.show_stroke ? this.stroke.color : 0xFFFFFF,\n                side: THREE.DoubleSide,\n                fog: true,\n                wireframe: false,\n                alphaTest: 0.9,\n                blending: THREE.NormalBlending,\n                transparent: false,\n                resolution: new THREE.Vector2(window.innerWidth, window.innerHeight),\n                repeat: new THREE.Vector2(.1, .1),\n                opacity: 1,\n            });\n            this.mesh = new THREE.Mesh(this.line.geometry, this.material);\n            this.mesh.raycast = MeshLineRaycast;\n        }\n\n\n        translate(x, y) {\n          \n            var vec = new THREE.Vector3();\n    \n            // from stackoverflow\n            vec.set(\n                ( x / window.innerWidth ) * 2 - 1,\n                - ( y / window.innerHeight ) * 2 + 1,\n                .5 );\n\n            const raycaster = new THREE.Raycaster();\n            raycaster.setFromCamera( vec, camera );\n            var intersects = raycaster.intersectObject( plane );\n            \n            const intersectPoints = intersects.map((intersection) => intersection.point);\n            return intersectPoints;\n                    \n        }\n\n        start() {\n            drawSceneList[index].add(this.mesh);\n        }\n\n        move(x, y, z, stroke) {\n            //var v3 = this.translate(x, y, z);\n            this.vertices = [...this.vertices, x, y, z];\n            this.geometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(this.vertices), 3));\n            //console.log(this.vertices);\n              // This updates the MeshLine's geometry\n            var width = stroke.lineWidth;\n            \n            this.lineWidths = [...this.lineWidths, width];\n            \n            var widthCallback = (p) => {\n                return this.lineWidths[Math.floor(p * this.lineWidths.length)];\n            };\n\n            this.line.setGeometry(this.geometry, widthCallback);\n        }\n\n        erase(x, y) {\n            var vec = new THREE.Vector3();\n    \n            // from stackoverflow\n            vec.set(\n                ( x / window.innerWidth ) * 2 - 1,\n                - ( y / window.innerHeight ) * 2 + 1,\n                .5 );\n\n            const raycaster = new THREE.Raycaster();\n            raycaster.params.Line.threshold = .1;\n\n            //raycaster.near = 0; // Set the minimum distance for intersection (default is 0)\n            //raycaster.far = 5; // Set the maximum distance for intersection (increase/decrease as needed)\n\n\n            raycaster.setFromCamera( vec, camera );\n            var intersects = raycaster.intersectObjects(drawSceneList[index].children, false);\n            \n            //const intersectPoints = intersects.map((intersection) => intersection.point);\n            for (var i = 0; i < intersects.length; i++) {\n                var intersectedObject = intersects[i].object;\n                if (intersectedObject !== plane && intersectedObject !== grid) {\n                    drawSceneList[index].remove(intersectedObject);\n                    console.log(\"removed\");\n                }\n                \n            }\n\n\n        }\n\n        end() {\n            if (this.vertices.length >= 3) {\n                this.geometry.computeBoundingBox();\n              }\n        }\n\n        und\n\n\n    },\n    onStart: function (x, y, stroke) {\n        //console.log(index);\n        \n        if (stroke.eraser){\n            this.l.erase(x, y);\n        } else {\n            this.l = new this.draw(stroke);\n\n        var coor = this.l.translate(x, y);\n\n        if (coor.length > 0)\n        {\n            this.l.move(coor[0].x, coor[0].y, coor[0].z, stroke);\n            this.l.start();\n        }\n    }\n        \n    },\n    onMove: function (x, y, stroke) {\n\n        \n        if(this.l !== undefined) {\n            if (stroke.eraser){\n                this.l.erase(x, y);\n            } else {\n\n                var coor = this.l.translate(x, y);\n                if (coor.length > 0)\n                {\n                    this.l.move(coor[0].x, coor[0].y, coor[0].z, stroke);\n                }\n            }\n        }\n        \n    },\n    onEnd: function () {\n        this.l.end();\n    },\n}\n\nexport { draw }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}