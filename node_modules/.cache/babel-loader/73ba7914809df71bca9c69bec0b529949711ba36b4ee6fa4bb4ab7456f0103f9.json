{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_HelloWorld = _resolveComponent(\"HelloWorld\");\n  return _openBlock(), _createBlock(_component_HelloWorld, {\n    msg: \"Welcome to Your Vue.js App\"\n  });\n}","map":{"version":3,"names":["_createBlock","_component_HelloWorld","msg"],"sources":["/Users/olliearrison/Desktop/v1/src/App.vue"],"sourcesContent":["<template>\n  <HelloWorld msg=\"Welcome to Your Vue.js App\"/>\n</template>\n\n<script>\nimport * as THREE from 'three';\n\n\nconst scene = new THREE.Scene();\n\n// Create a renderer\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\n// Create a camera\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\ncamera.position.z = 2;\ncamera.position.x = 0;\n\n\nrenderer.setClearColor(new THREE.Color(0x000000));\nrenderer.setClearColor(0x000000, 0);\n\n\n// Create a geometry\nconst geometry = new THREE.BoxGeometry(1, 1, 1);\n\nconst edges = new THREE.EdgesGeometry(geometry);\n\n// Create a material\n\nconst lineMaterial = new THREE.LineBasicMaterial({ color: 0x00ff00 });\n\n// Create a mesh\n\nconst cube = new THREE.LineSegments(edges, lineMaterial);\n\n// Add the mesh to the scene\n\n\nscene.add(cube);\n\n// Vertex Shader\nconst vertexShader = `\nvarying vec3 vUv; \n\nvoid main() {\n  vUv = position; \n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);\n}\n`;\n\n// Fragment Shader\nconst fragmentShader = `\nvarying vec3 vUv;\nuniform float scale;\n\nvoid main() {\n  vec2 grid = abs(fract(vUv.xz * scale) - 0.5);\n  float line = min(grid.y, grid.x);\n  \n  vec3 color = vec3(1.0 - min(line, 1.0));\n  float alpha = clamp(line * 20.0, 0.0, 1.0);  // Use line value to set alpha\n  \n  gl_FragColor = vec4(color, alpha);\n}\n`;\n\n\n// Shader Material\nconst shaderMaterial = new THREE.ShaderMaterial({\n  side: THREE.DoubleSide,\n  uniforms: {\n    scale: { value: 10.0 }, // Modify this to adjust the grid scale\n  },\n  transparent: true,\n  vertexShader: vertexShader,\n  fragmentShader: fragmentShader,\n});\n\nconst planeGeometry = new THREE.PlaneGeometry(100, 100, 10, 10);\nconst grid = new THREE.Mesh(planeGeometry, shaderMaterial);\nscene.add(grid);\n\nlet rotationSpeed = 0.01; // Initial rotation speed\n\n// Create a button\nconst button = document.createElement('button');\nbutton.textContent = 'Increase Speed';\ndocument.body.appendChild(button);\n\n// Add event listener to the button\nbutton.addEventListener('click', () => {\n  rotationSpeed += 0.01; // Increase the rotation speed by 0.01\n});\n\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // Rotate the cube\n  cube.rotation.x += rotationSpeed;\n  cube.rotation.y += rotationSpeed;\n\n  grid.rotation.x += .01;\n\n  // Render the scene with the camera\n  renderer.render(scene, camera);\n}\n\nanimate();\n\n\n\nimport HelloWorld from './components/HelloWorld.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld\n  }\n}\n\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"],"mappings":";;;uBACEA,YAAA,CAA8CC,qBAAA;IAAlCC,GAAG,EAAC;EAA4B"},"metadata":{},"sourceType":"module","externalDependencies":[]}