{"ast":null,"code":"import * as THREE from 'three';\nimport InfiniteGridHelper from \"./InfiniteGridHelper.js\";\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // Rotate the cube\n  cube.rotation.x += rotationSpeed;\n  cube.rotation.y += rotationSpeed;\n  grid.rotation.x += .005;\n  grid.rotation.y += .003;\n\n  // Render the scene with the camera\n  renderer.render(scene, camera);\n}\nanimate();\nexport default {\n  name: 'GridBackground',\n  props: {},\n  mounted() {\n    const scene = new THREE.Scene();\n\n    // Create a renderer\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n\n    // Create a camera\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 2;\n    camera.position.x = 0;\n    renderer.setClearColor(new THREE.Color(0x000000));\n\n    // Create a geometry\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    const edges = new THREE.EdgesGeometry(geometry);\n\n    // Create a material\n\n    const lineMaterial = new THREE.LineBasicMaterial({\n      color: 0x00ff00\n    });\n\n    // Create a mesh\n\n    const cube = new THREE.LineSegments(edges, lineMaterial);\n\n    // Add the mesh to the scene\n\n    scene.add(cube);\n    const grid = InfiniteGridHelper();\n    scene.add(grid);\n    let rotationSpeed = 0.01; // Initial rotation speed\n  }\n};","map":{"version":3,"names":["THREE","InfiniteGridHelper","animate","requestAnimationFrame","cube","rotation","x","rotationSpeed","y","grid","renderer","render","scene","camera","name","props","mounted","Scene","WebGLRenderer","setSize","window","innerWidth","innerHeight","document","body","appendChild","domElement","PerspectiveCamera","position","z","setClearColor","Color","geometry","BoxGeometry","edges","EdgesGeometry","lineMaterial","LineBasicMaterial","color","LineSegments","add"],"sources":["/Users/olliearrison/Desktop/SURA/src/components/GridBackground.vue"],"sourcesContent":["<template>\n    <div class=\"grid\"> </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\nimport InfiniteGridHelper from \"./InfiniteGridHelper.js\";\n\n\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // Rotate the cube\n  cube.rotation.x += rotationSpeed;\n  cube.rotation.y += rotationSpeed;\n\n  grid.rotation.x += .005;\n  grid.rotation.y += .003;\n\n  // Render the scene with the camera\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nexport default {\n  name: 'GridBackground',\n  props: {\n  },\n  mounted(){\n    const scene = new THREE.Scene();\n\n    // Create a renderer\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n\n    // Create a camera\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 2;\n    camera.position.x = 0;\n\n\n    renderer.setClearColor(new THREE.Color(0x000000));\n\n\n    // Create a geometry\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n\n    const edges = new THREE.EdgesGeometry(geometry);\n\n    // Create a material\n\n    const lineMaterial = new THREE.LineBasicMaterial({ color: 0x00ff00 });\n\n    // Create a mesh\n\n    const cube = new THREE.LineSegments(edges, lineMaterial);\n\n    // Add the mesh to the scene\n\n\n    scene.add(cube);\n\n    const grid = InfiniteGridHelper();\n    scene.add(grid);\n\n    let rotationSpeed = 0.01; // Initial rotation speed\n  }\n}\n</script>\n\n<style>\n\n#grid-background {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n</style>"],"mappings":"AAKA,OAAO,KAAKA,KAAI,MAAO,OAAO;AAC9B,OAAOC,kBAAiB,MAAO,yBAAyB;AAGxD,SAASC,OAAOA,CAAA,EAAG;EACjBC,qBAAqB,CAACD,OAAO,CAAC;;EAE9B;EACAE,IAAI,CAACC,QAAQ,CAACC,CAAA,IAAKC,aAAa;EAChCH,IAAI,CAACC,QAAQ,CAACG,CAAA,IAAKD,aAAa;EAEhCE,IAAI,CAACJ,QAAQ,CAACC,CAAA,IAAK,IAAI;EACvBG,IAAI,CAACJ,QAAQ,CAACG,CAAA,IAAK,IAAI;;EAEvB;EACAE,QAAQ,CAACC,MAAM,CAACC,KAAK,EAAEC,MAAM,CAAC;AAChC;AAEAX,OAAO,CAAC,CAAC;AAET,eAAe;EACbY,IAAI,EAAE,gBAAgB;EACtBC,KAAK,EAAE,CACP,CAAC;EACDC,OAAOA,CAAA,EAAE;IACP,MAAMJ,KAAI,GAAI,IAAIZ,KAAK,CAACiB,KAAK,CAAC,CAAC;;IAE/B;IACA,MAAMP,QAAO,GAAI,IAAIV,KAAK,CAACkB,aAAa,CAAC,CAAC;IAC1CR,QAAQ,CAACS,OAAO,CAACC,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACvDC,QAAQ,CAACC,IAAI,CAACC,WAAW,CAACf,QAAQ,CAACgB,UAAU,CAAC;;IAE9C;IACA,MAAMb,MAAK,GAAI,IAAIb,KAAK,CAAC2B,iBAAiB,CAAC,EAAE,EAAEP,MAAM,CAACC,UAAS,GAAID,MAAM,CAACE,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC;IACjGT,MAAM,CAACe,QAAQ,CAACC,CAAA,GAAI,CAAC;IACrBhB,MAAM,CAACe,QAAQ,CAACtB,CAAA,GAAI,CAAC;IAGrBI,QAAQ,CAACoB,aAAa,CAAC,IAAI9B,KAAK,CAAC+B,KAAK,CAAC,QAAQ,CAAC,CAAC;;IAGjD;IACA,MAAMC,QAAO,GAAI,IAAIhC,KAAK,CAACiC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAE/C,MAAMC,KAAI,GAAI,IAAIlC,KAAK,CAACmC,aAAa,CAACH,QAAQ,CAAC;;IAE/C;;IAEA,MAAMI,YAAW,GAAI,IAAIpC,KAAK,CAACqC,iBAAiB,CAAC;MAAEC,KAAK,EAAE;IAAS,CAAC,CAAC;;IAErE;;IAEA,MAAMlC,IAAG,GAAI,IAAIJ,KAAK,CAACuC,YAAY,CAACL,KAAK,EAAEE,YAAY,CAAC;;IAExD;;IAGAxB,KAAK,CAAC4B,GAAG,CAACpC,IAAI,CAAC;IAEf,MAAMK,IAAG,GAAIR,kBAAkB,CAAC,CAAC;IACjCW,KAAK,CAAC4B,GAAG,CAAC/B,IAAI,CAAC;IAEf,IAAIF,aAAY,GAAI,IAAI,EAAE;EAC5B;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}