{"ast":null,"code":"import * as THREE from 'three';\nconst scene = new THREE.Scene();\n\n// Create a renderer\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\n// Create a camera\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\ncamera.position.z = 2;\ncamera.position.x = 0;\nrenderer.setClearColor(new THREE.Color(0x000000));\n\n// Create a geometry\nconst geometry = new THREE.BoxGeometry(1, 1, 1);\nconst edges = new THREE.EdgesGeometry(geometry);\n\n// Create a material\n\nconst lineMaterial = new THREE.LineBasicMaterial({\n  color: 0x00ff00\n});\n\n// Create a mesh\n\nconst cube = new THREE.LineSegments(edges, lineMaterial);\n\n// Add the mesh to the scene\n\nscene.add(cube);\nconst axes = 'xzy';\nconst planeAxes = axes.slice(0, 2);\nconst color = new THREE.Color('white');\nconst size1 = 10;\nconst size2 = 100;\nconst distance = 400;\nconst material = new THREE.ShaderMaterial({\n  side: THREE.DoubleSide,\n  uniforms: {\n    uSize1: {\n      value: size1\n    },\n    uSize2: {\n      value: size2\n    },\n    uColor: {\n      value: color\n    },\n    uDistance: {\n      value: distance\n    }\n  },\n  transparent: true,\n  vertexShader: `\n   \n   varying vec3 worldPosition;\n\n   uniform float uDistance;\n   \n   void main() {\n   \n        vec3 pos = position.${axes} * uDistance;\n        pos.${planeAxes} += cameraPosition.${planeAxes};\n        \n        worldPosition = pos;\n        \n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n   \n   }\n   `,\n  fragmentShader: `\n   \n   varying vec3 worldPosition;\n   \n   uniform float uSize1;\n   uniform float uSize2;\n   uniform vec3 uColor;\n   uniform float uDistance;\n    \n    \n    \n    float getGrid(float size) {\n    \n        vec2 r = worldPosition.${planeAxes} / size;\n        \n        \n        vec2 grid = abs(fract(r - 0.5) - 0.5) / fwidth(r);\n        float line = min(grid.x, grid.y);\n        \n    \n        return 1.0 - min(line, 1.0);\n    }\n    \n   void main() {\n   \n        \n          float d = 1.0 - min(distance(cameraPosition.${planeAxes}, worldPosition.${planeAxes}) / uDistance, 1.0);\n        \n          float g1 = getGrid(uSize1);\n          float g2 = getGrid(uSize2);\n          \n          \n          gl_FragColor = vec4(uColor.rgb, mix(g2, g1, g1) * pow(d, 3.0));\n          gl_FragColor.a = mix(0.5 * gl_FragColor.a, gl_FragColor.a, g2);\n        \n          if ( gl_FragColor.a <= 0.0 ) discard;\n        \n   \n   }\n   \n   `,\n  extensions: {\n    derivatives: true\n  }\n});\nconst planeGeometry = new THREE.PlaneGeometry(2, 2, 1, 1);\nconst grid = new THREE.Mesh(planeGeometry, material);\nscene.add(grid);\nlet rotationSpeed = 0.01; // Initial rotation speed\n\n// Create a button\nconst button = document.createElement('button');\nbutton.textContent = 'Increase Speed';\ndocument.body.appendChild(button);\n\n// Add event listener to the button\nbutton.addEventListener('click', () => {\n  rotationSpeed += 0.01; // Increase the rotation speed by 0.01\n});\n\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // Rotate the cube\n  cube.rotation.x += rotationSpeed;\n  cube.rotation.y += rotationSpeed;\n  grid.rotation.x += .01;\n  grid.rotation.y += .02;\n\n  // Render the scene with the camera\n  renderer.render(scene, camera);\n}\nanimate();\nimport HelloWorld from './components/HelloWorld.vue';\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld\n  }\n};","map":{"version":3,"names":["THREE","scene","Scene","renderer","WebGLRenderer","setSize","window","innerWidth","innerHeight","document","body","appendChild","domElement","camera","PerspectiveCamera","position","z","x","setClearColor","Color","geometry","BoxGeometry","edges","EdgesGeometry","lineMaterial","LineBasicMaterial","color","cube","LineSegments","add","axes","planeAxes","slice","size1","size2","distance","material","ShaderMaterial","side","DoubleSide","uniforms","uSize1","value","uSize2","uColor","uDistance","transparent","vertexShader","fragmentShader","extensions","derivatives","planeGeometry","PlaneGeometry","grid","Mesh","rotationSpeed","button","createElement","textContent","addEventListener","animate","requestAnimationFrame","rotation","y","render","HelloWorld","name","components"],"sources":["/Users/olliearrison/Desktop/v1/src/App.vue"],"sourcesContent":["<template>\n  <HelloWorld msg=\"Welcome to Your Vue.js App\"/>\n</template>\n\n<script>\nimport * as THREE from 'three';\n\n\nconst scene = new THREE.Scene();\n\n// Create a renderer\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\n// Create a camera\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\ncamera.position.z = 2;\ncamera.position.x = 0;\n\n\nrenderer.setClearColor(new THREE.Color(0x000000));\n\n\n// Create a geometry\nconst geometry = new THREE.BoxGeometry(1, 1, 1);\n\nconst edges = new THREE.EdgesGeometry(geometry);\n\n// Create a material\n\nconst lineMaterial = new THREE.LineBasicMaterial({ color: 0x00ff00 });\n\n// Create a mesh\n\nconst cube = new THREE.LineSegments(edges, lineMaterial);\n\n// Add the mesh to the scene\n\n\nscene.add(cube);\n\nconst axes = 'xzy';\nconst planeAxes = axes.slice(0, 2);\nconst color = new THREE.Color('white');\nconst size1 = 10;\nconst size2 = 100;\n\nconst distance = 400;\n\nconst material = new THREE.ShaderMaterial({\n\nside: THREE.DoubleSide,\n\nuniforms: {\n    uSize1: {\n        value: size1\n    },\n    uSize2: {\n        value: size2\n    },\n    uColor: {\n        value: color\n    },\n    uDistance: {\n        value: distance\n    }\n},\ntransparent: true,\nvertexShader: `\n   \n   varying vec3 worldPosition;\n\n   uniform float uDistance;\n   \n   void main() {\n   \n        vec3 pos = position.${axes} * uDistance;\n        pos.${planeAxes} += cameraPosition.${planeAxes};\n        \n        worldPosition = pos;\n        \n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n   \n   }\n   `,\n\n\nfragmentShader: `\n   \n   varying vec3 worldPosition;\n   \n   uniform float uSize1;\n   uniform float uSize2;\n   uniform vec3 uColor;\n   uniform float uDistance;\n    \n    \n    \n    float getGrid(float size) {\n    \n        vec2 r = worldPosition.${planeAxes} / size;\n        \n        \n        vec2 grid = abs(fract(r - 0.5) - 0.5) / fwidth(r);\n        float line = min(grid.x, grid.y);\n        \n    \n        return 1.0 - min(line, 1.0);\n    }\n    \n   void main() {\n   \n        \n          float d = 1.0 - min(distance(cameraPosition.${planeAxes}, worldPosition.${planeAxes}) / uDistance, 1.0);\n        \n          float g1 = getGrid(uSize1);\n          float g2 = getGrid(uSize2);\n          \n          \n          gl_FragColor = vec4(uColor.rgb, mix(g2, g1, g1) * pow(d, 3.0));\n          gl_FragColor.a = mix(0.5 * gl_FragColor.a, gl_FragColor.a, g2);\n        \n          if ( gl_FragColor.a <= 0.0 ) discard;\n        \n   \n   }\n   \n   `,\n\nextensions: {\n    derivatives: true\n}\n\n});\n\nconst planeGeometry = new THREE.PlaneGeometry(2, 2, 1, 1);\nconst grid = new THREE.Mesh(planeGeometry, material);\nscene.add(grid);\n\nlet rotationSpeed = 0.01; // Initial rotation speed\n\n// Create a button\nconst button = document.createElement('button');\nbutton.textContent = 'Increase Speed';\ndocument.body.appendChild(button);\n\n// Add event listener to the button\nbutton.addEventListener('click', () => {\n  rotationSpeed += 0.01; // Increase the rotation speed by 0.01\n});\n\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // Rotate the cube\n  cube.rotation.x += rotationSpeed;\n  cube.rotation.y += rotationSpeed;\n\n  grid.rotation.x += .01;\n  grid.rotation.y += .02;\n\n  // Render the scene with the camera\n  renderer.render(scene, camera);\n}\n\nanimate();\n\n\n\nimport HelloWorld from './components/HelloWorld.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld\n  }\n}\n\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}