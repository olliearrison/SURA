{"ast":null,"code":"require(\"core-js/modules/esnext.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/esnext.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/esnext.typed-array.with.js\");\nrequire(\"core-js/modules/es.array.push.js\");\n;\n(function () {\n  'use strict';\n\n  var root = this;\n  var has_require = typeof require !== 'undefined';\n  var THREE = root.THREE || has_require && require('three');\n  if (!THREE) throw new Error('MeshLine requires three.js');\n  class MeshLine extends THREE.BufferGeometry {\n    constructor() {\n      super();\n      this.isMeshLine = true;\n      this.type = 'MeshLine';\n      this.positions = [];\n      this.previous = [];\n      this.next = [];\n      this.side = [];\n      this.width = [];\n      this.indices_array = [];\n      this.uvs = [];\n      this.counters = [];\n      this._points = [];\n      this._geom = null;\n      this.widthCallback = null;\n\n      // Used to raycast\n      this.matrixWorld = new THREE.Matrix4();\n      Object.defineProperties(this, {\n        // this is now a bufferGeometry\n        // add getter to support previous api\n        geometry: {\n          enumerable: true,\n          get: function () {\n            return this;\n          }\n        },\n        geom: {\n          enumerable: true,\n          get: function () {\n            return this._geom;\n          },\n          set: function (value) {\n            this.setGeometry(value, this.widthCallback);\n          }\n        },\n        // for declaritive architectures\n        // to return the same value that sets the points\n        // eg. this.points = points\n        // console.log(this.points) -> points\n        points: {\n          enumerable: true,\n          get: function () {\n            return this._points;\n          },\n          set: function (value) {\n            this.setPoints(value, this.widthCallback);\n          }\n        }\n      });\n    }\n  }\n  MeshLine.prototype.setMatrixWorld = function (matrixWorld) {\n    this.matrixWorld = matrixWorld;\n  };\n\n  // setting via a geometry is rather superfluous\n  // as you're creating a unecessary geometry just to throw away\n  // but exists to support previous api\n  MeshLine.prototype.setGeometry = function (g, c) {\n    // as the input geometry are mutated we store them\n    // for later retreival when necessary (declaritive architectures)\n    this._geometry = g;\n    this.setPoints(g.getAttribute(\"position\").array, c);\n  };\n  MeshLine.prototype.setPoints = function (points, wcb) {\n    if (!(points instanceof Float32Array) && !(points instanceof Array)) {\n      console.error(\"ERROR: The BufferArray of points is not instancied correctly.\");\n      return;\n    }\n    // as the points are mutated we store them\n    // for later retreival when necessary (declaritive architectures)\n    this._points = points;\n    this.widthCallback = wcb;\n    this.positions = [];\n    this.counters = [];\n    if (points.length && points[0] instanceof THREE.Vector3) {\n      // could transform Vector3 array into the array used below\n      // but this approach will only loop through the array once\n      // and is more performant\n      for (var j = 0; j < points.length; j++) {\n        var p = points[j];\n        var c = j / points.length;\n        this.positions.push(p.x, p.y, p.z);\n        this.positions.push(p.x, p.y, p.z);\n        this.counters.push(c);\n        this.counters.push(c);\n      }\n    } else {\n      for (var j = 0; j < points.length; j += 3) {\n        var c = j / points.length;\n        this.positions.push(points[j], points[j + 1], points[j + 2]);\n        this.positions.push(points[j], points[j + 1], points[j + 2]);\n        this.counters.push(c);\n        this.counters.push(c);\n      }\n    }\n    this.process();\n  };\n  function MeshLineRaycast(raycaster, intersects) {\n    var inverseMatrix = new THREE.Matrix4();\n    var ray = new THREE.Ray();\n    var sphere = new THREE.Sphere();\n    var interRay = new THREE.Vector3();\n    var geometry = this.geometry;\n    // Checking boundingSphere distance to ray\n\n    if (!geometry.boundingSphere) geometry.computeBoundingSphere();\n    sphere.copy(geometry.boundingSphere);\n    sphere.applyMatrix4(this.matrixWorld);\n    if (raycaster.ray.intersectSphere(sphere, interRay) === false) {\n      return;\n    }\n    inverseMatrix.copy(this.matrixWorld).invert();\n    ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n    var vStart = new THREE.Vector3();\n    var vEnd = new THREE.Vector3();\n    var interSegment = new THREE.Vector3();\n    var step = this instanceof THREE.LineSegments ? 2 : 1;\n    var index = geometry.index;\n    var attributes = geometry.attributes;\n    if (index !== null) {\n      var indices = index.array;\n      var positions = attributes.position.array;\n      var widths = attributes.width.array;\n      for (var i = 0, l = indices.length - 1; i < l; i += step) {\n        var a = indices[i];\n        var b = indices[i + 1];\n        vStart.fromArray(positions, a * 3);\n        vEnd.fromArray(positions, b * 3);\n        var width = widths[Math.floor(i / 3)] !== undefined ? widths[Math.floor(i / 3)] : 1;\n        var precision = raycaster.params.Line.threshold + this.material.lineWidth * width / 2;\n        var precisionSq = precision * precision;\n        var distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n        if (distSq > precisionSq) continue;\n        interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n        var distance = raycaster.ray.origin.distanceTo(interRay);\n        if (distance < raycaster.near || distance > raycaster.far) continue;\n        intersects.push({\n          distance: distance,\n          // What do we want? intersection point on the ray or on the segment??\n          // point: raycaster.ray.at( distance ),\n          point: interSegment.clone().applyMatrix4(this.matrixWorld),\n          index: i,\n          face: null,\n          faceIndex: null,\n          object: this\n        });\n        // make event only fire once\n        i = l;\n      }\n    }\n  }\n  MeshLine.prototype.raycast = MeshLineRaycast;\n  MeshLine.prototype.compareV3 = function (a, b) {\n    var aa = a * 6;\n    var ab = b * 6;\n    return this.positions[aa] === this.positions[ab] && this.positions[aa + 1] === this.positions[ab + 1] && this.positions[aa + 2] === this.positions[ab + 2];\n  };\n  MeshLine.prototype.copyV3 = function (a) {\n    var aa = a * 6;\n    return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\n  };\n  MeshLine.prototype.process = function () {\n    var l = this.positions.length / 6;\n    this.previous = [];\n    this.next = [];\n    this.side = [];\n    this.width = [];\n    this.indices_array = [];\n    this.uvs = [];\n    var w;\n    var v;\n    // initial previous points\n    if (this.compareV3(0, l - 1)) {\n      v = this.copyV3(l - 2);\n    } else {\n      v = this.copyV3(0);\n    }\n    this.previous.push(v[0], v[1], v[2]);\n    this.previous.push(v[0], v[1], v[2]);\n    for (var j = 0; j < l; j++) {\n      // sides\n      this.side.push(1);\n      this.side.push(-1);\n\n      // widths\n      if (this.widthCallback) w = this.widthCallback(j / (l - 1));else w = 1;\n      this.width.push(w);\n      this.width.push(w);\n\n      // uvs\n      this.uvs.push(j / (l - 1), 0);\n      this.uvs.push(j / (l - 1), 1);\n      if (j < l - 1) {\n        // points previous to poisitions\n        v = this.copyV3(j);\n        this.previous.push(v[0], v[1], v[2]);\n        this.previous.push(v[0], v[1], v[2]);\n\n        // indices\n        var n = j * 2;\n        this.indices_array.push(n, n + 1, n + 2);\n        this.indices_array.push(n + 2, n + 1, n + 3);\n      }\n      if (j > 0) {\n        // points after poisitions\n        v = this.copyV3(j);\n        this.next.push(v[0], v[1], v[2]);\n        this.next.push(v[0], v[1], v[2]);\n      }\n    }\n\n    // last next point\n    if (this.compareV3(l - 1, 0)) {\n      v = this.copyV3(1);\n    } else {\n      v = this.copyV3(l - 1);\n    }\n    this.next.push(v[0], v[1], v[2]);\n    this.next.push(v[0], v[1], v[2]);\n\n    // redefining the attribute seems to prevent range errors\n    // if the user sets a differing number of vertices\n    if (!this._attributes || this._attributes.position.count !== this.positions.length) {\n      this._attributes = {\n        position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\n        previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\n        next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\n        side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\n        width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\n        uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\n        index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\n        counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1)\n      };\n    } else {\n      this._attributes.position.copyArray(new Float32Array(this.positions));\n      this._attributes.position.needsUpdate = true;\n      this._attributes.previous.copyArray(new Float32Array(this.previous));\n      this._attributes.previous.needsUpdate = true;\n      this._attributes.next.copyArray(new Float32Array(this.next));\n      this._attributes.next.needsUpdate = true;\n      this._attributes.side.copyArray(new Float32Array(this.side));\n      this._attributes.side.needsUpdate = true;\n      this._attributes.width.copyArray(new Float32Array(this.width));\n      this._attributes.width.needsUpdate = true;\n      this._attributes.uv.copyArray(new Float32Array(this.uvs));\n      this._attributes.uv.needsUpdate = true;\n      this._attributes.index.copyArray(new Uint16Array(this.indices_array));\n      this._attributes.index.needsUpdate = true;\n    }\n    this.setAttribute('position', this._attributes.position);\n    this.setAttribute('previous', this._attributes.previous);\n    this.setAttribute('next', this._attributes.next);\n    this.setAttribute('side', this._attributes.side);\n    this.setAttribute('width', this._attributes.width);\n    this.setAttribute('uv', this._attributes.uv);\n    this.setAttribute('counters', this._attributes.counters);\n    this.setIndex(this._attributes.index);\n    this.computeBoundingSphere();\n    this.computeBoundingBox();\n  };\n  function memcpy(src, srcOffset, dst, dstOffset, length) {\n    var i;\n    src = src.subarray || src.slice ? src : src.buffer;\n    dst = dst.subarray || dst.slice ? dst : dst.buffer;\n    src = srcOffset ? src.subarray ? src.subarray(srcOffset, length && srcOffset + length) : src.slice(srcOffset, length && srcOffset + length) : src;\n    if (dst.set) {\n      dst.set(src, dstOffset);\n    } else {\n      for (i = 0; i < src.length; i++) {\n        dst[i + dstOffset] = src[i];\n      }\n    }\n    return dst;\n  }\n\n  /**\r\n   * Fast method to advance the line by one position.  The oldest position is removed.\r\n   * @param position\r\n   */\n  MeshLine.prototype.advance = function (position) {\n    var positions = this._attributes.position.array;\n    var previous = this._attributes.previous.array;\n    var next = this._attributes.next.array;\n    var l = positions.length;\n\n    // PREVIOUS\n    memcpy(positions, 0, previous, 0, l);\n\n    // POSITIONS\n    memcpy(positions, 6, positions, 0, l - 6);\n    positions[l - 6] = position.x;\n    positions[l - 5] = position.y;\n    positions[l - 4] = position.z;\n    positions[l - 3] = position.x;\n    positions[l - 2] = position.y;\n    positions[l - 1] = position.z;\n\n    // NEXT\n    memcpy(positions, 6, next, 0, l - 6);\n    next[l - 6] = position.x;\n    next[l - 5] = position.y;\n    next[l - 4] = position.z;\n    next[l - 3] = position.x;\n    next[l - 2] = position.y;\n    next[l - 1] = position.z;\n    this._attributes.position.needsUpdate = true;\n    this._attributes.previous.needsUpdate = true;\n    this._attributes.next.needsUpdate = true;\n  };\n  THREE.ShaderChunk['meshline_vert'] = ['', THREE.ShaderChunk.logdepthbuf_pars_vertex, THREE.ShaderChunk.fog_pars_vertex, '', 'attribute vec3 previous;', 'attribute vec3 next;', 'attribute float side;', 'attribute float width;', 'attribute float counters;', '', 'uniform vec2 resolution;', 'uniform float lineWidth;', 'uniform vec3 color;', 'uniform float opacity;', 'uniform float sizeAttenuation;', '', 'varying vec2 vUV;', 'varying vec4 vColor;', 'varying float vCounters;', '', 'vec2 fix( vec4 i, float aspect ) {', '', '    vec2 res = i.xy / i.w;', '    res.x *= aspect;', '\t vCounters = counters;', '    return res;', '', '}', '', 'void main() {', '', '    float aspect = resolution.x / resolution.y;', '', '    vColor = vec4( color, opacity );', '    vUV = uv;', '', '    mat4 m = projectionMatrix * modelViewMatrix;', '    vec4 finalPosition = m * vec4( position, 1.0 );', '    vec4 prevPos = m * vec4( previous, 1.0 );', '    vec4 nextPos = m * vec4( next, 1.0 );', '', '    vec2 currentP = fix( finalPosition, aspect );', '    vec2 prevP = fix( prevPos, aspect );', '    vec2 nextP = fix( nextPos, aspect );', '', '    float w = lineWidth * width;', '', '    vec2 dir;', '    if( nextP == currentP ) dir = normalize( currentP - prevP );', '    else if( prevP == currentP ) dir = normalize( nextP - currentP );', '    else {', '        vec2 dir1 = normalize( currentP - prevP );', '        vec2 dir2 = normalize( nextP - currentP );', '        dir = normalize( dir1 + dir2 );', '', '        vec2 perp = vec2( -dir1.y, dir1.x );', '        vec2 miter = vec2( -dir.y, dir.x );', '        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );', '', '    }', '', '    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;', '    vec4 normal = vec4( -dir.y, dir.x, 0., 1. );', '    normal.xy *= .5 * w;', '    normal *= projectionMatrix;', '    if( sizeAttenuation == 0. ) {', '        normal.xy *= finalPosition.w;', '        normal.xy /= ( vec4( resolution, 0., 1. ) * projectionMatrix ).xy;', '    }', '', '    finalPosition.xy += normal.xy * side;', '', '    gl_Position = finalPosition;', '', THREE.ShaderChunk.logdepthbuf_vertex, THREE.ShaderChunk.fog_vertex && '    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );', THREE.ShaderChunk.fog_vertex, '}'].join('\\n');\n  THREE.ShaderChunk['meshline_frag'] = ['', THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, '', 'uniform sampler2D map;', 'uniform sampler2D alphaMap;', 'uniform float useMap;', 'uniform float useAlphaMap;', 'uniform float useDash;', 'uniform float dashArray;', 'uniform float dashOffset;', 'uniform float dashRatio;', 'uniform float visibility;', 'uniform float alphaTest;', 'uniform vec2 repeat;', '', 'varying vec2 vUV;', 'varying vec4 vColor;', 'varying float vCounters;', '', 'void main() {', '', THREE.ShaderChunk.logdepthbuf_fragment, '', '    vec4 c = vColor;', '    if( useMap == 1. ) c *= texture2D( map, vUV * repeat );', '    if( useAlphaMap == 1. ) c.a *= texture2D( alphaMap, vUV * repeat ).a;', '    if( c.a < alphaTest ) discard;', '    if( useDash == 1. ){', '        c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));', '    }', '    gl_FragColor = c;', '    gl_FragColor.a *= step(vCounters, visibility);', '', THREE.ShaderChunk.fog_fragment, '}'].join('\\n');\n  class MeshLineMaterial extends THREE.ShaderMaterial {\n    constructor(parameters) {\n      super({\n        uniforms: Object.assign({}, THREE.UniformsLib.fog, {\n          lineWidth: {\n            value: 1\n          },\n          map: {\n            value: null\n          },\n          useMap: {\n            value: 0\n          },\n          alphaMap: {\n            value: null\n          },\n          useAlphaMap: {\n            value: 0\n          },\n          color: {\n            value: new THREE.Color(0xffffff)\n          },\n          opacity: {\n            value: 1\n          },\n          resolution: {\n            value: new THREE.Vector2(1, 1)\n          },\n          sizeAttenuation: {\n            value: 1\n          },\n          dashArray: {\n            value: 0\n          },\n          dashOffset: {\n            value: 0\n          },\n          dashRatio: {\n            value: 0.5\n          },\n          useDash: {\n            value: 0\n          },\n          visibility: {\n            value: 1\n          },\n          alphaTest: {\n            value: 0\n          },\n          repeat: {\n            value: new THREE.Vector2(1, 1)\n          }\n        }),\n        vertexShader: THREE.ShaderChunk.meshline_vert,\n        fragmentShader: THREE.ShaderChunk.meshline_frag\n      });\n      this.isMeshLineMaterial = true;\n      this.type = 'MeshLineMaterial';\n      Object.defineProperties(this, {\n        lineWidth: {\n          enumerable: true,\n          get: function () {\n            return this.uniforms.lineWidth.value;\n          },\n          set: function (value) {\n            this.uniforms.lineWidth.value = value;\n          }\n        },\n        map: {\n          enumerable: true,\n          get: function () {\n            return this.uniforms.map.value;\n          },\n          set: function (value) {\n            this.uniforms.map.value = value;\n          }\n        },\n        useMap: {\n          enumerable: true,\n          get: function () {\n            return this.uniforms.useMap.value;\n          },\n          set: function (value) {\n            this.uniforms.useMap.value = value;\n          }\n        },\n        alphaMap: {\n          enumerable: true,\n          get: function () {\n            return this.uniforms.alphaMap.value;\n          },\n          set: function (value) {\n            this.uniforms.alphaMap.value = value;\n          }\n        },\n        useAlphaMap: {\n          enumerable: true,\n          get: function () {\n            return this.uniforms.useAlphaMap.value;\n          },\n          set: function (value) {\n            this.uniforms.useAlphaMap.value = value;\n          }\n        },\n        color: {\n          enumerable: true,\n          get: function () {\n            return this.uniforms.color.value;\n          },\n          set: function (value) {\n            this.uniforms.color.value = value;\n          }\n        },\n        opacity: {\n          enumerable: true,\n          get: function () {\n            return this.uniforms.opacity.value;\n          },\n          set: function (value) {\n            this.uniforms.opacity.value = value;\n          }\n        },\n        resolution: {\n          enumerable: true,\n          get: function () {\n            return this.uniforms.resolution.value;\n          },\n          set: function (value) {\n            this.uniforms.resolution.value.copy(value);\n          }\n        },\n        sizeAttenuation: {\n          enumerable: true,\n          get: function () {\n            return this.uniforms.sizeAttenuation.value;\n          },\n          set: function (value) {\n            this.uniforms.sizeAttenuation.value = value;\n          }\n        },\n        dashArray: {\n          enumerable: true,\n          get: function () {\n            return this.uniforms.dashArray.value;\n          },\n          set: function (value) {\n            this.uniforms.dashArray.value = value;\n            this.useDash = value !== 0 ? 1 : 0;\n          }\n        },\n        dashOffset: {\n          enumerable: true,\n          get: function () {\n            return this.uniforms.dashOffset.value;\n          },\n          set: function (value) {\n            this.uniforms.dashOffset.value = value;\n          }\n        },\n        dashRatio: {\n          enumerable: true,\n          get: function () {\n            return this.uniforms.dashRatio.value;\n          },\n          set: function (value) {\n            this.uniforms.dashRatio.value = value;\n          }\n        },\n        useDash: {\n          enumerable: true,\n          get: function () {\n            return this.uniforms.useDash.value;\n          },\n          set: function (value) {\n            this.uniforms.useDash.value = value;\n          }\n        },\n        visibility: {\n          enumerable: true,\n          get: function () {\n            return this.uniforms.visibility.value;\n          },\n          set: function (value) {\n            this.uniforms.visibility.value = value;\n          }\n        },\n        alphaTest: {\n          enumerable: true,\n          get: function () {\n            return this.uniforms.alphaTest.value;\n          },\n          set: function (value) {\n            this.uniforms.alphaTest.value = value;\n          }\n        },\n        repeat: {\n          enumerable: true,\n          get: function () {\n            return this.uniforms.repeat.value;\n          },\n          set: function (value) {\n            this.uniforms.repeat.value.copy(value);\n          }\n        }\n      });\n      this.setValues(parameters);\n    }\n  }\n  MeshLineMaterial.prototype.copy = function (source) {\n    THREE.ShaderMaterial.prototype.copy.call(this, source);\n    this.lineWidth = source.lineWidth;\n    this.map = source.map;\n    this.useMap = source.useMap;\n    this.alphaMap = source.alphaMap;\n    this.useAlphaMap = source.useAlphaMap;\n    this.color.copy(source.color);\n    this.opacity = source.opacity;\n    this.resolution.copy(source.resolution);\n    this.sizeAttenuation = source.sizeAttenuation;\n    this.dashArray.copy(source.dashArray);\n    this.dashOffset.copy(source.dashOffset);\n    this.dashRatio.copy(source.dashRatio);\n    this.useDash = source.useDash;\n    this.visibility = source.visibility;\n    this.alphaTest = source.alphaTest;\n    this.repeat.copy(source.repeat);\n    return this;\n  };\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = {\n        MeshLine: MeshLine,\n        MeshLineMaterial: MeshLineMaterial,\n        MeshLineRaycast: MeshLineRaycast\n      };\n    }\n    exports.MeshLine = MeshLine;\n    exports.MeshLineMaterial = MeshLineMaterial;\n    exports.MeshLineRaycast = MeshLineRaycast;\n  } else {\n    root.MeshLine = MeshLine;\n    root.MeshLineMaterial = MeshLineMaterial;\n    root.MeshLineRaycast = MeshLineRaycast;\n  }\n}).call(this);","map":{"version":3,"names":["root","has_require","require","THREE","Error","MeshLine","BufferGeometry","constructor","isMeshLine","type","positions","previous","next","side","width","indices_array","uvs","counters","_points","_geom","widthCallback","matrixWorld","Matrix4","Object","defineProperties","geometry","enumerable","get","geom","set","value","setGeometry","points","setPoints","prototype","setMatrixWorld","g","c","_geometry","getAttribute","array","wcb","Float32Array","Array","console","error","length","Vector3","j","p","push","x","y","z","process","MeshLineRaycast","raycaster","intersects","inverseMatrix","ray","Ray","sphere","Sphere","interRay","boundingSphere","computeBoundingSphere","copy","applyMatrix4","intersectSphere","invert","vStart","vEnd","interSegment","step","LineSegments","index","attributes","indices","position","widths","i","l","a","b","fromArray","Math","floor","undefined","precision","params","Line","threshold","material","lineWidth","precisionSq","distSq","distanceSqToSegment","distance","origin","distanceTo","near","far","point","clone","face","faceIndex","object","raycast","compareV3","aa","ab","copyV3","w","v","n","_attributes","count","BufferAttribute","uv","Uint16Array","copyArray","needsUpdate","setAttribute","setIndex","computeBoundingBox","memcpy","src","srcOffset","dst","dstOffset","subarray","slice","buffer","advance","ShaderChunk","logdepthbuf_pars_vertex","fog_pars_vertex","logdepthbuf_vertex","fog_vertex","join","fog_pars_fragment","logdepthbuf_pars_fragment","logdepthbuf_fragment","fog_fragment","MeshLineMaterial","ShaderMaterial","parameters","uniforms","assign","UniformsLib","fog","map","useMap","alphaMap","useAlphaMap","color","Color","opacity","resolution","Vector2","sizeAttenuation","dashArray","dashOffset","dashRatio","useDash","visibility","alphaTest","repeat","vertexShader","meshline_vert","fragmentShader","meshline_frag","isMeshLineMaterial","setValues","source","call","exports","module"],"sources":["C:/Users/peopl/Documents/Arduino/6d2/SURA/node_modules/three.meshline/src/THREE.MeshLine.js"],"sourcesContent":[";(function() {\r\n  'use strict'\r\n\r\n  var root = this\r\n\r\n  var has_require = typeof require !== 'undefined'\r\n\r\n  var THREE = root.THREE || (has_require && require('three'))\r\n  if (!THREE) throw new Error('MeshLine requires three.js')\r\n\r\n  class MeshLine extends THREE.BufferGeometry {\r\n    constructor()\r\n    {\r\n      super();\r\n      this.isMeshLine = true;\r\n      this.type = 'MeshLine'\r\n\r\n      this.positions = []\r\n\r\n      this.previous = []\r\n      this.next = []\r\n      this.side = []\r\n      this.width = []\r\n      this.indices_array = []\r\n      this.uvs = []\r\n      this.counters = []\r\n      this._points = []\r\n      this._geom = null\r\n\r\n      this.widthCallback = null\r\n\r\n      // Used to raycast\r\n      this.matrixWorld = new THREE.Matrix4()\r\n\r\n      Object.defineProperties(this, {\r\n        // this is now a bufferGeometry\r\n        // add getter to support previous api\r\n        geometry: {\r\n          enumerable: true,\r\n          get: function() {\r\n            return this\r\n          },\r\n        },\r\n        geom: {\r\n          enumerable: true,\r\n          get: function() {\r\n            return this._geom\r\n          },\r\n          set: function(value) {\r\n            this.setGeometry(value, this.widthCallback)\r\n          },\r\n        },\r\n        // for declaritive architectures\r\n        // to return the same value that sets the points\r\n        // eg. this.points = points\r\n        // console.log(this.points) -> points\r\n        points: {\r\n          enumerable: true,\r\n          get: function() {\r\n            return this._points\r\n          },\r\n          set: function(value) {\r\n            this.setPoints(value, this.widthCallback)\r\n          },\r\n        },\r\n      })\r\n    }\r\n  }\r\n\r\n  MeshLine.prototype.setMatrixWorld = function(matrixWorld) {\r\n    this.matrixWorld = matrixWorld\r\n  }\r\n\r\n  // setting via a geometry is rather superfluous\r\n  // as you're creating a unecessary geometry just to throw away\r\n  // but exists to support previous api\r\n  MeshLine.prototype.setGeometry = function(g, c) {\r\n\t\t// as the input geometry are mutated we store them\r\n\t\t// for later retreival when necessary (declaritive architectures)\r\n\t\tthis._geometry = g;\r\n        this.setPoints(g.getAttribute(\"position\").array, c);\r\n  }\r\n\r\n  MeshLine.prototype.setPoints = function(points, wcb) {\r\n\t\tif (!(points instanceof Float32Array) && !(points instanceof Array)) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t\"ERROR: The BufferArray of points is not instancied correctly.\"\r\n\t\t\t);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// as the points are mutated we store them\r\n\t\t// for later retreival when necessary (declaritive architectures)\r\n\t\tthis._points = points;\r\n\t\tthis.widthCallback = wcb;\r\n\t\tthis.positions = [];\r\n\t\tthis.counters = [];\r\n\t\tif (points.length && points[0] instanceof THREE.Vector3) {\r\n\t\t\t// could transform Vector3 array into the array used below\r\n\t\t\t// but this approach will only loop through the array once\r\n\t\t\t// and is more performant\r\n\t\t\tfor (var j = 0; j < points.length; j++) {\r\n\t\t\t\tvar p = points[j];\r\n\t\t\t\tvar c = j / points.length;\r\n\t\t\t\tthis.positions.push(p.x, p.y, p.z);\r\n\t\t\t\tthis.positions.push(p.x, p.y, p.z);\r\n\t\t\t\tthis.counters.push(c);\r\n\t\t\t\tthis.counters.push(c);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (var j = 0; j < points.length; j += 3) {\r\n\t\t\t\tvar c = j / points.length;\r\n\t\t\t\tthis.positions.push(points[j], points[j + 1], points[j + 2]);\r\n\t\t\t\tthis.positions.push(points[j], points[j + 1], points[j + 2]);\r\n\t\t\t\tthis.counters.push(c);\r\n\t\t\t\tthis.counters.push(c);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.process();\r\n  }\r\n\r\n  function MeshLineRaycast(raycaster, intersects) {\r\n    var inverseMatrix = new THREE.Matrix4()\r\n    var ray = new THREE.Ray()\r\n    var sphere = new THREE.Sphere()\r\n    var interRay = new THREE.Vector3()\r\n    var geometry = this.geometry\r\n    // Checking boundingSphere distance to ray\r\n\r\n    if (!geometry.boundingSphere) geometry.computeBoundingSphere()\r\n    sphere.copy(geometry.boundingSphere)\r\n    sphere.applyMatrix4(this.matrixWorld)\r\n\r\n    if (raycaster.ray.intersectSphere(sphere, interRay) === false) {\r\n      return\r\n    }\r\n\r\n    inverseMatrix.copy( this.matrixWorld ).invert();\r\n    ray.copy(raycaster.ray).applyMatrix4(inverseMatrix)\r\n\r\n    var vStart = new THREE.Vector3()\r\n    var vEnd = new THREE.Vector3()\r\n    var interSegment = new THREE.Vector3()\r\n    var step = this instanceof THREE.LineSegments ? 2 : 1\r\n    var index = geometry.index\r\n    var attributes = geometry.attributes\r\n\r\n    if (index !== null) {\r\n      var indices = index.array\r\n      var positions = attributes.position.array\r\n      var widths = attributes.width.array\r\n\r\n      for (var i = 0, l = indices.length - 1; i < l; i += step) {\r\n        var a = indices[i]\r\n        var b = indices[i + 1]\r\n\r\n        vStart.fromArray(positions, a * 3)\r\n        vEnd.fromArray(positions, b * 3)\r\n        var width = widths[Math.floor(i / 3)] !== undefined ? widths[Math.floor(i / 3)] : 1\r\n        var precision = raycaster.params.Line.threshold + (this.material.lineWidth * width) / 2\r\n        var precisionSq = precision * precision\r\n\r\n        var distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment)\r\n\r\n        if (distSq > precisionSq) continue\r\n\r\n        interRay.applyMatrix4(this.matrixWorld) //Move back to world space for distance calculation\r\n\r\n        var distance = raycaster.ray.origin.distanceTo(interRay)\r\n\r\n        if (distance < raycaster.near || distance > raycaster.far) continue\r\n\r\n        intersects.push({\r\n          distance: distance,\r\n          // What do we want? intersection point on the ray or on the segment??\r\n          // point: raycaster.ray.at( distance ),\r\n          point: interSegment.clone().applyMatrix4(this.matrixWorld),\r\n          index: i,\r\n          face: null,\r\n          faceIndex: null,\r\n          object: this,\r\n        })\r\n        // make event only fire once\r\n        i = l\r\n      }\r\n    }\r\n  }\r\n  MeshLine.prototype.raycast = MeshLineRaycast\r\n  MeshLine.prototype.compareV3 = function(a, b) {\r\n    var aa = a * 6\r\n    var ab = b * 6\r\n    return (\r\n      this.positions[aa] === this.positions[ab] &&\r\n      this.positions[aa + 1] === this.positions[ab + 1] &&\r\n      this.positions[aa + 2] === this.positions[ab + 2]\r\n    )\r\n  }\r\n\r\n  MeshLine.prototype.copyV3 = function(a) {\r\n    var aa = a * 6\r\n    return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]]\r\n  }\r\n\r\n  MeshLine.prototype.process = function() {\r\n    var l = this.positions.length / 6\r\n\r\n    this.previous = []\r\n    this.next = []\r\n    this.side = []\r\n    this.width = []\r\n    this.indices_array = []\r\n    this.uvs = []\r\n\r\n    var w\r\n\r\n    var v\r\n    // initial previous points\r\n    if (this.compareV3(0, l - 1)) {\r\n      v = this.copyV3(l - 2)\r\n    } else {\r\n      v = this.copyV3(0)\r\n    }\r\n    this.previous.push(v[0], v[1], v[2])\r\n    this.previous.push(v[0], v[1], v[2])\r\n\r\n    for (var j = 0; j < l; j++) {\r\n      // sides\r\n      this.side.push(1)\r\n      this.side.push(-1)\r\n\r\n      // widths\r\n      if (this.widthCallback) w = this.widthCallback(j / (l - 1))\r\n      else w = 1\r\n      this.width.push(w)\r\n      this.width.push(w)\r\n\r\n      // uvs\r\n      this.uvs.push(j / (l - 1), 0)\r\n      this.uvs.push(j / (l - 1), 1)\r\n\r\n      if (j < l - 1) {\r\n        // points previous to poisitions\r\n        v = this.copyV3(j)\r\n        this.previous.push(v[0], v[1], v[2])\r\n        this.previous.push(v[0], v[1], v[2])\r\n\r\n        // indices\r\n        var n = j * 2\r\n        this.indices_array.push(n, n + 1, n + 2)\r\n        this.indices_array.push(n + 2, n + 1, n + 3)\r\n      }\r\n      if (j > 0) {\r\n        // points after poisitions\r\n        v = this.copyV3(j)\r\n        this.next.push(v[0], v[1], v[2])\r\n        this.next.push(v[0], v[1], v[2])\r\n      }\r\n    }\r\n\r\n    // last next point\r\n    if (this.compareV3(l - 1, 0)) {\r\n      v = this.copyV3(1)\r\n    } else {\r\n      v = this.copyV3(l - 1)\r\n    }\r\n    this.next.push(v[0], v[1], v[2])\r\n    this.next.push(v[0], v[1], v[2])\r\n\r\n    // redefining the attribute seems to prevent range errors\r\n    // if the user sets a differing number of vertices\r\n    if (!this._attributes || this._attributes.position.count !== this.positions.length) {\r\n      this._attributes = {\r\n        position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\r\n        previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\r\n        next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\r\n        side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\r\n        width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\r\n        uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\r\n        index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\r\n        counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1),\r\n      }\r\n    } else {\r\n      this._attributes.position.copyArray(new Float32Array(this.positions))\r\n      this._attributes.position.needsUpdate = true\r\n      this._attributes.previous.copyArray(new Float32Array(this.previous))\r\n      this._attributes.previous.needsUpdate = true\r\n      this._attributes.next.copyArray(new Float32Array(this.next))\r\n      this._attributes.next.needsUpdate = true\r\n      this._attributes.side.copyArray(new Float32Array(this.side))\r\n      this._attributes.side.needsUpdate = true\r\n      this._attributes.width.copyArray(new Float32Array(this.width))\r\n      this._attributes.width.needsUpdate = true\r\n      this._attributes.uv.copyArray(new Float32Array(this.uvs))\r\n      this._attributes.uv.needsUpdate = true\r\n      this._attributes.index.copyArray(new Uint16Array(this.indices_array))\r\n      this._attributes.index.needsUpdate = true\r\n    }\r\n\r\n    this.setAttribute('position', this._attributes.position)\r\n    this.setAttribute('previous', this._attributes.previous)\r\n    this.setAttribute('next', this._attributes.next)\r\n    this.setAttribute('side', this._attributes.side)\r\n    this.setAttribute('width', this._attributes.width)\r\n    this.setAttribute('uv', this._attributes.uv)\r\n    this.setAttribute('counters', this._attributes.counters)\r\n\r\n    this.setIndex(this._attributes.index)\r\n\r\n    this.computeBoundingSphere()\r\n    this.computeBoundingBox()\r\n  }\r\n\r\n  function memcpy(src, srcOffset, dst, dstOffset, length) {\r\n    var i\r\n\r\n    src = src.subarray || src.slice ? src : src.buffer\r\n    dst = dst.subarray || dst.slice ? dst : dst.buffer\r\n\r\n    src = srcOffset\r\n      ? src.subarray\r\n        ? src.subarray(srcOffset, length && srcOffset + length)\r\n        : src.slice(srcOffset, length && srcOffset + length)\r\n      : src\r\n\r\n    if (dst.set) {\r\n      dst.set(src, dstOffset)\r\n    } else {\r\n      for (i = 0; i < src.length; i++) {\r\n        dst[i + dstOffset] = src[i]\r\n      }\r\n    }\r\n\r\n    return dst\r\n  }\r\n\r\n  /**\r\n   * Fast method to advance the line by one position.  The oldest position is removed.\r\n   * @param position\r\n   */\r\n  MeshLine.prototype.advance = function(position) {\r\n    var positions = this._attributes.position.array\r\n    var previous = this._attributes.previous.array\r\n    var next = this._attributes.next.array\r\n    var l = positions.length\r\n\r\n    // PREVIOUS\r\n    memcpy(positions, 0, previous, 0, l)\r\n\r\n    // POSITIONS\r\n    memcpy(positions, 6, positions, 0, l - 6)\r\n\r\n    positions[l - 6] = position.x\r\n    positions[l - 5] = position.y\r\n    positions[l - 4] = position.z\r\n    positions[l - 3] = position.x\r\n    positions[l - 2] = position.y\r\n    positions[l - 1] = position.z\r\n\r\n    // NEXT\r\n    memcpy(positions, 6, next, 0, l - 6)\r\n\r\n    next[l - 6] = position.x\r\n    next[l - 5] = position.y\r\n    next[l - 4] = position.z\r\n    next[l - 3] = position.x\r\n    next[l - 2] = position.y\r\n    next[l - 1] = position.z\r\n\r\n    this._attributes.position.needsUpdate = true\r\n    this._attributes.previous.needsUpdate = true\r\n    this._attributes.next.needsUpdate = true\r\n  }\r\n\r\n  THREE.ShaderChunk['meshline_vert'] = [\r\n    '',\r\n    THREE.ShaderChunk.logdepthbuf_pars_vertex,\r\n    THREE.ShaderChunk.fog_pars_vertex,\r\n    '',\r\n    'attribute vec3 previous;',\r\n    'attribute vec3 next;',\r\n    'attribute float side;',\r\n    'attribute float width;',\r\n    'attribute float counters;',\r\n    '',\r\n    'uniform vec2 resolution;',\r\n    'uniform float lineWidth;',\r\n    'uniform vec3 color;',\r\n    'uniform float opacity;',\r\n    'uniform float sizeAttenuation;',\r\n    '',\r\n    'varying vec2 vUV;',\r\n    'varying vec4 vColor;',\r\n    'varying float vCounters;',\r\n    '',\r\n    'vec2 fix( vec4 i, float aspect ) {',\r\n    '',\r\n    '    vec2 res = i.xy / i.w;',\r\n    '    res.x *= aspect;',\r\n    '\t vCounters = counters;',\r\n    '    return res;',\r\n    '',\r\n    '}',\r\n    '',\r\n    'void main() {',\r\n    '',\r\n    '    float aspect = resolution.x / resolution.y;',\r\n    '',\r\n    '    vColor = vec4( color, opacity );',\r\n    '    vUV = uv;',\r\n    '',\r\n    '    mat4 m = projectionMatrix * modelViewMatrix;',\r\n    '    vec4 finalPosition = m * vec4( position, 1.0 );',\r\n    '    vec4 prevPos = m * vec4( previous, 1.0 );',\r\n    '    vec4 nextPos = m * vec4( next, 1.0 );',\r\n    '',\r\n    '    vec2 currentP = fix( finalPosition, aspect );',\r\n    '    vec2 prevP = fix( prevPos, aspect );',\r\n    '    vec2 nextP = fix( nextPos, aspect );',\r\n    '',\r\n    '    float w = lineWidth * width;',\r\n    '',\r\n    '    vec2 dir;',\r\n    '    if( nextP == currentP ) dir = normalize( currentP - prevP );',\r\n    '    else if( prevP == currentP ) dir = normalize( nextP - currentP );',\r\n    '    else {',\r\n    '        vec2 dir1 = normalize( currentP - prevP );',\r\n    '        vec2 dir2 = normalize( nextP - currentP );',\r\n    '        dir = normalize( dir1 + dir2 );',\r\n    '',\r\n    '        vec2 perp = vec2( -dir1.y, dir1.x );',\r\n    '        vec2 miter = vec2( -dir.y, dir.x );',\r\n    '        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );',\r\n    '',\r\n    '    }',\r\n    '',\r\n    '    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;',\r\n    '    vec4 normal = vec4( -dir.y, dir.x, 0., 1. );',\r\n    '    normal.xy *= .5 * w;',\r\n    '    normal *= projectionMatrix;',\r\n    '    if( sizeAttenuation == 0. ) {',\r\n    '        normal.xy *= finalPosition.w;',\r\n    '        normal.xy /= ( vec4( resolution, 0., 1. ) * projectionMatrix ).xy;',\r\n    '    }',\r\n    '',\r\n    '    finalPosition.xy += normal.xy * side;',\r\n    '',\r\n    '    gl_Position = finalPosition;',\r\n    '',\r\n    THREE.ShaderChunk.logdepthbuf_vertex,\r\n    THREE.ShaderChunk.fog_vertex && '    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\r\n    THREE.ShaderChunk.fog_vertex,\r\n    '}',\r\n  ].join('\\n')\r\n\r\n  THREE.ShaderChunk['meshline_frag'] = [\r\n    '',\r\n    THREE.ShaderChunk.fog_pars_fragment,\r\n    THREE.ShaderChunk.logdepthbuf_pars_fragment,\r\n    '',\r\n    'uniform sampler2D map;',\r\n    'uniform sampler2D alphaMap;',\r\n    'uniform float useMap;',\r\n    'uniform float useAlphaMap;',\r\n    'uniform float useDash;',\r\n    'uniform float dashArray;',\r\n    'uniform float dashOffset;',\r\n    'uniform float dashRatio;',\r\n    'uniform float visibility;',\r\n    'uniform float alphaTest;',\r\n    'uniform vec2 repeat;',\r\n    '',\r\n    'varying vec2 vUV;',\r\n    'varying vec4 vColor;',\r\n    'varying float vCounters;',\r\n    '',\r\n    'void main() {',\r\n    '',\r\n    THREE.ShaderChunk.logdepthbuf_fragment,\r\n    '',\r\n    '    vec4 c = vColor;',\r\n    '    if( useMap == 1. ) c *= texture2D( map, vUV * repeat );',\r\n    '    if( useAlphaMap == 1. ) c.a *= texture2D( alphaMap, vUV * repeat ).a;',\r\n    '    if( c.a < alphaTest ) discard;',\r\n    '    if( useDash == 1. ){',\r\n    '        c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));',\r\n    '    }',\r\n    '    gl_FragColor = c;',\r\n    '    gl_FragColor.a *= step(vCounters, visibility);',\r\n    '',\r\n    THREE.ShaderChunk.fog_fragment,\r\n    '}',\r\n  ].join('\\n')\r\n\r\n  class MeshLineMaterial extends THREE.ShaderMaterial {\r\n    constructor(parameters)\r\n    {\r\n      super({\r\n        uniforms: Object.assign({}, THREE.UniformsLib.fog, {\r\n          lineWidth: { value: 1 },\r\n          map: { value: null },\r\n          useMap: { value: 0 },\r\n          alphaMap: { value: null },\r\n          useAlphaMap: { value: 0 },\r\n          color: { value: new THREE.Color(0xffffff) },\r\n          opacity: { value: 1 },\r\n          resolution: { value: new THREE.Vector2(1, 1) },\r\n          sizeAttenuation: { value: 1 },\r\n          dashArray: { value: 0 },\r\n          dashOffset: { value: 0 },\r\n          dashRatio: { value: 0.5 },\r\n          useDash: { value: 0 },\r\n          visibility: { value: 1 },\r\n          alphaTest: { value: 0 },\r\n          repeat: { value: new THREE.Vector2(1, 1) },\r\n        }),\r\n\r\n        vertexShader: THREE.ShaderChunk.meshline_vert,\r\n\r\n        fragmentShader: THREE.ShaderChunk.meshline_frag,\r\n      });\r\n      this.isMeshLineMaterial = true\r\n      this.type = 'MeshLineMaterial'\r\n\r\n      Object.defineProperties(this, {\r\n        lineWidth: {\r\n          enumerable: true,\r\n          get: function() {\r\n            return this.uniforms.lineWidth.value\r\n          },\r\n          set: function(value) {\r\n            this.uniforms.lineWidth.value = value\r\n          },\r\n        },\r\n        map: {\r\n          enumerable: true,\r\n          get: function() {\r\n            return this.uniforms.map.value\r\n          },\r\n          set: function(value) {\r\n            this.uniforms.map.value = value\r\n          },\r\n        },\r\n        useMap: {\r\n          enumerable: true,\r\n          get: function() {\r\n            return this.uniforms.useMap.value\r\n          },\r\n          set: function(value) {\r\n            this.uniforms.useMap.value = value\r\n          },\r\n        },\r\n        alphaMap: {\r\n          enumerable: true,\r\n          get: function() {\r\n            return this.uniforms.alphaMap.value\r\n          },\r\n          set: function(value) {\r\n            this.uniforms.alphaMap.value = value\r\n          },\r\n        },\r\n        useAlphaMap: {\r\n          enumerable: true,\r\n          get: function() {\r\n            return this.uniforms.useAlphaMap.value\r\n          },\r\n          set: function(value) {\r\n            this.uniforms.useAlphaMap.value = value\r\n          },\r\n        },\r\n        color: {\r\n          enumerable: true,\r\n          get: function() {\r\n            return this.uniforms.color.value\r\n          },\r\n          set: function(value) {\r\n            this.uniforms.color.value = value\r\n          },\r\n        },\r\n        opacity: {\r\n          enumerable: true,\r\n          get: function() {\r\n            return this.uniforms.opacity.value\r\n          },\r\n          set: function(value) {\r\n            this.uniforms.opacity.value = value\r\n          },\r\n        },\r\n        resolution: {\r\n          enumerable: true,\r\n          get: function() {\r\n            return this.uniforms.resolution.value\r\n          },\r\n          set: function(value) {\r\n            this.uniforms.resolution.value.copy(value)\r\n          },\r\n        },\r\n        sizeAttenuation: {\r\n          enumerable: true,\r\n          get: function() {\r\n            return this.uniforms.sizeAttenuation.value\r\n          },\r\n          set: function(value) {\r\n            this.uniforms.sizeAttenuation.value = value\r\n          },\r\n        },\r\n        dashArray: {\r\n          enumerable: true,\r\n          get: function() {\r\n            return this.uniforms.dashArray.value\r\n          },\r\n          set: function(value) {\r\n            this.uniforms.dashArray.value = value\r\n            this.useDash = value !== 0 ? 1 : 0\r\n          },\r\n        },\r\n        dashOffset: {\r\n          enumerable: true,\r\n          get: function() {\r\n            return this.uniforms.dashOffset.value\r\n          },\r\n          set: function(value) {\r\n            this.uniforms.dashOffset.value = value\r\n          },\r\n        },\r\n        dashRatio: {\r\n          enumerable: true,\r\n          get: function() {\r\n            return this.uniforms.dashRatio.value\r\n          },\r\n          set: function(value) {\r\n            this.uniforms.dashRatio.value = value\r\n          },\r\n        },\r\n        useDash: {\r\n          enumerable: true,\r\n          get: function() {\r\n            return this.uniforms.useDash.value\r\n          },\r\n          set: function(value) {\r\n            this.uniforms.useDash.value = value\r\n          },\r\n        },\r\n        visibility: {\r\n          enumerable: true,\r\n          get: function() {\r\n            return this.uniforms.visibility.value\r\n          },\r\n          set: function(value) {\r\n            this.uniforms.visibility.value = value\r\n          },\r\n        },\r\n        alphaTest: {\r\n          enumerable: true,\r\n          get: function() {\r\n            return this.uniforms.alphaTest.value\r\n          },\r\n          set: function(value) {\r\n            this.uniforms.alphaTest.value = value\r\n          },\r\n        },\r\n        repeat: {\r\n          enumerable: true,\r\n          get: function() {\r\n            return this.uniforms.repeat.value\r\n          },\r\n          set: function(value) {\r\n            this.uniforms.repeat.value.copy(value)\r\n          },\r\n        },\r\n      })\r\n\r\n      this.setValues(parameters)\r\n    }\r\n  }\r\n\r\n  MeshLineMaterial.prototype.copy = function(source) {\r\n    THREE.ShaderMaterial.prototype.copy.call(this, source)\r\n\r\n    this.lineWidth = source.lineWidth\r\n    this.map = source.map\r\n    this.useMap = source.useMap\r\n    this.alphaMap = source.alphaMap\r\n    this.useAlphaMap = source.useAlphaMap\r\n    this.color.copy(source.color)\r\n    this.opacity = source.opacity\r\n    this.resolution.copy(source.resolution)\r\n    this.sizeAttenuation = source.sizeAttenuation\r\n    this.dashArray.copy(source.dashArray)\r\n    this.dashOffset.copy(source.dashOffset)\r\n    this.dashRatio.copy(source.dashRatio)\r\n    this.useDash = source.useDash\r\n    this.visibility = source.visibility\r\n    this.alphaTest = source.alphaTest\r\n    this.repeat.copy(source.repeat)\r\n\r\n    return this\r\n  }\r\n\r\n  if (typeof exports !== 'undefined') {\r\n    if (typeof module !== 'undefined' && module.exports) {\r\n      exports = module.exports = {\r\n        MeshLine: MeshLine,\r\n        MeshLineMaterial: MeshLineMaterial,\r\n        MeshLineRaycast: MeshLineRaycast,\r\n      }\r\n    }\r\n    exports.MeshLine = MeshLine\r\n    exports.MeshLineMaterial = MeshLineMaterial\r\n    exports.MeshLineRaycast = MeshLineRaycast\r\n  } else {\r\n    root.MeshLine = MeshLine\r\n    root.MeshLineMaterial = MeshLineMaterial\r\n    root.MeshLineRaycast = MeshLineRaycast\r\n  }\r\n}.call(this))\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}