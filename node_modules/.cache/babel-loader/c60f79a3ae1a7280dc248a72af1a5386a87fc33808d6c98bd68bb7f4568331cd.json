{"ast":null,"code":"import * as THREE from 'three';\nimport InfiniteGridHelper from \"./InfiniteGridHelper.js\";\nimport { renderer, camera, scene } from '../App.vue';\nexport default {\n  name: 'GridBackground',\n  props: {\n    cameraPosition: {\n      type: Object,\n      required: true\n    },\n    cameraAngle: {\n      type: Object,\n      required: true\n    }\n  },\n  mounted() {\n    // Create a renderer\n    renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    document.body.appendChild(renderer.domElement);\n\n    // Create a camera\n\n    //camera = camera;\n    camera.rotation.order = \"XYZ\";\n    camera.position.set(this.cameraPosition.x, this.cameraPosition.y, this.cameraPosition.z);\n    camera.rotation.set(new THREE.Euler(this.cameraAngle.x, this.cameraAngle.y, this.cameraAngle.z));\n    renderer.setClearColor(new THREE.Color(0xFFFFFF));\n    const grid = InfiniteGridHelper();\n    scene.add(grid);\n\n    //let rotationSpeed = 0.01; // Initial rotation speed\n    const self = this;\n    function animate() {\n      requestAnimationFrame(animate);\n\n      // Rotate the cube\n\n      camera.position.copy(self.cameraPosition);\n      camera.rotation.set(self.cameraAngle.x, self.cameraAngle.y, self.cameraAngle.z);\n      plane.rotation.set(self.cameraAngle.x, self.cameraAngle.y, self.cameraAngle.z);\n      plane.posi;\n\n      // Render the scene with the camera\n      renderer.render(scene, camera);\n    }\n    this.windowResizeHandler();\n    animate();\n    window.addEventListener('resize', this.windowResizeHandler);\n  },\n  beforeUnmount() {\n    window.removeEventListener('resize', this.windowResizeHandler);\n  },\n  methods: {\n    windowResizeHandler() {\n      const width = this.$el.clientWidth;\n      const height = this.$el.clientHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    }\n  }\n};","map":{"version":3,"names":["THREE","InfiniteGridHelper","renderer","camera","scene","name","props","cameraPosition","type","Object","required","cameraAngle","mounted","setSize","$el","clientWidth","clientHeight","setPixelRatio","window","devicePixelRatio","document","body","appendChild","domElement","rotation","order","position","set","x","y","z","Euler","setClearColor","Color","grid","add","self","animate","requestAnimationFrame","copy","plane","posi","render","windowResizeHandler","addEventListener","beforeUnmount","removeEventListener","methods","width","height","aspect","updateProjectionMatrix"],"sources":["/Users/olliearrison/Desktop/SURA/src/components/GridBackground.vue"],"sourcesContent":["<template>\n    <div class=\"grid\"> </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\nimport InfiniteGridHelper from \"./InfiniteGridHelper.js\";\nimport { renderer, camera, scene } from '../App.vue';\n\n\nexport default {\n  name: 'GridBackground',\n  props: {\n    cameraPosition: {\n      type: Object,\n      required: true\n    },\n    cameraAngle: {\n      type: Object,\n      required: true\n    }\n  },\n  mounted(){\n\n    // Create a renderer\n    renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    document.body.appendChild(renderer.domElement);\n\n    // Create a camera\n    \n    //camera = camera;\n    camera.rotation.order = \"XYZ\";\n    camera.position.set(this.cameraPosition.x, this.cameraPosition.y, this.cameraPosition.z);\n    camera.rotation.set(new THREE.Euler(this.cameraAngle.x, this.cameraAngle.y, this.cameraAngle.z));\n\n\n    renderer.setClearColor(new THREE.Color(0xFFFFFF));\n\n\n    const grid = InfiniteGridHelper();\n\n    scene.add(grid);\n\n    //let rotationSpeed = 0.01; // Initial rotation speed\n    const self = this;\n    function animate() {\n        requestAnimationFrame(animate);\n\n        // Rotate the cube\n\n        camera.position.copy(self.cameraPosition);\n        camera.rotation.set(self.cameraAngle.x, self.cameraAngle.y, self.cameraAngle.z);\n        plane.rotation.set(self.cameraAngle.x, self.cameraAngle.y, self.cameraAngle.z);\n        plane.posi\n\n        // Render the scene with the camera\n        renderer.render(scene, camera);\n        \n    }\n    this.windowResizeHandler();\n    animate();\n    window.addEventListener('resize', this.windowResizeHandler);\n  }, \n  beforeUnmount() {\n    window.removeEventListener('resize', this.windowResizeHandler);\n},\n  methods: {\n    windowResizeHandler() {\n        const width = this.$el.clientWidth;\n        const height = this.$el.clientHeight;\n\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n        renderer.setSize(width, height);\n    }\n  }\n}\n</script>\n\n<style>\n\n.grid {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}