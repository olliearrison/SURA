{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"arcballContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UserInput = _resolveComponent(\"UserInput\");\n  const _component_DrawingInput = _resolveComponent(\"DrawingInput\");\n  const _component_GridBackground = _resolveComponent(\"GridBackground\");\n  const _component_Arcball = _resolveComponent(\"Arcball\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_UserInput), _createVNode(_component_DrawingInput), _createVNode(_component_GridBackground, {\n    \"camera-position\": $data.camera.position,\n    \"camera-angle\": $data.camera.angle\n  }, null, 8 /* PROPS */, [\"camera-position\", \"camera-angle\"]), _createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_Arcball, {\n    ref: \"arcball\",\n    \"camera-position\": $data.camera.position,\n    \"camera-angle\": $data.camera.angle,\n    onCameraUpdated: $options.updateCamera\n  }, null, 8 /* PROPS */, [\"camera-position\", \"camera-angle\", \"onCameraUpdated\"])])]);\n}","map":{"version":3,"names":["id","_createElementBlock","_createVNode","_component_UserInput","_component_DrawingInput","_component_GridBackground","$data","camera","position","angle","_createElementVNode","_hoisted_1","_component_Arcball","ref","onCameraUpdated","$options","updateCamera"],"sources":["C:\\Users\\peopl\\Documents\\Arduino\\6d2\\SURA\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <UserInput/>\r\n    <DrawingInput/>\r\n    <GridBackground :camera-position=\"camera.position\" :camera-angle=\"camera.angle\"/>\r\n    <div id = \"arcballContainer\">\r\n      <Arcball ref=\"arcball\" \r\n        :camera-position=\"camera.position\"\r\n        :camera-angle=\"camera.angle\"\r\n        @camera-updated=\"updateCamera\"/>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n\r\n<script>\r\n//import LayerViewer from './components/LayerViewer.vue';\r\nimport UserInput from './components/UserInput.vue';\r\nimport DrawingInput from './components/DrawingInput.vue';\r\nimport GridBackground from './components/GridBackground.vue';\r\nimport Arcball from './components/ArcballControl.vue';\r\nimport * as THREE from 'three';\r\n\r\nexport let camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\nexport let renderer = new THREE.WebGLRenderer();\r\nexport let scene = new THREE.Scene();\r\nexport let arcRenderer = new THREE.WebGLRenderer({alpha: true, antialias: true});\r\nexport let drawRenderer = new THREE.WebGLRenderer({alpha: true, antialias: true});\r\n\r\n\r\nconst planeGeometry = new THREE.PlaneGeometry( 4, 4 );\r\n    const planeMaterial = new THREE.MeshBasicMaterial( {\r\n      color: 0x745DD9, \r\n      side: THREE.DoubleSide,\r\n      opacity: 0.25,\r\n      transparent: true,\r\n    } );\r\nconst plane = new THREE.Mesh( planeGeometry, planeMaterial );\r\n\r\nconst sphereGeometry = new THREE.SphereGeometry( 15, 32, 16 ); \r\nconst sphereMaterial = new THREE.MeshBasicMaterial( { color: 0xffff00 } ); \r\nconst sphere = new THREE.Mesh( sphereGeometry, sphereMaterial );\r\n\r\n//export let canvasIndex = 0;\r\nexport let canvas = [plane, sphere];\r\n\r\nexport let drawSceneList = [new THREE.Scene()];\r\n//drawSceneList[0].add(plane);\r\n\r\n\r\n//import Vuetify from 'vuetify';\r\nimport 'vuetify/dist/vuetify.min.css';\r\n\r\nexport default {\r\n  name: 'App',\r\n  components: {\r\n    UserInput,\r\n    DrawingInput,\r\n    Arcball,\r\n    GridBackground\r\n  },\r\n  data (){\r\n    return {\r\n      camera: {\r\n        position: { x: 0, y: 0, z: 5 },\r\n        angle: { x: 0, y: 0, z: 0 }\r\n      },\r\n    };\r\n  },\r\n  mounted (){\r\n    plane.rotateX(Math.PI/2);\r\n\r\n  },\r\n  methods: {\r\n    updateCamera({ position, angle }) {\r\n      // Update the camera position and angle based on the emitted data\r\n      this.camera.position = position;\r\n      this.camera.angle = angle;\r\n    },\r\n    logCameraPosition() {\r\n      console.log('Logging camera position');\r\n    },\r\n  },\r\n  /*\r\n  mounted() {\r\n  this.$nextTick(() => {\r\n    this.camera = this.$refs.arcball.camera;\r\n    console.log(\"Mounted camera: \", this.camera);\r\n  });\r\n  */\r\n\r\n}\r\n\r\n</script>\r\n\r\n<style>\r\nbody {\r\n  margin: 0;\r\n  overflow: hidden; /* Disable scroll */\r\n}\r\n\r\n#app {\r\n  margin: 0;\r\n  padding: 0;\r\n  position: absolute;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  overflow: hidden; /* Disable scroll */\r\n}\r\n\r\n.drawing-input {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n}\r\n\r\n#arcballContainer {\r\n  height: calc(100vh - 1em); /* Adjust the height as needed */\r\n}\r\n\r\n</style>"],"mappings":";;EAKSA,EAAE,EAAG;AAAkB;;;;;;uBAJ9BC,mBAAA,CAUM,cATJC,YAAA,CAAYC,oBAAA,GACZD,YAAA,CAAeE,uBAAA,GACfF,YAAA,CAAiFG,yBAAA;IAAhE,iBAAe,EAAEC,KAAA,CAAAC,MAAM,CAACC,QAAQ;IAAG,cAAY,EAAEF,KAAA,CAAAC,MAAM,CAACE;gEACzEC,mBAAA,CAKM,OALNC,UAKM,GAJJT,YAAA,CAGkCU,kBAAA;IAHzBC,GAAG,EAAC,SAAS;IACnB,iBAAe,EAAEP,KAAA,CAAAC,MAAM,CAACC,QAAQ;IAChC,cAAY,EAAEF,KAAA,CAAAC,MAAM,CAACE,KAAK;IAC1BK,eAAc,EAAEC,QAAA,CAAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}