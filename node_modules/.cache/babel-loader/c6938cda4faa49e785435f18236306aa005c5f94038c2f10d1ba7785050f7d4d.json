{"ast":null,"code":"import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-352fa47c\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"drawing-input\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_icon = _resolveComponent(\"v-icon\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_v_col = _resolveComponent(\"v-col\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  const _component_v_spacer = _resolveComponent(\"v-spacer\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_v_btn, {\n    class: \"fixed-button\",\n    ref: \"eraserButton\",\n    onClick: $options.toggleEraserMode,\n    large: \"\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_icon, null, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString($data.stroke.eraser ? 'mdi-eraser' : 'mdi-brush-outline'), 1 /* TEXT */)]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_v_container, {\n    \"fill-height\": \"\",\n    fluid: \"\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_row, {\n      class: \"fill-height\",\n      align: \"center\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_col, {\n        cols: \"4\",\n        sm: \"2\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_v_card, {\n          class: \"pa-2\",\n          outlined: \"\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_v_btn, {\n            block: \"\",\n            color: \"indigo\",\n            class: \"white--text my-2\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"Button 1\")]),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_v_btn, {\n            block: \"\",\n            color: \"indigo\",\n            class: \"white--text my-2\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"Button 2\")]),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_v_btn, {\n            block: \"\",\n            color: \"indigo\",\n            class: \"white--text my-2\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"Button 3\")]),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_v_btn, {\n            block: \"\",\n            color: \"indigo\",\n            class: \"white--text my-2\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"Button 4\")]),\n            _: 1 /* STABLE */\n          })]),\n\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_row, {\n    class: \"bottom-buttons\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_btn, {\n      onClick: $options.backward,\n      large: \"\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_icon, null, {\n        default: _withCtx(() => [_createTextVNode(\" mdi-arrow-left \")]),\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_v_spacer), _createVNode(_component_v_btn, {\n      onClick: $options.forward,\n      large: \"\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_icon, null, {\n        default: _withCtx(() => [_createTextVNode(\" mdi-arrow-right \")]),\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_v_spacer), _createVNode(_component_v_btn, {\n      onClick: $options.play,\n      large: \"\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_icon, null, {\n        default: _withCtx(() => [_createTextVNode(\" mdi-play \")]),\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\"])]),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_v_btn","ref","onClick","$options","toggleEraserMode","large","_component_v_icon","$data","stroke","eraser","_component_v_container","fluid","_component_v_row","align","_component_v_col","cols","sm","_component_v_card","outlined","block","color","backward","_component_v_spacer","forward","play"],"sources":["/Users/olliearrison/Desktop/SURA/src/components/DrawingInput.vue"],"sourcesContent":["<template>\n    <div class=\"drawing-input\">\n        <v-btn class=\"fixed-button\" ref=\"eraserButton\" @click=\"toggleEraserMode\" large>\n            <v-icon>\n            {{ stroke.eraser ? 'mdi-eraser' : 'mdi-brush-outline' }}\n            </v-icon>\n        </v-btn>\n\n        <v-container fill-height fluid>\n      <v-row class=\"fill-height\" align=\"center\">\n        <v-col cols=\"4\" sm=\"2\">\n          <v-card class=\"pa-2\" outlined>\n            <v-btn block color=\"indigo\" class=\"white--text my-2\">Button 1</v-btn>\n            <v-btn block color=\"indigo\" class=\"white--text my-2\">Button 2</v-btn>\n            <v-btn block color=\"indigo\" class=\"white--text my-2\">Button 3</v-btn>\n            <v-btn block color=\"indigo\" class=\"white--text my-2\">Button 4</v-btn>\n          </v-card>\n        </v-col>\n      </v-row>\n    </v-container>\n        \n        \n        <v-row class=\"bottom-buttons\">\n            <v-btn @click=\"backward\" large>\n                <v-icon>\n                    mdi-arrow-left\n                </v-icon>\n            </v-btn>\n            <v-spacer></v-spacer>\n            <v-btn @click=\"forward\" large>\n                <v-icon>\n                    mdi-arrow-right\n                </v-icon>\n            </v-btn>\n            <v-spacer></v-spacer>\n            <v-btn @click=\"play\" large>\n                <v-icon>\n                    mdi-play\n                </v-icon>\n            </v-btn>\n        </v-row>\n    </div>\n    \n</template>\n  \n<script>\nimport { draw } from \"./DrawHelper.js\";\nimport { arcRenderer, drawSceneList } from '../App.vue';\nimport * as THREE from 'three';\n//import * as THREE from \"three\";\n//import { renderer, scene, camera } from \"../App.vue\";\n\nexport let index = 0;\nlet drawing = false;\n\nlet rotatingInterval = null;  // Interval to rotate index\n//let rotatingCondition = false;\n\n\nexport default {\n    name: 'DrawingInput',\n\n    data(){\n        return {\n            isDrawing: false,\n            rotatingCondition: false,\n            stroke: {\n                show_stroke: true,\n                lineWidth: .25,\n                color: 0x000000,\n                eraser: false,\n                \n            }\n        };\n    },\n    mounted (){\n        this.$watch(() => this.rotatingCondition, (newValue) => {\n            console.log(\"hello\");\n            if(newValue){\n                if(rotatingInterval == null){\n                    console.log(\"hello\");\n                    // Rotate the index 5 times per second\n                    rotatingInterval = setInterval(() => {\n                        index = (index + 1) % drawSceneList.length;\n                    }, 1000/5); // 1000 ms (1s) divided by 5 gives 200 ms\n                }\n            }else{\n                // Stop rotating the index\n                if(rotatingInterval != null){\n                    clearInterval(rotatingInterval);\n                    rotatingInterval = null;\n                }\n            }\n        });\n        // document.body \n        /*\n        const button = this.$refs.eraserButton;\n        \n        button.addEventListener('click', () => {\n            console.log(\"pointer down\");\n            this.isEraserMode = !this.isEraserMode;\n        });\n        */\n\n\n        document.body.addEventListener('mouseup', (event) => {\n            if (this.inCanvas(event)){\n                this.handleMouseUp();\n                drawing = false;\n            }\n        });\n\n        document.body.addEventListener('mousedown', (event) => {\n            if (this.inCanvas(event)) {\n                drawing = true;\n                this.handleMouseDown(event);\n            }\n        });\n\n        document.body.addEventListener('pointermove', (event) => {\n            //console.log(event.pressure);\n            if (event.pressure > 0){\n                this.stroke.lineWidth = event.pressure * .5;\n            }\n\n        });\n\n        document.body.addEventListener('mousemove', (event) => {\n            //console.log(event.pressure);\n            if (this.inCanvas(event)) {\n                if (drawing) {\n                    this.handleMouseMove(event);\n                }\n            } else {\n                if (drawing){\n                    this.handleMouseUp();\n                    drawing = false;\n                }\n            }\n        });\n        //this.handleMouseMove(event);\n\n       \n\n    },\n    methods: {\n        inCanvas( event ) {\n            var rect = arcRenderer.domElement.getBoundingClientRect();\n            var centerX = rect.left + rect.width / 2;\n            var centerY = rect.top + rect.height / 2;\n\n            const dx = event.clientX - centerX;\n            const dy = event.clientY - centerY;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n\n            if (distance < rect.width/2){\n                return false;\n            }\n            return true;\n        },\n        handleMouseMove(event) {\n            if (!this.isDrawing) return;\n            let x = event.clientX;\n            let y = event.clientY;\n            // Assuming a 2D drawing, so Z is constant, but this could be modified as per the requirement.\n            draw.onMove(x, y, this.stroke);\n        },\n        handleMouseDown(event) {\n            //console.log(\"mouse down\");\n            this.isDrawing = true;\n            let x = event.clientX;\n            let y = event.clientY;\n            draw.onStart(x, y, this.stroke);\n        },\n        handleMouseUp() {\n            this.isDrawing = false;\n            draw.onEnd();\n        },\n        toggleEraserMode() {\n            this.stroke.eraser = !this.stroke.eraser;\n        },\n        backward() {\n            if (index > 0){\n                index--;\n                console.log(drawSceneList[index].children.length);\n            }\n            \n        },\n        forward() {\n            if (index < drawSceneList.length - 1){\n                index++;\n                console.log(drawSceneList[index].children.length);\n            } else {\n                const newScene = new THREE.Scene();\n                //newScene.add(plane);\n                drawSceneList.push(newScene);\n                index++;\n                console.log(drawSceneList[index].children.length);\n            }\n        },\n        play() {\n            console.log(!this.rotatingCondition);\n            this.rotatingCondition = !this.rotatingCondition;\n        }\n        \n    }\n}\n</script>\n\n<style scoped>\n.drawing-input {\n    width: 100%;\n    height: 100%;\n}\n\n.fixed-button {\n  position: fixed;\n  top: 20px; /* Adjust the bottom value as needed */\n  left: 20px; /* Adjust the right value as needed */\n  z-index: 999; /* Set an appropriate z-index if necessary */\n  /* Add any other desired styles */\n}\n\n.v-card {\n  position: fixed;\n  top: 10%;\n  bottom: 90%;\n  left: 2%;\n  display: flex;\n  align-items: center;\n  z-index: 999;\n  height: 80%;\n  width: 8%;\n  justify-content: flex-start;\n  background-color: rgba(1, 1, 1, 0.9);\n}\n\n.button-container {\n  position: fixed;\n  top: 5%;\n  left: 2%;\n  height: 50%;\n  z-index: 999;\n  width: 10%;\n}\n\n.bottom-buttons {\n  position: fixed;\n  width: 15%;\n  bottom: 40px; /* Adjust the bottom value as needed */\n  left: 40px; /* Adjust the right value as needed */\n  z-index: 999; /* Set an appropriate z-index if necessary */\n  /* Add any other desired styles */\n}\n\n</style>\n"],"mappings":";;;EACSA,KAAK,EAAC;AAAe;;;;;;;;;uBAA1BC,mBAAA,CAwCM,OAxCNC,UAwCM,GAvCFC,YAAA,CAIQC,gBAAA;IAJDJ,KAAK,EAAC,cAAc;IAACK,GAAG,EAAC,cAAc;IAAEC,OAAK,EAAEC,QAAA,CAAAC,gBAAgB;IAAEC,KAAK,EAAL;;sBACrE,MAES,CAFTN,YAAA,CAESO,iBAAA;wBADT,MAAwD,C,kCAArDC,KAAA,CAAAC,MAAM,CAACC,MAAM,sD;;;;;;kCAIpBV,YAAA,CAWUW,sBAAA;IAXG,aAAW,EAAX,EAAW;IAACC,KAAK,EAAL;;sBAC3B,MASQ,CATRZ,YAAA,CASQa,gBAAA;MATDhB,KAAK,EAAC,aAAa;MAACiB,KAAK,EAAC;;wBAC/B,MAOQ,CAPRd,YAAA,CAOQe,gBAAA;QAPDC,IAAI,EAAC,GAAG;QAACC,EAAE,EAAC;;0BACjB,MAKS,CALTjB,YAAA,CAKSkB,iBAAA;UALDrB,KAAK,EAAC,MAAM;UAACsB,QAAQ,EAAR;;4BACnB,MAAqE,CAArEnB,YAAA,CAAqEC,gBAAA;YAA9DmB,KAAK,EAAL,EAAK;YAACC,KAAK,EAAC,QAAQ;YAACxB,KAAK,EAAC;;8BAAmB,MAAQ,C,iBAAR,UAAQ,E;;cAC7DG,YAAA,CAAqEC,gBAAA;YAA9DmB,KAAK,EAAL,EAAK;YAACC,KAAK,EAAC,QAAQ;YAACxB,KAAK,EAAC;;8BAAmB,MAAQ,C,iBAAR,UAAQ,E;;cAC7DG,YAAA,CAAqEC,gBAAA;YAA9DmB,KAAK,EAAL,EAAK;YAACC,KAAK,EAAC,QAAQ;YAACxB,KAAK,EAAC;;8BAAmB,MAAQ,C,iBAAR,UAAQ,E;;cAC7DG,YAAA,CAAqEC,gBAAA;YAA9DmB,KAAK,EAAL,EAAK;YAACC,KAAK,EAAC,QAAQ;YAACxB,KAAK,EAAC;;8BAAmB,MAAQ,C,iBAAR,UAAQ,E;;;;;;;;;;;;;;MAOjEG,YAAA,CAkBQa,gBAAA;IAlBDhB,KAAK,EAAC;EAAgB;sBACzB,MAIQ,CAJRG,YAAA,CAIQC,gBAAA;MAJAE,OAAK,EAAEC,QAAA,CAAAkB,QAAQ;MAAEhB,KAAK,EAAL;;wBACrB,MAES,CAFTN,YAAA,CAESO,iBAAA;0BAFD,MAER,C,iBAFQ,kBAER,E;;;;;oCAEJP,YAAA,CAAqBuB,mBAAA,GACrBvB,YAAA,CAIQC,gBAAA;MAJAE,OAAK,EAAEC,QAAA,CAAAoB,OAAO;MAAElB,KAAK,EAAL;;wBACpB,MAES,CAFTN,YAAA,CAESO,iBAAA;0BAFD,MAER,C,iBAFQ,mBAER,E;;;;;oCAEJP,YAAA,CAAqBuB,mBAAA,GACrBvB,YAAA,CAIQC,gBAAA;MAJAE,OAAK,EAAEC,QAAA,CAAAqB,IAAI;MAAEnB,KAAK,EAAL;;wBACjB,MAES,CAFTN,YAAA,CAESO,iBAAA;0BAFD,MAER,C,iBAFQ,YAER,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}