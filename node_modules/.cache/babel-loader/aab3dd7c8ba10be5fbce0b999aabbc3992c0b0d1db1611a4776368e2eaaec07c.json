{"ast":null,"code":"import * as THREE from 'three';\n\n// Author jacopocolo (https://github.com/jacopocolo/Penzil/blob/main/src/components/InfiniteGridHelper.js)\n// which was inspired by Fyrestar https://mevedia.com (https://github.com/Fyrestar/THREE.InfiniteGridHelper)\n\nfunction InfiniteGridHelper() {\n  const axes = 'xzy';\n  const planeAxes = axes.slice(0, 2);\n  const color = new THREE.Color('white');\n  const size1 = 1;\n  const size2 = 5;\n  const distance = 50;\n  const material = new THREE.ShaderMaterial({\n    side: THREE.DoubleSide,\n    uniforms: {\n      uSize1: {\n        value: size1\n      },\n      uSize2: {\n        value: size2\n      },\n      uColor: {\n        value: color\n      },\n      uDistance: {\n        value: distance\n      }\n    },\n    transparent: true,\n    vertexShader: `\n    \n    varying vec3 worldPosition;\n\n    uniform float uDistance;\n    \n    void main() {\n    \n            vec3 pos = position.${axes} * uDistance;\n            pos.${planeAxes} += cameraPosition.${planeAxes};\n            \n            worldPosition = pos;\n            \n            gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n    \n    }\n    `,\n    fragmentShader: `\n    \n    varying vec3 worldPosition;\n    \n    uniform float uSize1;\n    uniform float uSize2;\n    uniform vec3 uColor;\n    uniform float uDistance;\n        \n        \n        \n        float getGrid(float size) {\n        \n            vec2 r = worldPosition.${planeAxes} / size;\n            \n            \n            vec2 grid = abs(fract(r - 0.5) - 0.5) / fwidth(r);\n            float line = min(grid.x, grid.y);\n            \n        \n            return 1.0 - min(line, 1.0);\n        }\n        \n    void main() {\n    \n            \n            float d = 1.0 - min(distance(cameraPosition.${planeAxes}, worldPosition.${planeAxes}) / uDistance, 1.0);\n            \n            float g1 = getGrid(uSize1);\n            float g2 = getGrid(uSize2);\n            \n            \n            gl_FragColor = vec4(uColor.rgb, mix(g2, g1, g1) * pow(d, 3.0));\n            gl_FragColor.a = mix(0.5 * gl_FragColor.a, gl_FragColor.a, g2);\n            \n            if ( gl_FragColor.a <= 0.0 ) discard;\n            \n    \n    }\n    \n    `,\n    extensions: {\n      derivatives: true\n    }\n  });\n  const planeGeometry = new THREE.PlaneGeometry(2, 2, 1, 1);\n  const grid = new THREE.Mesh(planeGeometry, material);\n  return grid;\n}\nexport default InfiniteGridHelper;","map":{"version":3,"names":["THREE","InfiniteGridHelper","axes","planeAxes","slice","color","Color","size1","size2","distance","material","ShaderMaterial","side","DoubleSide","uniforms","uSize1","value","uSize2","uColor","uDistance","transparent","vertexShader","fragmentShader","extensions","derivatives","planeGeometry","PlaneGeometry","grid","Mesh"],"sources":["/Users/olliearrison/Desktop/SURA/src/components/InfiniteGridHelper.js"],"sourcesContent":["import * as THREE from 'three';\n\n// Author jacopocolo (https://github.com/jacopocolo/Penzil/blob/main/src/components/InfiniteGridHelper.js)\n// which was inspired by Fyrestar https://mevedia.com (https://github.com/Fyrestar/THREE.InfiniteGridHelper)\n\nfunction InfiniteGridHelper() {\n    const axes = 'xzy';\n    const planeAxes = axes.slice(0, 2);\n    const color = new THREE.Color('white');\n    const size1 = 1;\n    const size2 = 5;\n\n    const distance = 50;\n\n    const material = new THREE.ShaderMaterial({\n\n    side: THREE.DoubleSide,\n\n    uniforms: {\n        uSize1: {\n            value: size1\n        },\n        uSize2: {\n            value: size2\n        },\n        uColor: {\n            value: color\n        },\n        uDistance: {\n            value: distance\n        }\n    },\n    transparent: true,\n    vertexShader: `\n    \n    varying vec3 worldPosition;\n\n    uniform float uDistance;\n    \n    void main() {\n    \n            vec3 pos = position.${axes} * uDistance;\n            pos.${planeAxes} += cameraPosition.${planeAxes};\n            \n            worldPosition = pos;\n            \n            gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n    \n    }\n    `,\n\n\n    fragmentShader: `\n    \n    varying vec3 worldPosition;\n    \n    uniform float uSize1;\n    uniform float uSize2;\n    uniform vec3 uColor;\n    uniform float uDistance;\n        \n        \n        \n        float getGrid(float size) {\n        \n            vec2 r = worldPosition.${planeAxes} / size;\n            \n            \n            vec2 grid = abs(fract(r - 0.5) - 0.5) / fwidth(r);\n            float line = min(grid.x, grid.y);\n            \n        \n            return 1.0 - min(line, 1.0);\n        }\n        \n    void main() {\n    \n            \n            float d = 1.0 - min(distance(cameraPosition.${planeAxes}, worldPosition.${planeAxes}) / uDistance, 1.0);\n            \n            float g1 = getGrid(uSize1);\n            float g2 = getGrid(uSize2);\n            \n            \n            gl_FragColor = vec4(uColor.rgb, mix(g2, g1, g1) * pow(d, 3.0));\n            gl_FragColor.a = mix(0.5 * gl_FragColor.a, gl_FragColor.a, g2);\n            \n            if ( gl_FragColor.a <= 0.0 ) discard;\n            \n    \n    }\n    \n    `,\n\n    extensions: {\n        derivatives: true\n    }\n\n    });\n\n    const planeGeometry = new THREE.PlaneGeometry(2, 2, 1, 1);\n    const grid = new THREE.Mesh(planeGeometry, material);\n    return grid;\n}\n\n\nexport default InfiniteGridHelper;\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;;AAE9B;AACA;;AAEA,SAASC,kBAAkBA,CAAA,EAAG;EAC1B,MAAMC,IAAI,GAAG,KAAK;EAClB,MAAMC,SAAS,GAAGD,IAAI,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAClC,MAAMC,KAAK,GAAG,IAAIL,KAAK,CAACM,KAAK,CAAC,OAAO,CAAC;EACtC,MAAMC,KAAK,GAAG,CAAC;EACf,MAAMC,KAAK,GAAG,CAAC;EAEf,MAAMC,QAAQ,GAAG,EAAE;EAEnB,MAAMC,QAAQ,GAAG,IAAIV,KAAK,CAACW,cAAc,CAAC;IAE1CC,IAAI,EAAEZ,KAAK,CAACa,UAAU;IAEtBC,QAAQ,EAAE;MACNC,MAAM,EAAE;QACJC,KAAK,EAAET;MACX,CAAC;MACDU,MAAM,EAAE;QACJD,KAAK,EAAER;MACX,CAAC;MACDU,MAAM,EAAE;QACJF,KAAK,EAAEX;MACX,CAAC;MACDc,SAAS,EAAE;QACPH,KAAK,EAAEP;MACX;IACJ,CAAC;IACDW,WAAW,EAAE,IAAI;IACjBC,YAAY,EAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkCnB,IAAK;AACvC,kBAAkBC,SAAU,sBAAqBA,SAAU;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAGDmB,cAAc,EAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqCnB,SAAU;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0DA,SAAU,mBAAkBA,SAAU;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAEDoB,UAAU,EAAE;MACRC,WAAW,EAAE;IACjB;EAEA,CAAC,CAAC;EAEF,MAAMC,aAAa,GAAG,IAAIzB,KAAK,CAAC0B,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACzD,MAAMC,IAAI,GAAG,IAAI3B,KAAK,CAAC4B,IAAI,CAACH,aAAa,EAAEf,QAAQ,CAAC;EACpD,OAAOiB,IAAI;AACf;AAGA,eAAe1B,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}