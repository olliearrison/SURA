{"ast":null,"code":"import * as THREE from 'three';\nimport InfiniteGridHelper from \"./InfiniteGridHelper.js\";\nexport default {\n  name: 'GridBackground',\n  props: {},\n  mounted() {\n    const scene = new THREE.Scene();\n\n    // Create a renderer\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    document.body.appendChild(renderer.domElement);\n\n    // Create a camera\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 2;\n    camera.position.x = 0;\n    renderer.setClearColor(new THREE.Color(0x000000));\n\n    // Create a geometry\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    const edges = new THREE.EdgesGeometry(geometry);\n\n    // Create a material\n\n    const lineMaterial = new THREE.LineBasicMaterial({\n      color: 0x00ff00\n    });\n\n    // Create a mesh\n\n    const cube = new THREE.LineSegments(edges, lineMaterial);\n\n    // Add the mesh to the scene\n\n    scene.add(cube);\n    const grid = InfiniteGridHelper();\n    scene.add(grid);\n    let rotationSpeed = 0.01; // Initial rotation speed\n    function animate() {\n      requestAnimationFrame(animate);\n\n      // Rotate the cube\n      cube.rotation.x += rotationSpeed;\n      cube.rotation.y += rotationSpeed;\n      grid.rotation.x += .005;\n      grid.rotation.y += .003;\n\n      // Render the scene with the camera\n      renderer.render(scene, camera);\n    }\n    animate();\n  }\n};","map":{"version":3,"names":["THREE","InfiniteGridHelper","name","props","mounted","scene","Scene","renderer","WebGLRenderer","setSize","$el","clientWidth","clientHeight","document","body","appendChild","domElement","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","x","setClearColor","Color","geometry","BoxGeometry","edges","EdgesGeometry","lineMaterial","LineBasicMaterial","color","cube","LineSegments","add","grid","rotationSpeed","animate","requestAnimationFrame","rotation","y","render"],"sources":["/Users/olliearrison/Desktop/SURA/src/components/GridBackground.vue"],"sourcesContent":["<template>\n    <div class=\"grid\"> </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\nimport InfiniteGridHelper from \"./InfiniteGridHelper.js\";\n\n\nexport default {\n  name: 'GridBackground',\n  props: {\n  },\n  mounted(){\n    const scene = new THREE.Scene();\n\n    // Create a renderer\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    document.body.appendChild(renderer.domElement);\n\n    // Create a camera\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 2;\n    camera.position.x = 0;\n\n\n    renderer.setClearColor(new THREE.Color(0x000000));\n\n\n    // Create a geometry\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n\n    const edges = new THREE.EdgesGeometry(geometry);\n\n    // Create a material\n\n    const lineMaterial = new THREE.LineBasicMaterial({ color: 0x00ff00 });\n\n    // Create a mesh\n\n    const cube = new THREE.LineSegments(edges, lineMaterial);\n\n    // Add the mesh to the scene\n\n\n    scene.add(cube);\n\n    const grid = InfiniteGridHelper();\n    scene.add(grid);\n\n    let rotationSpeed = 0.01; // Initial rotation speed\n    function animate() {\n        requestAnimationFrame(animate);\n\n        // Rotate the cube\n        cube.rotation.x += rotationSpeed;\n        cube.rotation.y += rotationSpeed;\n\n        grid.rotation.x += .005;\n        grid.rotation.y += .003;\n\n        // Render the scene with the camera\n        renderer.render(scene, camera);\n    }\n\n    animate();\n  }\n}\n</script>\n\n<style>\n\n#grid-background {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n</style>"],"mappings":"AAKA,OAAO,KAAKA,KAAI,MAAO,OAAO;AAC9B,OAAOC,kBAAiB,MAAO,yBAAyB;AAGxD,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,KAAK,EAAE,CACP,CAAC;EACDC,OAAOA,CAAA,EAAE;IACP,MAAMC,KAAI,GAAI,IAAIL,KAAK,CAACM,KAAK,CAAC,CAAC;;IAE/B;IACA,MAAMC,QAAO,GAAI,IAAIP,KAAK,CAACQ,aAAa,CAAC,CAAC;IAC1CD,QAAQ,CAACE,OAAO,CAAC,IAAI,CAACC,GAAG,CAACC,WAAW,EAAE,IAAI,CAACD,GAAG,CAACE,YAAY,CAAC;IAC7DC,QAAQ,CAACC,IAAI,CAACC,WAAW,CAACR,QAAQ,CAACS,UAAU,CAAC;;IAE9C;IACA,MAAMC,MAAK,GAAI,IAAIjB,KAAK,CAACkB,iBAAiB,CAAC,EAAE,EAAEC,MAAM,CAACC,UAAS,GAAID,MAAM,CAACE,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC;IACjGJ,MAAM,CAACK,QAAQ,CAACC,CAAA,GAAI,CAAC;IACrBN,MAAM,CAACK,QAAQ,CAACE,CAAA,GAAI,CAAC;IAGrBjB,QAAQ,CAACkB,aAAa,CAAC,IAAIzB,KAAK,CAAC0B,KAAK,CAAC,QAAQ,CAAC,CAAC;;IAGjD;IACA,MAAMC,QAAO,GAAI,IAAI3B,KAAK,CAAC4B,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAE/C,MAAMC,KAAI,GAAI,IAAI7B,KAAK,CAAC8B,aAAa,CAACH,QAAQ,CAAC;;IAE/C;;IAEA,MAAMI,YAAW,GAAI,IAAI/B,KAAK,CAACgC,iBAAiB,CAAC;MAAEC,KAAK,EAAE;IAAS,CAAC,CAAC;;IAErE;;IAEA,MAAMC,IAAG,GAAI,IAAIlC,KAAK,CAACmC,YAAY,CAACN,KAAK,EAAEE,YAAY,CAAC;;IAExD;;IAGA1B,KAAK,CAAC+B,GAAG,CAACF,IAAI,CAAC;IAEf,MAAMG,IAAG,GAAIpC,kBAAkB,CAAC,CAAC;IACjCI,KAAK,CAAC+B,GAAG,CAACC,IAAI,CAAC;IAEf,IAAIC,aAAY,GAAI,IAAI,EAAE;IAC1B,SAASC,OAAOA,CAAA,EAAG;MACfC,qBAAqB,CAACD,OAAO,CAAC;;MAE9B;MACAL,IAAI,CAACO,QAAQ,CAACjB,CAAA,IAAKc,aAAa;MAChCJ,IAAI,CAACO,QAAQ,CAACC,CAAA,IAAKJ,aAAa;MAEhCD,IAAI,CAACI,QAAQ,CAACjB,CAAA,IAAK,IAAI;MACvBa,IAAI,CAACI,QAAQ,CAACC,CAAA,IAAK,IAAI;;MAEvB;MACAnC,QAAQ,CAACoC,MAAM,CAACtC,KAAK,EAAEY,MAAM,CAAC;IAClC;IAEAsB,OAAO,CAAC,CAAC;EACX;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}