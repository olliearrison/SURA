{"ast":null,"code":"import _defineProperty from \"/Users/olliearrison/Desktop/SURA/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/esnext.typed-array.to-reversed.js\";\nimport \"core-js/modules/esnext.typed-array.to-sorted.js\";\nimport \"core-js/modules/esnext.typed-array.with.js\";\nimport * as THREE from \"three\";\nimport { MeshLine, MeshLineMaterial, MeshLineRaycast } from \"three.meshline\";\nimport { scene, camera, plane } from \"../App.vue\";\nlet draw = {\n  l: undefined,\n  draw: class draw {\n    constructor(stroke) {\n      _defineProperty(this, \"e\", void 0);\n      this.stroke = stroke;\n      this.line = new MeshLine();\n      this.geometry = new THREE.BufferGeometry();\n      this.vertices = [];\n      this.lineWidths = [];\n      this.geometry.setAttribute(\"position\", new THREE.BufferAttribute(new Float32Array(this.vertices), 3));\n      //this.geometry.setAttribute(\"widthCallback\", new THREE.BufferAttribute(new Float32Array(this.lineWidths), 1));\n\n      this.material = new MeshLineMaterial({\n        lineWidth: this.stroke.show_stroke ? this.stroke.lineWidth : .01,\n        sizeAttenuation: 1,\n        color: this.stroke.show_stroke ? this.stroke.color : 0xFFFFFF,\n        side: THREE.DoubleSide,\n        fog: true,\n        wireframe: false,\n        alphaTest: 0.9,\n        blending: THREE.NormalBlending,\n        transparent: false,\n        resolution: new THREE.Vector2(window.innerWidth, window.innerHeight),\n        repeat: new THREE.Vector2(.1, .1),\n        opacity: 1\n      });\n      this.mesh = new THREE.Mesh(this.line.geometry, this.material);\n      this.mesh.raycast = MeshLineRaycast;\n    }\n    translate(x, y) {\n      var vec = new THREE.Vector3();\n\n      // from stackoverflow\n      vec.set(x / window.innerWidth * 2 - 1, -(y / window.innerHeight) * 2 + 1, .5);\n      const raycaster = new THREE.Raycaster();\n      raycaster.setFromCamera(vec, camera);\n      var intersects = raycaster.intersectObject(plane);\n      const intersectPoints = intersects.map(intersection => intersection.point);\n      return intersectPoints;\n    }\n    start() {\n      scene.add(this.mesh);\n    }\n    move(x, y, z, stroke) {\n      //var v3 = this.translate(x, y, z);\n      this.vertices = [...this.vertices, x, y, z];\n      this.geometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(this.vertices), 3));\n      //console.log(this.vertices);\n      // This updates the MeshLine's geometry\n      var width = stroke.lineWidth;\n      this.lineWidths = [...this.lineWidths, width];\n      var widthCallback = p => {\n        return this.lineWidths[Math.floor(p * this.lineWidths.length)];\n      };\n      this.line.setGeometry(this.geometry, widthCallback);\n    }\n    end() {\n      if (this.vertices.length >= 3) {\n        this.geometry.computeBoundingBox();\n      }\n    }\n  },\n  onStart: function (x, y, stroke) {\n    this.l = new this.draw(stroke);\n    var coor = this.l.translate(x, y);\n    if (coor.length > 0) {\n      this.l.move(coor[0].x, coor[0].y, coor[0].z, stroke);\n      this.l.start();\n    }\n  },\n  onMove: function (x, y, stroke) {\n    if (this.l !== undefined) {\n      var coor = this.l.translate(x, y);\n      if (coor.length > 0) {\n        this.l.move(coor[0].x, coor[0].y, coor[0].z, stroke);\n      }\n    }\n  },\n  onEnd: function () {\n    this.l.end();\n  }\n};\nexport { draw };","map":{"version":3,"names":["THREE","MeshLine","MeshLineMaterial","MeshLineRaycast","scene","camera","plane","draw","l","undefined","constructor","stroke","_defineProperty","line","geometry","BufferGeometry","vertices","lineWidths","setAttribute","BufferAttribute","Float32Array","material","lineWidth","show_stroke","sizeAttenuation","color","side","DoubleSide","fog","wireframe","alphaTest","blending","NormalBlending","transparent","resolution","Vector2","window","innerWidth","innerHeight","repeat","opacity","mesh","Mesh","raycast","translate","x","y","vec","Vector3","set","raycaster","Raycaster","setFromCamera","intersects","intersectObject","intersectPoints","map","intersection","point","start","add","move","z","width","widthCallback","p","Math","floor","length","setGeometry","end","computeBoundingBox","onStart","coor","onMove","onEnd"],"sources":["/Users/olliearrison/Desktop/SURA/src/components/DrawHelper.js"],"sourcesContent":["import * as THREE from \"three\";\nimport { MeshLine, MeshLineMaterial, MeshLineRaycast } from \"three.meshline\";\nimport { scene, camera, plane } from \"../App.vue\";\n\nlet draw = {\n    l: undefined,\n    draw: class {\n        constructor(stroke) {\n            this.stroke = stroke;\n            this.line = new MeshLine();\n            this.geometry = new THREE.BufferGeometry();\n            this.vertices = [];\n            this.lineWidths = [];\n            this.geometry.setAttribute(\"position\", new THREE.BufferAttribute(new Float32Array(this.vertices), 3));\n            //this.geometry.setAttribute(\"widthCallback\", new THREE.BufferAttribute(new Float32Array(this.lineWidths), 1));\n            \n            this.material = new MeshLineMaterial({\n                lineWidth: this.stroke.show_stroke ? this.stroke.lineWidth : .01,\n                sizeAttenuation: 1,\n                color: this.stroke.show_stroke ? this.stroke.color : 0xFFFFFF,\n                side: THREE.DoubleSide,\n                fog: true,\n                wireframe: false,\n                alphaTest: 0.9,\n                blending: THREE.NormalBlending,\n                transparent: false,\n                resolution: new THREE.Vector2(window.innerWidth, window.innerHeight),\n                repeat: new THREE.Vector2(.1, .1),\n                opacity: 1,\n            });\n            this.mesh = new THREE.Mesh(this.line.geometry, this.material);\n            this.mesh.raycast = MeshLineRaycast;\n        }\n\n\n        translate(x, y) {\n          \n            var vec = new THREE.Vector3();\n    \n            // from stackoverflow\n            vec.set(\n                ( x / window.innerWidth ) * 2 - 1,\n                - ( y / window.innerHeight ) * 2 + 1,\n                .5 );\n\n            const raycaster = new THREE.Raycaster();\n            raycaster.setFromCamera( vec, camera );\n            var intersects = raycaster.intersectObject( plane );\n            \n            const intersectPoints = intersects.map((intersection) => intersection.point);\n            return intersectPoints;\n                    \n        }\n\n        start() {\n            scene.add(this.mesh);\n        }\n\n        move(x, y, z, stroke) {\n            //var v3 = this.translate(x, y, z);\n            this.vertices = [...this.vertices, x, y, z];\n            this.geometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(this.vertices), 3));\n            //console.log(this.vertices);\n              // This updates the MeshLine's geometry\n            var width = stroke.lineWidth;\n            \n            this.lineWidths = [...this.lineWidths, width];\n            \n            var widthCallback = (p) => {\n                return this.lineWidths[Math.floor(p * this.lineWidths.length)];\n            };\n\n            this.line.setGeometry(this.geometry, widthCallback);\n        }\n\n        e\n\n        end() {\n            if (this.vertices.length >= 3) {\n                this.geometry.computeBoundingBox();\n              }\n        }\n\n\n    },\n    onStart: function (x, y, stroke) {\n        \n\n        this.l = new this.draw(stroke);\n\n        var coor = this.l.translate(x, y);\n\n        if (coor.length > 0)\n        {\n            this.l.move(coor[0].x, coor[0].y, coor[0].z, stroke);\n            this.l.start();\n        }\n        \n    },\n    onMove: function (x, y, stroke) {\n\n        \n        if(this.l !== undefined) {\n            var coor = this.l.translate(x, y);\n\n            if (coor.length > 0)\n            {\n                this.l.move(coor[0].x, coor[0].y, coor[0].z, stroke);\n            }\n        }\n        \n    },\n    onEnd: function () {\n        this.l.end();\n    },\n}\n\nexport { draw }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}