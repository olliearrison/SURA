{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"grid\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"rendererElement\",\n  class: \"renderer\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"drawRendererElement\",\n  class: \"renderer\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_4 = [_hoisted_2, _hoisted_3];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_4);\n}","map":{"version":3,"names":["class","_createElementVNode","id","_hoisted_2","_hoisted_3","_createElementBlock","_hoisted_1","_hoisted_4"],"sources":["/Users/olliearrison/Desktop/SURA/src/components/GridBackground.vue"],"sourcesContent":["<template>\n    <div class=\"grid\">\n        <div id=\"rendererElement\" class=\"renderer\"></div>\n        <div id=\"drawRendererElement\" class=\"renderer\"></div>\n    </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\nimport InfiniteGridHelper from \"./InfiniteGridHelper.js\";\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\nimport { renderer, camera, scene, plane, drawSceneList, drawRenderer } from '../App.vue';\nimport { index } from './DrawingInput.vue';\n\nexport let grid = InfiniteGridHelper();\n\nexport default {\n  name: 'GridBackground',\n  props: {\n    cameraPosition: {\n      type: Object,\n      required: true\n    },\n    cameraAngle: {\n      type: Object,\n      required: true\n    }\n  },\n  mounted(){\n\n    // Create a renderer\n    renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    drawRenderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    drawRenderer.setPixelRatio(window.devicePixelRatio);\n\n    let rendererElement = document.getElementById('rendererElement');\n    let drawRendererElement = document.getElementById('drawRendererElement');\n    rendererElement.appendChild(renderer.domElement);\n    drawRendererElement.appendChild(drawRenderer.domElement);\n\n    //document.body.appendChild(renderer.domElement);\n    //document.body.appendChild(drawRenderer.domElement);\n    // Create a camera\n    \n    //camera = camera;\n    camera.rotation.order = \"XYZ\";\n    camera.position.set(this.cameraPosition.x, this.cameraPosition.y, this.cameraPosition.z);\n    camera.rotation.set(new THREE.Euler(this.cameraAngle.x, this.cameraAngle.y, this.cameraAngle.z));\n\n    \n    renderer.setClearColor(new THREE.Color(0xFFFFFF));\n    //renderer.setClearAlpha(0);\n\n\n    scene.add(grid);\n\n    const loader = new GLTFLoader();\n\n    loader.load( './model.glb', function ( gltf ) {\n      console.log(\"getting model\");\n\n      scene.add( gltf.scene );\n\n    }, undefined, function ( error ) {\n\n      console.error( error );\n\n    } );\n\n    //let rotationSpeed = 0.01; // Initial rotation speed\n    const self = this;\n    function animate() {\n        requestAnimationFrame(animate);\n\n        // Rotate the cube\n\n        camera.position.copy(self.cameraPosition);\n        camera.rotation.set(self.cameraAngle.x, self.cameraAngle.y, self.cameraAngle.z);\n        plane.rotation.set(self.cameraAngle.x, self.cameraAngle.y, self.cameraAngle.z);\n\n        const frontVector = new THREE.Vector3(0, 0, -1); // Direction in front of the camera\n        const planePosition = camera.position.clone().add(frontVector.multiplyScalar(offset));\n        planeMesh.position.copy(planePosition);\n\n        //plane.position.copy(self.camera.position);\n        //plane.position.copy(camera.getWorldDirection().multiplyScalar(5));\n\n       // plane.lookAt(camera.position.clone().add(camera.getWorldDirection(new THREE.Vector3())));\n\n        //const offset = new THREE.Vector3(-1, -1, -4); // Adjust the value based on your desired distance\n        //const planePosition = camera.position.clone().add(camera.getWorldDirection(new THREE.Vector3()).multiplyScalar(offset.z));\n        //plane.position.copy(planePosition);\n\n        // Calculate the rotation to make the plane perpendicular to the camera\n        //const target = planePosition.clone().add(camera.getWorldDirection(new THREE.Vector3()));\n        //plane.lookAt(target);\n\n        // make the plane.position plus 5 perpendicular to the camera\n        //plane.position.copy(self.cameraPosition);\n        //plane.position.add(camera.getWorldDirection().multiplyScalar(5));\n        \n        //planeL.rotation.set(self.cameraAngle.x, self.cameraAngle.y, self.cameraAngle.z);\n\n        //plane.position.set(self.cameraPosition.x-10, self.cameraPosition.y-10, self.cameraPosition.z-10);\n\n        // Render the scene with the camera\n        \n        renderer.render(scene, camera);\n        drawRenderer.render(drawSceneList[index], camera);\n        \n        \n    }\n    this.windowResizeHandler();\n    animate();\n    window.addEventListener('resize', this.windowResizeHandler);\n  }, \n  beforeUnmount() {\n    window.removeEventListener('resize', this.windowResizeHandler);\n},\n  methods: {\n    windowResizeHandler() {\n        const width = this.$el.clientWidth;\n        const height = this.$el.clientHeight;\n\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n        renderer.setSize(width, height);\n        drawRenderer.setSize(width, height);\n    }\n  }\n}\n</script>\n\n<style>\n\n.grid {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.renderer {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n</style>"],"mappings":";;EACSA,KAAK,EAAC;AAAM;gCACbC,mBAAA,CAAiD;EAA5CC,EAAE,EAAC,iBAAiB;EAACF,KAAK,EAAC;;gCAChCC,mBAAA,CAAqD;EAAhDC,EAAE,EAAC,qBAAqB;EAACF,KAAK,EAAC;;oBADpCG,UAAiD,EACjDC,UAAqD,C;;uBAFzDC,mBAAA,CAGM,OAHNC,UAGM,EAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}