{"ast":null,"code":"import \"core-js/modules/esnext.typed-array.to-reversed.js\";\nimport \"core-js/modules/esnext.typed-array.to-sorted.js\";\nimport \"core-js/modules/esnext.typed-array.with.js\";\nimport * as THREE from \"three\";\nimport { MeshLine, MeshLineMaterial } from \"three.meshline\";\nimport { scene, renderer, camera } from \"../App.vue\";\nlet draw = {\n  l: undefined,\n  draw: class {\n    constructor(stroke) {\n      this.stroke = stroke;\n      this.line = new MeshLine();\n      this.geometry = new THREE.BufferGeometry();\n      this.vertices = [];\n      this.geometry.setAttribute(\"position\", new THREE.BufferAttribute(new Float32Array(this.vertices), 3));\n      this.material = new MeshLineMaterial({\n        lineWidth: this.stroke.show_stroke ? this.stroke.lineWidth : 0.01,\n        sizeAttenuation: 1,\n        color: this.stroke.show_stroke ? this.stroke.color : 0xFFFFFF,\n        side: THREE.DoubleSide,\n        fog: true,\n        wireframe: false,\n        alphaTest: 0.9,\n        blending: THREE.NormalBlending,\n        transparent: false,\n        repeat: new THREE.Vector2(1, 1),\n        opacity: 1\n      });\n      this.mesh = new THREE.Line(this.line.geometry, this.material);\n    }\n    start() {\n      console.log(\"start\");\n      scene.add(this.mesh);\n    }\n    move(x, y, z) {\n      var v3 = new THREE.Vector3(x, y, z);\n      this.vertices = [...this.vertices, v3.x, v3.y, v3.z];\n      this.geometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(this.vertices), 3));\n      this.line.setGeometry(this.geometry); // This updates the MeshLine's geometry\n    }\n\n    end() {\n      this.geometry.computeBoundingSphere();\n      renderer.render(scene, camera);\n    }\n  },\n  onStart: function (x, y, z, stroke) {\n    this.l = new this.draw(stroke);\n    this.l.move(x, y, z);\n    this.l.start();\n  },\n  onMove: function (x, y, z) {\n    console.log(x, y, z);\n    this.l.move(x / 10, y / 10, z / 10);\n  },\n  onEnd: function () {\n    this.l.end();\n  }\n};\nexport { draw };","map":{"version":3,"names":["THREE","MeshLine","MeshLineMaterial","scene","renderer","camera","draw","l","undefined","constructor","stroke","line","geometry","BufferGeometry","vertices","setAttribute","BufferAttribute","Float32Array","material","lineWidth","show_stroke","sizeAttenuation","color","side","DoubleSide","fog","wireframe","alphaTest","blending","NormalBlending","transparent","repeat","Vector2","opacity","mesh","Line","start","console","log","add","move","x","y","z","v3","Vector3","setGeometry","end","computeBoundingSphere","render","onStart","onMove","onEnd"],"sources":["/Users/olliearrison/Desktop/SURA/src/components/DrawHelper.js"],"sourcesContent":["import * as THREE from \"three\";\nimport { MeshLine, MeshLineMaterial } from \"three.meshline\";\nimport { scene, renderer, camera } from \"../App.vue\";\n\nlet draw = {\n    l: undefined,\n    draw: class {\n        constructor(stroke) {\n            this.stroke = stroke;\n            this.line = new MeshLine();\n            this.geometry = new THREE.BufferGeometry();\n            this.vertices = [];\n            this.geometry.setAttribute(\"position\", new THREE.BufferAttribute(new Float32Array(this.vertices), 3));\n            this.material = new MeshLineMaterial({\n                lineWidth: this.stroke.show_stroke ? this.stroke.lineWidth : 0.01,\n                sizeAttenuation: 1,\n                color: this.stroke.show_stroke ? this.stroke.color : 0xFFFFFF,\n                side: THREE.DoubleSide,\n                fog: true,\n                wireframe: false,\n                alphaTest: 0.9,\n                blending: THREE.NormalBlending,\n                transparent: false,\n                repeat: new THREE.Vector2(1, 1),\n                opacity: 1,\n            });\n            this.mesh = new THREE.Line(this.line.geometry, this.material);\n        }\n\n        start() {\n            console.log(\"start\");\n            scene.add(this.mesh);\n        }\n\n        move(x, y, z) {\n            var v3 = new THREE.Vector3(x, y, z);\n            this.vertices = [...this.vertices, v3.x, v3.y, v3.z];\n            this.geometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(this.vertices), 3));\n            this.line.setGeometry(this.geometry);  // This updates the MeshLine's geometry\n        }\n\n        end() {\n            this.geometry.computeBoundingSphere();\n            renderer.render(scene, camera);\n        }\n    },\n    onStart: function (x, y, z, stroke) {\n        this.l = new this.draw(stroke);\n        this.l.move(x, y, z);\n        this.l.start();\n    },\n    onMove: function (x, y, z) {\n        console.log(x, y, z);\n        this.l.move(x/10, y/10, z/10);\n    },\n    onEnd: function () {\n        this.l.end();\n    },\n}\n\nexport { draw }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}