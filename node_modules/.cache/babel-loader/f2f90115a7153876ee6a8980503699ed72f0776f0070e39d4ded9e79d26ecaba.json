{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { camera } from './Camera.js';\nimport { HistoryController } from \"./HistoryController.js\";\nimport * as THREE from 'three';\nimport { MeshLineMaterial } from \"three.meshline\";\nclass Frame {\n  constructor() {\n    this.history = new HistoryController();\n    this.scene = new THREE.Scene();\n    this.ghostGroup = new THREE.Group();\n    this.pos = camera.position.clone();\n    this.angle = camera.rotation.clone();\n    this.guidePoint = new THREE.Object3D();\n    this.guidePointPosition = new THREE.Vector3();\n  }\n  setGuidePoint(pos) {\n    this.guidePointPosition = pos;\n  }\n  getGhostGroup(opacity) {\n    this.ghostGroup = new THREE.Group();\n    /*\r\n            const material = new THREE.MeshBasicMaterial({ \r\n                color: 0xffffff, \r\n                transparent: false, \r\n                //opacity: opacity,\r\n                depthWrite: false,\r\n            }); \r\n            const material = new MeshLineMaterial({\r\n                lineWidth: this.stroke.show_stroke ? this.stroke.lineWidth : .01,\r\n                sizeAttenuation: 1,\r\n                color: this.stroke.show_stroke ? this.stroke.color : 0xFFFFFF,\r\n                side: THREE.DoubleSide,\r\n                fog: true,\r\n                wireframe: false,\r\n                alphaTest: 0.9,\r\n                blending: THREE.NormalBlending,\r\n                transparent: false,\r\n                resolution: new THREE.Vector2(window.innerWidth, window.innerHeight),\r\n                repeat: new THREE.Vector2(.1, .1),\r\n                opacity: 1,\r\n            }); */\n\n    this.scene.traverse(child => {\n      if (child.isMesh) {\n        let childClone = child.clone();\n        let material = new MeshLineMaterial({\n          lineWidth: childClone.material.lineWidth,\n          sizeAttenuation: 1,\n          color: 0xFFFF00,\n          side: THREE.DoubleSide,\n          fog: true,\n          wireframe: false,\n          alphaTest: 0.9,\n          blending: THREE.NormalBlending,\n          transparent: true,\n          resolution: new THREE.Vector2(window.innerWidth, window.innerHeight),\n          repeat: new THREE.Vector2(.1, .1),\n          opacity: .5\n        });\n        material.color = new THREE.Vector3(1, 0, 0);\n        childClone.material = material;\n        this.ghostGroup.add(childClone);\n      }\n    });\n    console.log(this.ghostGroup, opacity);\n    return this.ghostGroup;\n  }\n}\nclass FrameController {\n  constructor() {\n    this.frameList = [new Frame()];\n    this.index = 0;\n    this.allGhostGroups = new THREE.Group();\n    this.onionSkinDepth = 3;\n    this.onion = true;\n    this.play = false;\n    this.animationPos = [];\n    this.animationAngle = [];\n    this.animationDetail = 0;\n    this.animationFPS = 100;\n    this.drawingFPS = 5;\n    this.currentPos = new THREE.Vector3();\n    this.currentAngle = new THREE.Euler();\n    this.animationIndex = 0;\n    this.needsUpdate = false;\n    this.animationMoments = 0;\n  }\n  updateAllGhostGroups() {\n    const startIndex = Math.max(0, this.index - this.onionSkinDepth);\n    const endIndex = Math.min(this.frameList.length, this.index + this.onionSkinDepth);\n    this.allGhostGroups = new THREE.Group();\n    for (let i = startIndex; i < endIndex; i++) {\n      if (i != this.index) {\n        this.allGhostGroups.add(this.getFrameAtIndex(i).getGhostGroup(.5));\n      }\n    }\n  }\n  updateCamera() {\n    this.needsUpdate = true;\n  }\n  calculateAnimation() {\n    const positions = [];\n    const rotations = [];\n    for (let i = 0; i < this.frameList.length; i++) {\n      const frame = this.getFrameAtIndex(i);\n      positions.push(frame.pos);\n      const v = new THREE.Vector3();\n      v.setFromEuler(frame.angle);\n      rotations.push(v);\n    }\n    console.log(positions, rotations);\n    this.animationDetail = this.animationFPS * this.drawingFPS;\n    this.animationMoments = this.animationDetail * this.frameList.length;\n    const posCurve = new THREE.CatmullRomCurve3(positions);\n    const angleCurve = new THREE.CatmullRomCurve3(rotations);\n    this.animationPos = posCurve.getPoints(this.animationMoments);\n    this.animationAngle = angleCurve.getPoints(this.animationMoments);\n  }\n  updateAnimationFrame() {\n    this.currentPos = this.animationPos[this.animationIndex];\n    this.currentAngle = this.animationAngle[this.animationIndex];\n    if (this.animationIndex % this.animationDetail == 0) {\n      this.setIndex((this.index + 1) % this.frameList.length);\n    }\n    this.animationIndex = (this.animationIndex + 1) % this.animationMoments;\n  }\n  setPos(pos) {\n    this.setPosAtFrame(pos, this.index);\n  }\n  setPosAtFrame(p, i) {\n    this.getFrameAtIndex(i).pos = p;\n  }\n  setAngle(angle) {\n    this.setAngleAtFrame(angle, this.index);\n  }\n  setAngleAtFrame(a, i) {\n    this.getFrameAtIndex(i).angle = a;\n  }\n  addIndex() {\n    this.setIndex(1 + this.index);\n  }\n  subIndex() {\n    this.setIndex(-1 + this.index);\n  }\n  setIndex(v) {\n    this.check(v);\n    this.index = v;\n    this.updateAllGhostGroups();\n  }\n  getFrameScene() {\n    return this.getFrame().scene;\n  }\n  getFrame() {\n    return this.getFrameAtIndex(this.index);\n  }\n  getFrameAtIndex(i) {\n    this.check(i);\n    return this.frameList[i];\n  }\n  addFrame() {\n    this.addFrameAtIndex(this.index);\n  }\n  addFrameAtIndex(i) {\n    console.log(i);\n    this.check(i);\n    this.frameList.splice(i + 1, 0, new Frame());\n    this.addIndex();\n  }\n  delFrame() {\n    this.delFrameAtIndex(this.index);\n  }\n  delFrameAtIndex(i) {\n    this.check(i);\n    if (this.index > 0 && i > 0) {\n      this.frameList.splice(i, 1);\n      this.subIndex;\n    }\n  }\n  check(i) {\n    if (i < 0 || i >= this.frameList.length) {\n      console.log(\"frame accessed out of bounds\", i);\n    }\n  }\n}\nexport { FrameController };","map":{"version":3,"names":["camera","HistoryController","THREE","MeshLineMaterial","Frame","constructor","history","scene","Scene","ghostGroup","Group","pos","position","clone","angle","rotation","guidePoint","Object3D","guidePointPosition","Vector3","setGuidePoint","getGhostGroup","opacity","traverse","child","isMesh","childClone","material","lineWidth","sizeAttenuation","color","side","DoubleSide","fog","wireframe","alphaTest","blending","NormalBlending","transparent","resolution","Vector2","window","innerWidth","innerHeight","repeat","add","console","log","FrameController","frameList","index","allGhostGroups","onionSkinDepth","onion","play","animationPos","animationAngle","animationDetail","animationFPS","drawingFPS","currentPos","currentAngle","Euler","animationIndex","needsUpdate","animationMoments","updateAllGhostGroups","startIndex","Math","max","endIndex","min","length","i","getFrameAtIndex","updateCamera","calculateAnimation","positions","rotations","frame","push","v","setFromEuler","posCurve","CatmullRomCurve3","angleCurve","getPoints","updateAnimationFrame","setIndex","setPos","setPosAtFrame","p","setAngle","setAngleAtFrame","a","addIndex","subIndex","check","getFrameScene","getFrame","addFrame","addFrameAtIndex","splice","delFrame","delFrameAtIndex"],"sources":["C:/Users/peopl/Documents/Arduino/6d2/SURA/src/components/FrameController.js"],"sourcesContent":["import { camera } from './Camera.js';\r\nimport { HistoryController } from \"./HistoryController.js\";\r\nimport * as THREE from 'three';\r\nimport { MeshLineMaterial } from \"three.meshline\";\r\n\r\nclass Frame {\r\n    constructor() {\r\n        this.history = new HistoryController();\r\n        this.scene = new THREE.Scene();\r\n        this.ghostGroup = new THREE.Group();\r\n\r\n        this.pos = camera.position.clone();\r\n        this.angle = camera.rotation.clone();\r\n        this.guidePoint = new THREE.Object3D;\r\n        this.guidePointPosition = new THREE.Vector3();\r\n    }\r\n\r\n    setGuidePoint(pos){\r\n        this.guidePointPosition = pos;\r\n        \r\n    }\r\n\r\n    getGhostGroup(opacity) {\r\n        this.ghostGroup = new THREE.Group();\r\n/*\r\n        const material = new THREE.MeshBasicMaterial({ \r\n            color: 0xffffff, \r\n            transparent: false, \r\n            //opacity: opacity,\r\n            depthWrite: false,\r\n        }); \r\n        const material = new MeshLineMaterial({\r\n            lineWidth: this.stroke.show_stroke ? this.stroke.lineWidth : .01,\r\n            sizeAttenuation: 1,\r\n            color: this.stroke.show_stroke ? this.stroke.color : 0xFFFFFF,\r\n            side: THREE.DoubleSide,\r\n            fog: true,\r\n            wireframe: false,\r\n            alphaTest: 0.9,\r\n            blending: THREE.NormalBlending,\r\n            transparent: false,\r\n            resolution: new THREE.Vector2(window.innerWidth, window.innerHeight),\r\n            repeat: new THREE.Vector2(.1, .1),\r\n            opacity: 1,\r\n        }); */\r\n\r\n        this.scene.traverse(child => {\r\n            if (child.isMesh) {\r\n                let childClone = child.clone();\r\n\r\n                let material = new MeshLineMaterial({\r\n                    lineWidth: childClone.material.lineWidth,\r\n                    sizeAttenuation: 1,\r\n                    color: 0xFFFF00,\r\n                    side: THREE.DoubleSide,\r\n                    fog: true,\r\n                    wireframe: false,\r\n                    alphaTest: 0.9,\r\n                    blending: THREE.NormalBlending,\r\n                    transparent: true,\r\n                    resolution: new THREE.Vector2(window.innerWidth, window.innerHeight),\r\n                    repeat: new THREE.Vector2(.1, .1),\r\n                    opacity: .5,\r\n                });\r\n\r\n                material.color = new THREE.Vector3(1, 0, 0);\r\n                childClone.material = material;\r\n                this.ghostGroup.add(childClone)\r\n            }\r\n        });\r\n        console.log(this.ghostGroup, opacity);\r\n\r\n        return this.ghostGroup;\r\n        \r\n    }\r\n\r\n}\r\n\r\nclass FrameController {\r\n    constructor() {\r\n        this.frameList = [new Frame()];\r\n        this.index = 0;\r\n\r\n        this.allGhostGroups = new THREE.Group();\r\n        this.onionSkinDepth = 3;\r\n        this.onion = true;\r\n\r\n        this.play = false;\r\n        this.animationPos = [];\r\n        this.animationAngle = [];\r\n        this.animationDetail = 0;\r\n        this.animationFPS = 100;\r\n        this.drawingFPS = 5;\r\n\r\n        this.currentPos = new THREE.Vector3();\r\n        this.currentAngle = new THREE.Euler();\r\n        this.animationIndex = 0;\r\n\r\n        this.needsUpdate = false;\r\n\r\n        this.animationMoments = 0;\r\n\r\n    }\r\n\r\n    updateAllGhostGroups(){\r\n        const startIndex = Math.max(0, this.index - this.onionSkinDepth);\r\n        const endIndex = Math.min(this.frameList.length, this.index + this.onionSkinDepth);\r\n\r\n        this.allGhostGroups = new THREE.Group();\r\n\r\n        for (let i = startIndex; i < endIndex; i++) {\r\n            if (i != this.index){\r\n            this.allGhostGroups.add(this.getFrameAtIndex(i).getGhostGroup(.5));\r\n            }\r\n        }\r\n    }\r\n\r\n    updateCamera(){\r\n        this.needsUpdate = true;\r\n    }\r\n\r\n    calculateAnimation(){\r\n        const positions = [];\r\n        const rotations = [];\r\n        for (let i = 0; i < this.frameList.length; i++){\r\n            const frame = this.getFrameAtIndex(i);\r\n            positions.push(frame.pos);\r\n            const v = new THREE.Vector3();\r\n            v.setFromEuler(frame.angle);\r\n            rotations.push(v);\r\n        }\r\n        console.log(positions, rotations);\r\n\r\n        this.animationDetail = this.animationFPS * this.drawingFPS;\r\n        this.animationMoments = this.animationDetail * this.frameList.length;\r\n\r\n        const posCurve = new THREE.CatmullRomCurve3(positions);\r\n        const angleCurve = new THREE.CatmullRomCurve3(rotations);\r\n        this.animationPos = posCurve.getPoints(this.animationMoments);\r\n        this.animationAngle = angleCurve.getPoints(this.animationMoments);\r\n    }\r\n\r\n    updateAnimationFrame(){\r\n        this.currentPos = this.animationPos[this.animationIndex];\r\n        this.currentAngle = this.animationAngle[this.animationIndex];\r\n        \r\n        if (this.animationIndex % (this.animationDetail) == 0){\r\n            this.setIndex((this.index + 1) % this.frameList.length);\r\n        }\r\n\r\n        this.animationIndex = (this.animationIndex + 1) % this.animationMoments;\r\n    }\r\n\r\n    setPos(pos){\r\n        this.setPosAtFrame(pos, this.index);\r\n    }\r\n\r\n    setPosAtFrame(p, i){\r\n        this.getFrameAtIndex(i).pos = p;\r\n    }\r\n\r\n    setAngle(angle){\r\n        this.setAngleAtFrame(angle, this.index);\r\n    }\r\n\r\n    setAngleAtFrame(a, i){\r\n        this.getFrameAtIndex(i).angle = a;\r\n    }\r\n\r\n    addIndex(){\r\n        this.setIndex(1 + this.index);\r\n    }\r\n\r\n    subIndex(){\r\n        this.setIndex(-1 + this.index);\r\n    }\r\n\r\n    setIndex(v){\r\n        this.check(v);\r\n        this.index = v;\r\n        this.updateAllGhostGroups();\r\n    }\r\n\r\n    getFrameScene(){\r\n        return this.getFrame().scene;\r\n    }\r\n\r\n    getFrame(){\r\n        return this.getFrameAtIndex(this.index);\r\n    }\r\n\r\n    getFrameAtIndex(i){\r\n        this.check(i);\r\n        return this.frameList[i];\r\n    }\r\n\r\n    addFrame(){\r\n        this.addFrameAtIndex(this.index);\r\n    }\r\n\r\n    addFrameAtIndex(i){\r\n        console.log(i);\r\n        this.check(i);\r\n        this.frameList.splice(i+1, 0, new Frame());\r\n        this.addIndex()\r\n\r\n    }\r\n\r\n    delFrame(){\r\n        this.delFrameAtIndex(this.index);\r\n    }\r\n\r\n    delFrameAtIndex(i){\r\n        this.check(i);\r\n        if (this.index > 0 && i > 0){\r\n            this.frameList.splice(i, 1);\r\n            this.subIndex;\r\n        }\r\n    }\r\n\r\n    check(i){\r\n        if (i < 0 || i >= this.frameList.length){\r\n            console.log(\"frame accessed out of bounds\", i);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport { FrameController }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}