{"ast":null,"code":"import * as THREE from 'three';\nimport InfiniteGridHelper from \"./InfiniteGridHelper.js\";\nconst scene = new THREE.Scene();\n\n// Create a renderer\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.clientWidth, window.clientHeight);\n//renderer.setSize(element.clientWidth, element.clientHeight);\ndocument.body.appendChild(renderer.domElement);\n\n// Create a camera\nconst camera = new THREE.PerspectiveCamera(75, window.clientWidth / window.clientHeight, 0.1, 1000);\ncamera.position.z = 2;\ncamera.position.x = 0;\nrenderer.setClearColor(new THREE.Color(0x000000));\n\n// Create a geometry\nconst geometry = new THREE.BoxGeometry(1, 1, 1);\nconst edges = new THREE.EdgesGeometry(geometry);\n\n// Create a material\n\nconst lineMaterial = new THREE.LineBasicMaterial({\n  color: 0x00ff00\n});\n\n// Create a mesh\n\nconst cube = new THREE.LineSegments(edges, lineMaterial);\n\n// Add the mesh to the scene\n\nscene.add(cube);\nconst grid = InfiniteGridHelper();\nscene.add(grid);\nlet rotationSpeed = 0.01; // Initial rotation speed\n\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // Rotate the cube\n  cube.rotation.x += rotationSpeed;\n  cube.rotation.y += rotationSpeed;\n  grid.rotation.x += .005;\n  grid.rotation.y += .003;\n\n  // Render the scene with the camera\n  renderer.render(scene, camera);\n}\nanimate();\nexport default {\n  name: 'GridBackground',\n  props: {}\n};","map":{"version":3,"names":["THREE","InfiniteGridHelper","scene","Scene","renderer","WebGLRenderer","setSize","window","clientWidth","clientHeight","document","body","appendChild","domElement","camera","PerspectiveCamera","position","z","x","setClearColor","Color","geometry","BoxGeometry","edges","EdgesGeometry","lineMaterial","LineBasicMaterial","color","cube","LineSegments","add","grid","rotationSpeed","animate","requestAnimationFrame","rotation","y","render","name","props"],"sources":["/Users/olliearrison/Desktop/SURA/src/components/GridBackground.vue"],"sourcesContent":["<template>\n    <div class=\"grid\"> </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\nimport InfiniteGridHelper from \"./InfiniteGridHelper.js\";\n\n\nconst scene = new THREE.Scene();\n\n// Create a renderer\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.clientWidth, window.clientHeight);\n//renderer.setSize(element.clientWidth, element.clientHeight);\ndocument.body.appendChild(renderer.domElement);\n\n// Create a camera\nconst camera = new THREE.PerspectiveCamera(75, window.clientWidth / window.clientHeight, 0.1, 1000);\ncamera.position.z = 2;\ncamera.position.x = 0;\n\n\nrenderer.setClearColor(new THREE.Color(0x000000));\n\n\n// Create a geometry\nconst geometry = new THREE.BoxGeometry(1, 1, 1);\n\nconst edges = new THREE.EdgesGeometry(geometry);\n\n// Create a material\n\nconst lineMaterial = new THREE.LineBasicMaterial({ color: 0x00ff00 });\n\n// Create a mesh\n\nconst cube = new THREE.LineSegments(edges, lineMaterial);\n\n// Add the mesh to the scene\n\n\nscene.add(cube);\n\nconst grid = InfiniteGridHelper();\nscene.add(grid);\n\nlet rotationSpeed = 0.01; // Initial rotation speed\n\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // Rotate the cube\n  cube.rotation.x += rotationSpeed;\n  cube.rotation.y += rotationSpeed;\n\n  grid.rotation.x += .005;\n  grid.rotation.y += .003;\n\n  // Render the scene with the camera\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nexport default {\n  name: 'GridBackground',\n  props: {\n  }\n}\n</script>\n\n<style>\nbody {\n  margin: 0;\n  padding: 0;\n}\n\n#grid-background {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n</style>"],"mappings":"AAKA,OAAO,KAAKA,KAAI,MAAO,OAAO;AAC9B,OAAOC,kBAAiB,MAAO,yBAAyB;AAGxD,MAAMC,KAAI,GAAI,IAAIF,KAAK,CAACG,KAAK,CAAC,CAAC;;AAE/B;AACA,MAAMC,QAAO,GAAI,IAAIJ,KAAK,CAACK,aAAa,CAAC,CAAC;AAC1CD,QAAQ,CAACE,OAAO,CAACC,MAAM,CAACC,WAAW,EAAED,MAAM,CAACE,YAAY,CAAC;AACzD;AACAC,QAAQ,CAACC,IAAI,CAACC,WAAW,CAACR,QAAQ,CAACS,UAAU,CAAC;;AAE9C;AACA,MAAMC,MAAK,GAAI,IAAId,KAAK,CAACe,iBAAiB,CAAC,EAAE,EAAER,MAAM,CAACC,WAAU,GAAID,MAAM,CAACE,YAAY,EAAE,GAAG,EAAE,IAAI,CAAC;AACnGK,MAAM,CAACE,QAAQ,CAACC,CAAA,GAAI,CAAC;AACrBH,MAAM,CAACE,QAAQ,CAACE,CAAA,GAAI,CAAC;AAGrBd,QAAQ,CAACe,aAAa,CAAC,IAAInB,KAAK,CAACoB,KAAK,CAAC,QAAQ,CAAC,CAAC;;AAGjD;AACA,MAAMC,QAAO,GAAI,IAAIrB,KAAK,CAACsB,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAE/C,MAAMC,KAAI,GAAI,IAAIvB,KAAK,CAACwB,aAAa,CAACH,QAAQ,CAAC;;AAE/C;;AAEA,MAAMI,YAAW,GAAI,IAAIzB,KAAK,CAAC0B,iBAAiB,CAAC;EAAEC,KAAK,EAAE;AAAS,CAAC,CAAC;;AAErE;;AAEA,MAAMC,IAAG,GAAI,IAAI5B,KAAK,CAAC6B,YAAY,CAACN,KAAK,EAAEE,YAAY,CAAC;;AAExD;;AAGAvB,KAAK,CAAC4B,GAAG,CAACF,IAAI,CAAC;AAEf,MAAMG,IAAG,GAAI9B,kBAAkB,CAAC,CAAC;AACjCC,KAAK,CAAC4B,GAAG,CAACC,IAAI,CAAC;AAEf,IAAIC,aAAY,GAAI,IAAI,EAAE;;AAE1B,SAASC,OAAOA,CAAA,EAAG;EACjBC,qBAAqB,CAACD,OAAO,CAAC;;EAE9B;EACAL,IAAI,CAACO,QAAQ,CAACjB,CAAA,IAAKc,aAAa;EAChCJ,IAAI,CAACO,QAAQ,CAACC,CAAA,IAAKJ,aAAa;EAEhCD,IAAI,CAACI,QAAQ,CAACjB,CAAA,IAAK,IAAI;EACvBa,IAAI,CAACI,QAAQ,CAACC,CAAA,IAAK,IAAI;;EAEvB;EACAhC,QAAQ,CAACiC,MAAM,CAACnC,KAAK,EAAEY,MAAM,CAAC;AAChC;AAEAmB,OAAO,CAAC,CAAC;AAET,eAAe;EACbK,IAAI,EAAE,gBAAgB;EACtBC,KAAK,EAAE,CACP;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}