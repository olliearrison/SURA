{"ast":null,"code":"import { draw } from \"./DrawHelper.js\";\n//import * as THREE from \"three\";\n//import { renderer, scene, camera } from \"../App.vue\";\n\nexport default {\n  name: 'DrawingInput',\n  data() {\n    return {\n      isDrawing: false,\n      stroke: {\n        show_stroke: true,\n        lineWidth: .01,\n        color: 0x000000\n      }\n    };\n  },\n  mounted() {},\n  methods: {\n    handleMouseMove(event) {\n      if (!this.isDrawing) return;\n      let x = event.clientX;\n      let y = event.clientY;\n      // Assuming a 2D drawing, so Z is constant, but this could be modified as per the requirement.\n      let z = 0;\n      draw.onMove(x, y, z);\n    },\n    handleMouseDown(event) {\n      console.log(\"mouse down\");\n      this.isDrawing = true;\n      let x = event.clientX;\n      let y = event.clientY;\n      let z = 0;\n      draw.onStart(x, y, z, this.stroke);\n    },\n    handleMouseUp() {\n      this.isDrawing = false;\n      draw.onEnd();\n    }\n  }\n};","map":{"version":3,"names":["draw","name","data","isDrawing","stroke","show_stroke","lineWidth","color","mounted","methods","handleMouseMove","event","x","clientX","y","clientY","z","onMove","handleMouseDown","console","log","onStart","handleMouseUp","onEnd"],"sources":["/Users/olliearrison/Desktop/SURA/src/components/DrawingInput.vue"],"sourcesContent":["<template>\n    <div class=\"drawing-input\" \n        @mousemove=\"handleMouseMove\" \n        @mousedown=\"handleMouseDown\" \n        @mouseup=\"handleMouseUp\"></div>\n</template>\n  \n<script>\nimport { draw } from \"./DrawHelper.js\";\n//import * as THREE from \"three\";\n//import { renderer, scene, camera } from \"../App.vue\";\n\nexport default {\n    name: 'DrawingInput',\n    data(){\n        return {\n            isDrawing: false,\n            stroke: {\n                show_stroke: true,\n                lineWidth: .01,\n                color: 0x000000,\n            }\n        };\n    },\n    mounted (){\n\n    },\n    methods: {\n        handleMouseMove(event) {\n            if (!this.isDrawing) return;\n            let x = event.clientX;\n            let y = event.clientY;\n            // Assuming a 2D drawing, so Z is constant, but this could be modified as per the requirement.\n            let z = 0;\n            draw.onMove(x, y, z);\n        },\n        handleMouseDown(event) {\n            console.log(\"mouse down\");\n            this.isDrawing = true;\n            let x = event.clientX;\n            let y = event.clientY;\n            let z = 0;\n            draw.onStart(x, y, z, this.stroke);\n        },\n        handleMouseUp() {\n            this.isDrawing = false;\n            draw.onEnd();\n        }\n    }\n}\n</script>\n\n<style scoped>\n.drawing-input {\n    width: 100%;\n    height: 100%;\n}\n</style>\n"],"mappings":"AAQA,SAASA,IAAG,QAAS,iBAAiB;AACtC;AACA;;AAEA,eAAe;EACXC,IAAI,EAAE,cAAc;EACpBC,IAAIA,CAAA,EAAE;IACF,OAAO;MACHC,SAAS,EAAE,KAAK;MAChBC,MAAM,EAAE;QACJC,WAAW,EAAE,IAAI;QACjBC,SAAS,EAAE,GAAG;QACdC,KAAK,EAAE;MACX;IACJ,CAAC;EACL,CAAC;EACDC,OAAMA,CAAA,EAAI,CAEV,CAAC;EACDC,OAAO,EAAE;IACLC,eAAeA,CAACC,KAAK,EAAE;MACnB,IAAI,CAAC,IAAI,CAACR,SAAS,EAAE;MACrB,IAAIS,CAAA,GAAID,KAAK,CAACE,OAAO;MACrB,IAAIC,CAAA,GAAIH,KAAK,CAACI,OAAO;MACrB;MACA,IAAIC,CAAA,GAAI,CAAC;MACThB,IAAI,CAACiB,MAAM,CAACL,CAAC,EAAEE,CAAC,EAAEE,CAAC,CAAC;IACxB,CAAC;IACDE,eAAeA,CAACP,KAAK,EAAE;MACnBQ,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;MACzB,IAAI,CAACjB,SAAQ,GAAI,IAAI;MACrB,IAAIS,CAAA,GAAID,KAAK,CAACE,OAAO;MACrB,IAAIC,CAAA,GAAIH,KAAK,CAACI,OAAO;MACrB,IAAIC,CAAA,GAAI,CAAC;MACThB,IAAI,CAACqB,OAAO,CAACT,CAAC,EAAEE,CAAC,EAAEE,CAAC,EAAE,IAAI,CAACZ,MAAM,CAAC;IACtC,CAAC;IACDkB,aAAaA,CAAA,EAAG;MACZ,IAAI,CAACnB,SAAQ,GAAI,KAAK;MACtBH,IAAI,CAACuB,KAAK,CAAC,CAAC;IAChB;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}