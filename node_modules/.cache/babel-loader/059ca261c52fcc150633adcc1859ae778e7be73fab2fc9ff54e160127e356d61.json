{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-352fa47c\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"drawing-input\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1"],"sources":["/Users/olliearrison/Desktop/SURA/src/components/DrawingInput.vue"],"sourcesContent":["<template>\n    <div class=\"drawing-input\" ></div>\n</template>\n  \n<script>\nimport { draw } from \"./DrawHelper.js\";\n//import * as THREE from \"three\";\n//import { renderer, scene, camera } from \"../App.vue\";\n\nexport default {\n    name: 'DrawingInput',\n    data(){\n        return {\n            isDrawing: false,\n            stroke: {\n                show_stroke: true,\n                lineWidth: .01,\n                color: 0x000000,\n            }\n        };\n    },\n    mounted (){\n        document.body.addEventListener('mouseup', () => {\n        this.handleMouseUp();\n        });\n\n        document.body.addEventListener('mousedown', () => {\n        this.han\n        });\n\n        document.body.addEventListener('mousemove', () => {\n        console.log('mouseup picked up');\n        });\n\n    },\n    methods: {\n        handleMouseMove(event) {\n            if (!this.isDrawing) return;\n            let x = event.clientX;\n            let y = event.clientY;\n            // Assuming a 2D drawing, so Z is constant, but this could be modified as per the requirement.\n            let z = 0;\n            draw.onMove(x, y, z);\n        },\n        handleMouseDown(event) {\n            console.log(\"mouse down\");\n            this.isDrawing = true;\n            let x = event.clientX;\n            let y = event.clientY;\n            let z = 0;\n            draw.onStart(x, y, z, this.stroke);\n        },\n        handleMouseUp() {\n            this.isDrawing = false;\n            draw.onEnd();\n        }\n    }\n}\n</script>\n\n<style scoped>\n.drawing-input {\n    width: 100%;\n    height: 100%;\n}\n</style>\n"],"mappings":";;;EACSA,KAAK,EAAC;AAAe;;uBAA1BC,mBAAA,CAAkC,OAAlCC,UAAkC"},"metadata":{},"sourceType":"module","externalDependencies":[]}