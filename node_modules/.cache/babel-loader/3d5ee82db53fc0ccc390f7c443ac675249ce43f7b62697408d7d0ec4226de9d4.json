{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as THREE from 'three';\nfunction InfiniteGridHelper(size = 10, divisions = 100, color1 = new THREE.Color('white'), color2 = new THREE.Color('black')) {\n  const group = new THREE.Group();\n\n  // Create base grid\n  const baseGrid = new THREE.GridHelper(size, divisions, color1, color2);\n  group.add(baseGrid);\n\n  // Create thicker lines for every fifth line\n  const thickLineSize = size / divisions * 5;\n  for (let i = -size / 2; i <= size / 2; i += thickLineSize) {\n    const lineGeometry = new THREE.Geometry();\n    lineGeometry.vertices.push(new THREE.Vector3(-size / 2, 0, i));\n    lineGeometry.vertices.push(new THREE.Vector3(size / 2, 0, i));\n    lineGeometry.vertices.push(new THREE.Vector3(i, 0, -size / 2));\n    lineGeometry.vertices.push(new THREE.Vector3(i, 0, size / 2));\n    const lineMaterial = new THREE.LineBasicMaterial({\n      color: color2,\n      linewidth: 2\n    });\n    const line = new THREE.Line(lineGeometry, lineMaterial);\n    group.add(line);\n  }\n  return group;\n}\nexport default InfiniteGridHelper;","map":{"version":3,"names":["THREE","InfiniteGridHelper","size","divisions","color1","Color","color2","group","Group","baseGrid","GridHelper","add","thickLineSize","i","lineGeometry","Geometry","vertices","push","Vector3","lineMaterial","LineBasicMaterial","color","linewidth","line","Line"],"sources":["/Users/olliearrison/Desktop/v1/src/components/InfiniteGridHelper.js"],"sourcesContent":["import * as THREE from 'three';\n\nfunction InfiniteGridHelper(size = 10, divisions = 100, color1 = new THREE.Color('white'), color2 = new THREE.Color('black')) {\n    const group = new THREE.Group();\n\n    // Create base grid\n    const baseGrid = new THREE.GridHelper(size, divisions, color1, color2);\n    group.add(baseGrid);\n\n    // Create thicker lines for every fifth line\n    const thickLineSize = size / divisions * 5;\n    for(let i = -size / 2; i <= size / 2; i += thickLineSize) {\n        const lineGeometry = new THREE.Geometry();\n        lineGeometry.vertices.push(new THREE.Vector3(-size / 2, 0, i));\n        lineGeometry.vertices.push(new THREE.Vector3(size / 2, 0, i));\n        lineGeometry.vertices.push(new THREE.Vector3(i, 0, -size / 2));\n        lineGeometry.vertices.push(new THREE.Vector3(i, 0, size / 2));\n\n        const lineMaterial = new THREE.LineBasicMaterial({ color: color2, linewidth: 2 });\n        const line = new THREE.Line(lineGeometry, lineMaterial);\n        group.add(line);\n    }\n\n    return group;\n}\n\nexport default InfiniteGridHelper;\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,kBAAkBA,CAACC,IAAI,GAAG,EAAE,EAAEC,SAAS,GAAG,GAAG,EAAEC,MAAM,GAAG,IAAIJ,KAAK,CAACK,KAAK,CAAC,OAAO,CAAC,EAAEC,MAAM,GAAG,IAAIN,KAAK,CAACK,KAAK,CAAC,OAAO,CAAC,EAAE;EAC1H,MAAME,KAAK,GAAG,IAAIP,KAAK,CAACQ,KAAK,CAAC,CAAC;;EAE/B;EACA,MAAMC,QAAQ,GAAG,IAAIT,KAAK,CAACU,UAAU,CAACR,IAAI,EAAEC,SAAS,EAAEC,MAAM,EAAEE,MAAM,CAAC;EACtEC,KAAK,CAACI,GAAG,CAACF,QAAQ,CAAC;;EAEnB;EACA,MAAMG,aAAa,GAAGV,IAAI,GAAGC,SAAS,GAAG,CAAC;EAC1C,KAAI,IAAIU,CAAC,GAAG,CAACX,IAAI,GAAG,CAAC,EAAEW,CAAC,IAAIX,IAAI,GAAG,CAAC,EAAEW,CAAC,IAAID,aAAa,EAAE;IACtD,MAAME,YAAY,GAAG,IAAId,KAAK,CAACe,QAAQ,CAAC,CAAC;IACzCD,YAAY,CAACE,QAAQ,CAACC,IAAI,CAAC,IAAIjB,KAAK,CAACkB,OAAO,CAAC,CAAChB,IAAI,GAAG,CAAC,EAAE,CAAC,EAAEW,CAAC,CAAC,CAAC;IAC9DC,YAAY,CAACE,QAAQ,CAACC,IAAI,CAAC,IAAIjB,KAAK,CAACkB,OAAO,CAAChB,IAAI,GAAG,CAAC,EAAE,CAAC,EAAEW,CAAC,CAAC,CAAC;IAC7DC,YAAY,CAACE,QAAQ,CAACC,IAAI,CAAC,IAAIjB,KAAK,CAACkB,OAAO,CAACL,CAAC,EAAE,CAAC,EAAE,CAACX,IAAI,GAAG,CAAC,CAAC,CAAC;IAC9DY,YAAY,CAACE,QAAQ,CAACC,IAAI,CAAC,IAAIjB,KAAK,CAACkB,OAAO,CAACL,CAAC,EAAE,CAAC,EAAEX,IAAI,GAAG,CAAC,CAAC,CAAC;IAE7D,MAAMiB,YAAY,GAAG,IAAInB,KAAK,CAACoB,iBAAiB,CAAC;MAAEC,KAAK,EAAEf,MAAM;MAAEgB,SAAS,EAAE;IAAE,CAAC,CAAC;IACjF,MAAMC,IAAI,GAAG,IAAIvB,KAAK,CAACwB,IAAI,CAACV,YAAY,EAAEK,YAAY,CAAC;IACvDZ,KAAK,CAACI,GAAG,CAACY,IAAI,CAAC;EACnB;EAEA,OAAOhB,KAAK;AAChB;AAEA,eAAeN,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}