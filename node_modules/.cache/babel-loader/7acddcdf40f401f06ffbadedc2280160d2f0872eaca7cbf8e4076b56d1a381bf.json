{"ast":null,"code":"import * as THREE from 'three';\nimport InfiniteGridHelper from \"./InfiniteGridHelper.js\";\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\nimport { renderer, camera, scene, canvas, frames, drawRenderer } from '../App.vue';\nimport { canvasIndex } from './DrawingInput.vue';\nexport let grid = InfiniteGridHelper();\nexport let background = new THREE.Object3D();\nexport default {\n  name: 'GridBackground',\n  props: {\n    cameraPosition: {\n      type: Object,\n      required: true\n    },\n    cameraAngle: {\n      type: Object,\n      required: true\n    }\n  },\n  mounted() {\n    // Create a renderer\n    renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    drawRenderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    drawRenderer.setPixelRatio(window.devicePixelRatio);\n    let rendererElement = document.getElementById('rendererElement');\n    let drawRendererElement = document.getElementById('drawRendererElement');\n    rendererElement.appendChild(renderer.domElement);\n    drawRendererElement.appendChild(drawRenderer.domElement);\n\n    //document.body.appendChild(renderer.domElement);\n    //document.body.appendChild(drawRenderer.domElement);\n    // Create a camera\n\n    //camera = camera;\n    camera.rotation.order = \"XYZ\";\n    camera.position.set(this.cameraPosition.x, this.cameraPosition.y, this.cameraPosition.z);\n    camera.rotation.set(new THREE.Euler(this.cameraAngle.x, this.cameraAngle.y, this.cameraAngle.z));\n    renderer.setClearColor(new THREE.Color(0xFFFFFF));\n    //renderer.setClearAlpha(0);\n\n    scene.add(grid);\n    const loader = new GLTFLoader();\n    loader.load('./model.glb', function (gltf) {\n      console.log(\"getting model\");\n      background = gltf.scene;\n    }, undefined, function (error) {\n      console.error(error);\n    });\n\n    //let rotationSpeed = 0.01; // Initial rotation speed\n    const self = this;\n    function animate() {\n      // Rotate the cube\n\n      camera.position.copy(self.cameraPosition);\n      camera.rotation.set(self.cameraAngle.x, self.cameraAngle.y, self.cameraAngle.z);\n      canvas[canvasIndex].rotation.set(self.cameraAngle.x, self.cameraAngle.y, self.cameraAngle.z);\n      const frontVector = new THREE.Vector3(0, 0, 4); // Direction in front of the camera\n      const canvasPosition = camera.position.clone().add(camera.getWorldDirection(new THREE.Vector3()).multiplyScalar(frontVector.z));\n      canvas[canvasIndex].position.copy(canvasPosition);\n      renderer.render(scene, camera);\n      drawRenderer.render(frames.getFrameScene().add(canvas[canvasIndex]).add(background), camera);\n      frames.getFrameScene().remove(canvas[canvasIndex]);\n      requestAnimationFrame(animate);\n    }\n    this.windowResizeHandler();\n    animate();\n    window.addEventListener('resize', this.windowResizeHandler);\n  },\n  beforeUnmount() {\n    window.removeEventListener('resize', this.windowResizeHandler);\n  },\n  methods: {\n    windowResizeHandler() {\n      const width = this.$el.clientWidth;\n      const height = this.$el.clientHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n      drawRenderer.setSize(width, height);\n    }\n  }\n};","map":{"version":3,"names":["THREE","InfiniteGridHelper","GLTFLoader","renderer","camera","scene","canvas","frames","drawRenderer","canvasIndex","grid","background","Object3D","name","props","cameraPosition","type","Object","required","cameraAngle","mounted","setSize","$el","clientWidth","clientHeight","setPixelRatio","window","devicePixelRatio","rendererElement","document","getElementById","drawRendererElement","appendChild","domElement","rotation","order","position","set","x","y","z","Euler","setClearColor","Color","add","loader","load","gltf","console","log","undefined","error","self","animate","copy","frontVector","Vector3","canvasPosition","clone","getWorldDirection","multiplyScalar","render","getFrameScene","remove","requestAnimationFrame","windowResizeHandler","addEventListener","beforeUnmount","removeEventListener","methods","width","height","aspect","updateProjectionMatrix"],"sources":["C:\\Users\\peopl\\Documents\\Arduino\\6d2\\SURA\\src\\components\\GridBackground.vue"],"sourcesContent":["<template>\r\n    <div class=\"grid\">\r\n        <div id=\"rendererElement\" class=\"renderer\"></div>\r\n        <div id=\"drawRendererElement\" class=\"renderer\"></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport * as THREE from 'three';\r\nimport InfiniteGridHelper from \"./InfiniteGridHelper.js\";\r\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\r\nimport { renderer, camera, scene, canvas, frames, drawRenderer } from '../App.vue';\r\nimport { canvasIndex } from './DrawingInput.vue';\r\n\r\nexport let grid = InfiniteGridHelper();\r\nexport let background = new THREE.Object3D();\r\n\r\nexport default {\r\n  name: 'GridBackground',\r\n  props: {\r\n    cameraPosition: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    cameraAngle: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  mounted(){\r\n\r\n    // Create a renderer\r\n    renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n    drawRenderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\r\n    drawRenderer.setPixelRatio(window.devicePixelRatio);\r\n\r\n    let rendererElement = document.getElementById('rendererElement');\r\n    let drawRendererElement = document.getElementById('drawRendererElement');\r\n    rendererElement.appendChild(renderer.domElement);\r\n    drawRendererElement.appendChild(drawRenderer.domElement);\r\n\r\n    //document.body.appendChild(renderer.domElement);\r\n    //document.body.appendChild(drawRenderer.domElement);\r\n    // Create a camera\r\n    \r\n    //camera = camera;\r\n    camera.rotation.order = \"XYZ\";\r\n    camera.position.set(this.cameraPosition.x, this.cameraPosition.y, this.cameraPosition.z);\r\n    camera.rotation.set(new THREE.Euler(this.cameraAngle.x, this.cameraAngle.y, this.cameraAngle.z));\r\n\r\n    \r\n    renderer.setClearColor(new THREE.Color(0xFFFFFF));\r\n    //renderer.setClearAlpha(0);\r\n\r\n\r\n    scene.add(grid);\r\n\r\n    \r\n\r\n    const loader = new GLTFLoader();\r\n\r\n    loader.load( './model.glb', function ( gltf ) {\r\n      console.log(\"getting model\");\r\n\r\n      background = gltf.scene\r\n\r\n    }, undefined, function ( error ) {\r\n\r\n      console.error( error );\r\n\r\n    } );\r\n\r\n    //let rotationSpeed = 0.01; // Initial rotation speed\r\n    const self = this;\r\n    function animate() {\r\n        \r\n\r\n        // Rotate the cube\r\n\r\n        camera.position.copy(self.cameraPosition);\r\n        camera.rotation.set(self.cameraAngle.x, self.cameraAngle.y, self.cameraAngle.z);\r\n        canvas[canvasIndex].rotation.set(self.cameraAngle.x, self.cameraAngle.y, self.cameraAngle.z);\r\n\r\n        const frontVector = new THREE.Vector3(0, 0, 4); // Direction in front of the camera\r\n        const canvasPosition = camera.position.clone().add(camera.getWorldDirection(new THREE.Vector3()).multiplyScalar(frontVector.z));\r\n        canvas[canvasIndex].position.copy(canvasPosition);\r\n\r\n        renderer.render(scene, camera);\r\n        drawRenderer.render(frames.getFrameScene().add(canvas[canvasIndex]).add(background), camera);\r\n        frames.getFrameScene().remove(canvas[canvasIndex]);\r\n        \r\n        requestAnimationFrame(animate);\r\n        \r\n        \r\n    }\r\n    this.windowResizeHandler();\r\n    animate();\r\n    window.addEventListener('resize', this.windowResizeHandler);\r\n  }, \r\n  beforeUnmount() {\r\n    window.removeEventListener('resize', this.windowResizeHandler);\r\n},\r\n  methods: {\r\n    windowResizeHandler() {\r\n        const width = this.$el.clientWidth;\r\n        const height = this.$el.clientHeight;\r\n\r\n        camera.aspect = width / height;\r\n        camera.updateProjectionMatrix();\r\n        renderer.setSize(width, height);\r\n        drawRenderer.setSize(width, height);\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n.grid {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n}\r\n\r\n.renderer {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n}\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}