{"ast":null,"code":"import \"core-js/modules/esnext.typed-array.to-reversed.js\";\nimport \"core-js/modules/esnext.typed-array.to-sorted.js\";\nimport \"core-js/modules/esnext.typed-array.with.js\";\nimport * as THREE from \"three\";\nimport { MeshLine, MeshLineMaterial, MeshLineRaycast } from \"three.meshline\";\nimport { scene, camera, plane } from \"../App.vue\";\nlet draw = {\n  l: undefined,\n  draw: class {\n    constructor(stroke) {\n      this.stroke = stroke;\n      this.line = new MeshLine();\n      this.geometry = new THREE.BufferGeometry();\n      this.vertices = [];\n      this.geometry.setAttribute(\"position\", new THREE.BufferAttribute(new Float32Array(this.vertices), 3));\n      this.material = new MeshLineMaterial({\n        lineWidth: this.stroke.show_stroke ? this.stroke.lineWidth : .01,\n        sizeAttenuation: 1,\n        color: this.stroke.show_stroke ? this.stroke.color : 0xFFFFFF,\n        side: THREE.DoubleSide,\n        fog: true,\n        wireframe: false,\n        alphaTest: 0.9,\n        blending: THREE.NormalBlending,\n        transparent: false,\n        resolution: new THREE.Vector2(window.innerWidth, window.innerHeight),\n        repeat: new THREE.Vector2(.1, .1),\n        opacity: 1\n      });\n      this.mesh = new THREE.Mesh(this.line.geometry, this.material);\n      this.mesh.raycast = MeshLineRaycast;\n    }\n    translate(x, y, z) {\n      if (z < 0) {\n        console.log(\"z < 0\");\n      }\n      // Translation from stackoverflow\n      //console.log(x, y, z);\n      var vec = new THREE.Vector3();\n      var pos = new THREE.Vector3();\n      vec.set(x / window.innerWidth * 2 - 1, -(y / window.innerHeight) * 2 + 1, .5);\n      const raycaster = new THREE.Raycaster();\n      raycaster.setFromCamera(vec, camera);\n      var interse;\n      vec.unproject(camera);\n      vec.sub(camera.position).normalize();\n      var distance = -camera.position.z / vec.z;\n      pos.copy(camera.position).add(vec.multiplyScalar(distance));\n      return pos;\n    }\n    start() {\n      scene.add(this.mesh);\n    }\n    move(x, y, z) {\n      var v3 = this.translate(x, y, z);\n      this.vertices = [...this.vertices, v3.x, v3.y, v3.z];\n      this.geometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(this.vertices), 3));\n      this.line.setGeometry(this.geometry); // This updates the MeshLine's geometry\n    }\n\n    end() {\n      this.geometry.computeBoundingBox();\n    }\n  },\n  onStart: function (x, y, z, stroke) {\n    this.l = new this.draw(stroke);\n    this.l.move(x, y, z);\n    this.l.start();\n  },\n  onMove: function (x, y, z) {\n    this.l.move(x, y, z);\n  },\n  onEnd: function () {\n    this.l.end();\n  }\n};\nexport { draw };","map":{"version":3,"names":["THREE","MeshLine","MeshLineMaterial","MeshLineRaycast","scene","camera","plane","draw","l","undefined","constructor","stroke","line","geometry","BufferGeometry","vertices","setAttribute","BufferAttribute","Float32Array","material","lineWidth","show_stroke","sizeAttenuation","color","side","DoubleSide","fog","wireframe","alphaTest","blending","NormalBlending","transparent","resolution","Vector2","window","innerWidth","innerHeight","repeat","opacity","mesh","Mesh","raycast","translate","x","y","z","console","log","vec","Vector3","pos","set","raycaster","Raycaster","setFromCamera","interse","unproject","sub","position","normalize","distance","copy","add","multiplyScalar","start","move","v3","setGeometry","end","computeBoundingBox","onStart","onMove","onEnd"],"sources":["/Users/olliearrison/Desktop/SURA/src/components/DrawHelper.js"],"sourcesContent":["import * as THREE from \"three\";\nimport { MeshLine, MeshLineMaterial, MeshLineRaycast } from \"three.meshline\";\nimport { scene, camera, plane } from \"../App.vue\";\n\nlet draw = {\n    l: undefined,\n    draw: class {\n        constructor(stroke) {\n            this.stroke = stroke;\n            this.line = new MeshLine();\n            this.geometry = new THREE.BufferGeometry();\n            this.vertices = [];\n            this.geometry.setAttribute(\"position\", new THREE.BufferAttribute(new Float32Array(this.vertices), 3));\n            this.material = new MeshLineMaterial({\n                lineWidth: this.stroke.show_stroke ? this.stroke.lineWidth : .01,\n                sizeAttenuation: 1,\n                color: this.stroke.show_stroke ? this.stroke.color : 0xFFFFFF,\n                side: THREE.DoubleSide,\n                fog: true,\n                wireframe: false,\n                alphaTest: 0.9,\n                blending: THREE.NormalBlending,\n                transparent: false,\n                resolution: new THREE.Vector2(window.innerWidth, window.innerHeight),\n                repeat: new THREE.Vector2(.1, .1),\n                opacity: 1,\n            });\n            this.mesh = new THREE.Mesh(this.line.geometry, this.material);\n            this.mesh.raycast = MeshLineRaycast;\n        }\n\n        translate(x, y, z) {\n            if (z < 0) {\n                console.log(\"z < 0\");\n            }\n            // Translation from stackoverflow\n            //console.log(x, y, z);\n            var vec = new THREE.Vector3();\n            var pos = new THREE.Vector3();\n\n            vec.set(\n                ( x / window.innerWidth ) * 2 - 1,\n                - ( y / window.innerHeight ) * 2 + 1,\n                .5 );\n\n            const raycaster = new THREE.Raycaster();\n            raycaster.setFromCamera( vec, camera );\n            var interse\n\n            vec.unproject( camera );\n\n            vec.sub( camera.position ).normalize();\n\n            var distance = - camera.position.z / vec.z;\n\n            pos.copy( camera.position ).add( vec.multiplyScalar( distance ) );\n\n            return pos;\n                    \n        }\n\n        start() {\n            scene.add(this.mesh);\n        }\n\n        move(x, y, z) {\n            var v3 = this.translate(x, y, z);\n            this.vertices = [...this.vertices, v3.x, v3.y, v3.z];\n            this.geometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(this.vertices), 3));\n            this.line.setGeometry(this.geometry);  // This updates the MeshLine's geometry\n        }\n\n        end() {\n            this.geometry.computeBoundingBox();\n        }\n\n\n    },\n    onStart: function (x, y, z, stroke) {\n        this.l = new this.draw(stroke);\n        this.l.move(x, y, z);\n        this.l.start();\n    },\n    onMove: function (x, y, z) {\n        this.l.move(x, y, z);\n    },\n    onEnd: function () {\n        this.l.end();\n    },\n}\n\nexport { draw }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}