{"ast":null,"code":"import * as THREE from 'three';\nconst scene = new THREE.Scene();\n\n// Create a renderer\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\n// Create a camera\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\ncamera.position.z = 2;\ncamera.position.x = 0;\nrenderer.setClearColor(new THREE.Color(0x000000));\n\n// Create a geometry\nconst geometry = new THREE.BoxGeometry(1, 1, 1);\nconst edges = new THREE.EdgesGeometry(geometry);\n\n// Create a material\n\nconst lineMaterial = new THREE.LineBasicMaterial({\n  color: 0x00ff00\n});\n\n// Create a mesh\n\nconst cube = new THREE.LineSegments(edges, lineMaterial);\n\n// Add the mesh to the scene\n\nscene.add(cube);\n\n// Vertex Shader\nconst vertexShader = `\nvarying vec3 vUv; \n\nvoid main() {\n  vUv = position; \n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);\n}\n`;\n\n// Fragment Shader\nconst fragmentShader = `\nvarying vec3 vUv;\nuniform float scale;\n\nvoid main() {\n  vec2 grid = abs(fract(vUv.xz * scale) - .2);\n  float line = min(grid.y, grid.x);\n  \n  vec3 color = vec3(1.0 - min(line, 5.0));\n  float alpha = clamp(line * .0, 0.0, 1.0);  // Use line value to set alpha\n  \n  gl_FragColor = vec4(color, alpha);\n}\n`;\n\n// Shader Material\nconst shaderMaterial = new THREE.ShaderMaterial({\n  side: THREE.DoubleSide,\n  uniforms: {\n    scale: {\n      value: 5.0\n    } // Modify this to adjust the grid scale\n  },\n\n  transparent: true,\n  vertexShader: vertexShader,\n  fragmentShader: fragmentShader\n});\nconst planeGeometry = new THREE.PlaneGeometry(100, 100, 10, 10);\nconst grid = new THREE.Mesh(planeGeometry, shaderMaterial);\nscene.add(grid);\nlet rotationSpeed = 0.01; // Initial rotation speed\n\n// Create a button\nconst button = document.createElement('button');\nbutton.textContent = 'Increase Speed';\ndocument.body.appendChild(button);\n\n// Add event listener to the button\nbutton.addEventListener('click', () => {\n  rotationSpeed += 0.01; // Increase the rotation speed by 0.01\n});\n\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // Rotate the cube\n  cube.rotation.x += rotationSpeed;\n  cube.rotation.y += rotationSpeed;\n  grid.rotation.x += .001;\n\n  // Render the scene with the camera\n  renderer.render(scene, camera);\n}\nanimate();\nimport HelloWorld from './components/HelloWorld.vue';\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld\n  }\n};","map":{"version":3,"names":["THREE","scene","Scene","renderer","WebGLRenderer","setSize","window","innerWidth","innerHeight","document","body","appendChild","domElement","camera","PerspectiveCamera","position","z","x","setClearColor","Color","geometry","BoxGeometry","edges","EdgesGeometry","lineMaterial","LineBasicMaterial","color","cube","LineSegments","add","vertexShader","fragmentShader","shaderMaterial","ShaderMaterial","side","DoubleSide","uniforms","scale","value","transparent","planeGeometry","PlaneGeometry","grid","Mesh","rotationSpeed","button","createElement","textContent","addEventListener","animate","requestAnimationFrame","rotation","y","render","HelloWorld","name","components"],"sources":["/Users/olliearrison/Desktop/v1/src/App.vue"],"sourcesContent":["<template>\n  <HelloWorld msg=\"Welcome to Your Vue.js App\"/>\n</template>\n\n<script>\nimport * as THREE from 'three';\n\n\nconst scene = new THREE.Scene();\n\n// Create a renderer\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\n// Create a camera\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\ncamera.position.z = 2;\ncamera.position.x = 0;\n\n\nrenderer.setClearColor(new THREE.Color(0x000000));\n\n\n// Create a geometry\nconst geometry = new THREE.BoxGeometry(1, 1, 1);\n\nconst edges = new THREE.EdgesGeometry(geometry);\n\n// Create a material\n\nconst lineMaterial = new THREE.LineBasicMaterial({ color: 0x00ff00 });\n\n// Create a mesh\n\nconst cube = new THREE.LineSegments(edges, lineMaterial);\n\n// Add the mesh to the scene\n\n\nscene.add(cube);\n\n// Vertex Shader\nconst vertexShader = `\nvarying vec3 vUv; \n\nvoid main() {\n  vUv = position; \n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);\n}\n`;\n\n// Fragment Shader\nconst fragmentShader = `\nvarying vec3 vUv;\nuniform float scale;\n\nvoid main() {\n  vec2 grid = abs(fract(vUv.xz * scale) - .2);\n  float line = min(grid.y, grid.x);\n  \n  vec3 color = vec3(1.0 - min(line, 5.0));\n  float alpha = clamp(line * .0, 0.0, 1.0);  // Use line value to set alpha\n  \n  gl_FragColor = vec4(color, alpha);\n}\n`;\n\n\n// Shader Material\nconst shaderMaterial = new THREE.ShaderMaterial({\n  side: THREE.DoubleSide,\n  uniforms: {\n    scale: { value: 5.0 }, // Modify this to adjust the grid scale\n  },\n  transparent: true,\n  vertexShader: vertexShader,\n  fragmentShader: fragmentShader,\n});\n\nconst planeGeometry = new THREE.PlaneGeometry(100, 100, 10, 10);\nconst grid = new THREE.Mesh(planeGeometry, shaderMaterial);\nscene.add(grid);\n\nlet rotationSpeed = 0.01; // Initial rotation speed\n\n// Create a button\nconst button = document.createElement('button');\nbutton.textContent = 'Increase Speed';\ndocument.body.appendChild(button);\n\n// Add event listener to the button\nbutton.addEventListener('click', () => {\n  rotationSpeed += 0.01; // Increase the rotation speed by 0.01\n});\n\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // Rotate the cube\n  cube.rotation.x += rotationSpeed;\n  cube.rotation.y += rotationSpeed;\n\n  grid.rotation.x += .001;\n\n  // Render the scene with the camera\n  renderer.render(scene, camera);\n}\n\nanimate();\n\n\n\nimport HelloWorld from './components/HelloWorld.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld\n  }\n}\n\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"],"mappings":"AAKA,OAAO,KAAKA,KAAI,MAAO,OAAO;AAG9B,MAAMC,KAAI,GAAI,IAAID,KAAK,CAACE,KAAK,CAAC,CAAC;;AAE/B;AACA,MAAMC,QAAO,GAAI,IAAIH,KAAK,CAACI,aAAa,CAAC,CAAC;AAC1CD,QAAQ,CAACE,OAAO,CAACC,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;AACvDC,QAAQ,CAACC,IAAI,CAACC,WAAW,CAACR,QAAQ,CAACS,UAAU,CAAC;;AAE9C;AACA,MAAMC,MAAK,GAAI,IAAIb,KAAK,CAACc,iBAAiB,CAAC,EAAE,EAAER,MAAM,CAACC,UAAS,GAAID,MAAM,CAACE,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC;AACjGK,MAAM,CAACE,QAAQ,CAACC,CAAA,GAAI,CAAC;AACrBH,MAAM,CAACE,QAAQ,CAACE,CAAA,GAAI,CAAC;AAGrBd,QAAQ,CAACe,aAAa,CAAC,IAAIlB,KAAK,CAACmB,KAAK,CAAC,QAAQ,CAAC,CAAC;;AAGjD;AACA,MAAMC,QAAO,GAAI,IAAIpB,KAAK,CAACqB,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAE/C,MAAMC,KAAI,GAAI,IAAItB,KAAK,CAACuB,aAAa,CAACH,QAAQ,CAAC;;AAE/C;;AAEA,MAAMI,YAAW,GAAI,IAAIxB,KAAK,CAACyB,iBAAiB,CAAC;EAAEC,KAAK,EAAE;AAAS,CAAC,CAAC;;AAErE;;AAEA,MAAMC,IAAG,GAAI,IAAI3B,KAAK,CAAC4B,YAAY,CAACN,KAAK,EAAEE,YAAY,CAAC;;AAExD;;AAGAvB,KAAK,CAAC4B,GAAG,CAACF,IAAI,CAAC;;AAEf;AACA,MAAMG,YAAW,GAAI;AACrB;;AAEA;;;AAGA;AACA,CAAC;;AAED;AACA,MAAMC,cAAa,GAAI;AACvB;AACA;;AAEA;;;;;;;;AAQA;AACA,CAAC;;AAGD;AACA,MAAMC,cAAa,GAAI,IAAIhC,KAAK,CAACiC,cAAc,CAAC;EAC9CC,IAAI,EAAElC,KAAK,CAACmC,UAAU;EACtBC,QAAQ,EAAE;IACRC,KAAK,EAAE;MAAEC,KAAK,EAAE;IAAI,CAAC,CAAE;EACzB,CAAC;;EACDC,WAAW,EAAE,IAAI;EACjBT,YAAY,EAAEA,YAAY;EAC1BC,cAAc,EAAEA;AAClB,CAAC,CAAC;AAEF,MAAMS,aAAY,GAAI,IAAIxC,KAAK,CAACyC,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC;AAC/D,MAAMC,IAAG,GAAI,IAAI1C,KAAK,CAAC2C,IAAI,CAACH,aAAa,EAAER,cAAc,CAAC;AAC1D/B,KAAK,CAAC4B,GAAG,CAACa,IAAI,CAAC;AAEf,IAAIE,aAAY,GAAI,IAAI,EAAE;;AAE1B;AACA,MAAMC,MAAK,GAAIpC,QAAQ,CAACqC,aAAa,CAAC,QAAQ,CAAC;AAC/CD,MAAM,CAACE,WAAU,GAAI,gBAAgB;AACrCtC,QAAQ,CAACC,IAAI,CAACC,WAAW,CAACkC,MAAM,CAAC;;AAEjC;AACAA,MAAM,CAACG,gBAAgB,CAAC,OAAO,EAAE,MAAM;EACrCJ,aAAY,IAAK,IAAI,EAAE;AACzB,CAAC,CAAC;;AAEF,SAASK,OAAOA,CAAA,EAAG;EACjBC,qBAAqB,CAACD,OAAO,CAAC;;EAE9B;EACAtB,IAAI,CAACwB,QAAQ,CAAClC,CAAA,IAAK2B,aAAa;EAChCjB,IAAI,CAACwB,QAAQ,CAACC,CAAA,IAAKR,aAAa;EAEhCF,IAAI,CAACS,QAAQ,CAAClC,CAAA,IAAK,IAAI;;EAEvB;EACAd,QAAQ,CAACkD,MAAM,CAACpD,KAAK,EAAEY,MAAM,CAAC;AAChC;AAEAoC,OAAO,CAAC,CAAC;AAIT,OAAOK,UAAS,MAAO,6BAA4B;AAEnD,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IACVF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}