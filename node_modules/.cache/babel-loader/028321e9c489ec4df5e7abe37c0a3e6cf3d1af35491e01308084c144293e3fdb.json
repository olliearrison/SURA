{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"arc\",\n  ref: \"arcball\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1"],"sources":["C:\\Users\\peopl\\Documents\\Arduino\\6d2\\SURA\\src\\components\\ArcballControl.vue"],"sourcesContent":["<template>\r\n    <div class=\"arc\" ref=\"arcball\"></div>\r\n</template>\r\n\r\n<script>\r\nimport * as THREE from 'three';\r\nimport { ArcballControls } from 'three/addons/controls/ArcballControls.js';\r\nimport { arcRenderer, camera, frames } from '../App.vue';\r\n\r\n//export let renderer = new THREE.WebGLRenderer({alpha: true, antialias: true});\r\n\r\nlet controls, scene;\r\n\r\nexport default {\r\n  name: 'ArcballControl',\r\n  props: {\r\n    cameraPosition: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    cameraAngle: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  /*\r\n  data() {\r\n    return {\r\n      renderer: renderer,\r\n      controls: null,\r\n      scene: null\r\n    };\r\n  },\r\n  */\r\n  mounted() {\r\n    \r\n    \r\n    arcRenderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\r\n    arcRenderer.setPixelRatio(window.devicePixelRatio);\r\n    //document.body.appendChild(renderer.domElement);\r\n    this.$el.appendChild(arcRenderer.domElement);\r\n\r\n    scene = new THREE.Scene();\r\n\r\n\r\n\r\n    controls = new ArcballControls( camera, arcRenderer.domElement, scene );\r\n    controls.target.set(10,1,0);\r\n\r\n    controls.addEventListener('change', this.handleCameraChange);\r\n\r\n\r\n    camera.position.set( 0, 0, 5 );\r\n    //camera.angle.set(0,0,0);\r\n    this.windowResizeHandler();\r\n    controls.update();\r\n    this.animate();\r\n    window.addEventListener('resize', this.windowResizeHandler);\r\n\r\n  },beforeUnmount() {\r\n    window.removeEventListener('resize', this.windowResizeHandler);\r\n    controls.removeEventListener('change', this.handleCameraChange);\r\n  },\r\n   methods: {\r\n    handleCameraChange() {\r\n      const cameraPosition = camera.position.clone();\r\n      const cameraAngle = camera.rotation.clone();\r\n\r\n\r\n      this.$emit('camera-updated', {\r\n        position: cameraPosition,\r\n        angle: cameraAngle\r\n      });\r\n\r\n      arcRenderer.render( scene, camera );\r\n\r\n    },\r\n\r\n    windowResizeHandler() {\r\n      const width = this.$el.clientWidth;\r\n      const height = this.$el.clientHeight;\r\n\r\n      arcRenderer.setSize(width, height);\r\n      arcRenderer.setPixelRatio(window.devicePixelRatio);\r\n    },\r\n    animate() {\r\n      requestAnimationFrame(this.animate);\r\n\r\n      if (!frames.play) {\r\n\r\n      const frontVector = new THREE.Vector3(0, 0, 4); // Direction in front of the camera\r\n      const canvasPosition = camera.position.clone().add(camera.getWorldDirection(new THREE.Vector3()).multiplyScalar(frontVector.z));\r\n      controls.target.copy(canvasPosition);\r\n\r\n\r\n      controls.update();\r\n      arcRenderer.render(scene, camera);\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.arc {\r\n  position: absolute;\r\n  top: 10%;\r\n  right: 5%;\r\n  width: 20%;\r\n  height: 20%;\r\n}\r\n</style>"],"mappings":";;EACSA,KAAK,EAAC,KAAK;EAACC,GAAG,EAAC;;;uBAArBC,mBAAA,CAAqC,OAArCC,UAAqC"},"metadata":{},"sourceType":"module","externalDependencies":[]}