{"ast":null,"code":"import * as THREE from 'three';\nfunction InfiniteGridHelper() {\n  const group = new THREE.Group();\n\n  // Create base grid\n  const baseGrid = new THREE.GridHelper(size, divisions, color1, color2);\n  group.add(baseGrid);\n\n  // Create thicker lines for every fifth line\n  const thickLineSize = size / divisions * 5;\n  for (let i = -size / 2; i <= size / 2; i += thickLineSize) {\n    const lineGeometry = new THREE.BufferGeometry().setFromPoints([new THREE.Vector3(-size / 2, 0, i), new THREE.Vector3(size / 2, 0, i), new THREE.Vector3(i, 0, -size / 2), new THREE.Vector3(i, 0, size / 2)]);\n    const lineMaterial = new THREE.LineBasicMaterial({\n      color: color2,\n      linewidth: 2\n    });\n    const line = new THREE.LineSegments(lineGeometry, lineMaterial);\n    group.add(line);\n  }\n  return group;\n}\nexport default InfiniteGridHelper;","map":{"version":3,"names":["THREE","InfiniteGridHelper","group","Group","baseGrid","GridHelper","size","divisions","color1","color2","add","thickLineSize","i","lineGeometry","BufferGeometry","setFromPoints","Vector3","lineMaterial","LineBasicMaterial","color","linewidth","line","LineSegments"],"sources":["/Users/olliearrison/Desktop/v1/src/components/InfiniteGridHelper.js"],"sourcesContent":["import * as THREE from 'three';\n\nfunction InfiniteGridHelper() {\n    const group = new THREE.Group();\n\n    // Create base grid\n    const baseGrid = new THREE.GridHelper(size, divisions, color1, color2);\n    group.add(baseGrid);\n\n    // Create thicker lines for every fifth line\n    const thickLineSize = size / divisions * 5;\n    for(let i = -size / 2; i <= size / 2; i += thickLineSize) {\n        const lineGeometry = new THREE.BufferGeometry().setFromPoints([\n            new THREE.Vector3(-size / 2, 0, i),\n            new THREE.Vector3(size / 2, 0, i),\n            new THREE.Vector3(i, 0, -size / 2),\n            new THREE.Vector3(i, 0, size / 2)\n        ]);\n\n        const lineMaterial = new THREE.LineBasicMaterial({ color: color2, linewidth: 2 });\n        const line = new THREE.LineSegments(lineGeometry, lineMaterial);\n        group.add(line);\n    }\n\n    return group;\n}\n\nexport default InfiniteGridHelper;\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,kBAAkBA,CAAA,EAAG;EAC1B,MAAMC,KAAK,GAAG,IAAIF,KAAK,CAACG,KAAK,CAAC,CAAC;;EAE/B;EACA,MAAMC,QAAQ,GAAG,IAAIJ,KAAK,CAACK,UAAU,CAACC,IAAI,EAAEC,SAAS,EAAEC,MAAM,EAAEC,MAAM,CAAC;EACtEP,KAAK,CAACQ,GAAG,CAACN,QAAQ,CAAC;;EAEnB;EACA,MAAMO,aAAa,GAAGL,IAAI,GAAGC,SAAS,GAAG,CAAC;EAC1C,KAAI,IAAIK,CAAC,GAAG,CAACN,IAAI,GAAG,CAAC,EAAEM,CAAC,IAAIN,IAAI,GAAG,CAAC,EAAEM,CAAC,IAAID,aAAa,EAAE;IACtD,MAAME,YAAY,GAAG,IAAIb,KAAK,CAACc,cAAc,CAAC,CAAC,CAACC,aAAa,CAAC,CAC1D,IAAIf,KAAK,CAACgB,OAAO,CAAC,CAACV,IAAI,GAAG,CAAC,EAAE,CAAC,EAAEM,CAAC,CAAC,EAClC,IAAIZ,KAAK,CAACgB,OAAO,CAACV,IAAI,GAAG,CAAC,EAAE,CAAC,EAAEM,CAAC,CAAC,EACjC,IAAIZ,KAAK,CAACgB,OAAO,CAACJ,CAAC,EAAE,CAAC,EAAE,CAACN,IAAI,GAAG,CAAC,CAAC,EAClC,IAAIN,KAAK,CAACgB,OAAO,CAACJ,CAAC,EAAE,CAAC,EAAEN,IAAI,GAAG,CAAC,CAAC,CACpC,CAAC;IAEF,MAAMW,YAAY,GAAG,IAAIjB,KAAK,CAACkB,iBAAiB,CAAC;MAAEC,KAAK,EAAEV,MAAM;MAAEW,SAAS,EAAE;IAAE,CAAC,CAAC;IACjF,MAAMC,IAAI,GAAG,IAAIrB,KAAK,CAACsB,YAAY,CAACT,YAAY,EAAEI,YAAY,CAAC;IAC/Df,KAAK,CAACQ,GAAG,CAACW,IAAI,CAAC;EACnB;EAEA,OAAOnB,KAAK;AAChB;AAEA,eAAeD,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}