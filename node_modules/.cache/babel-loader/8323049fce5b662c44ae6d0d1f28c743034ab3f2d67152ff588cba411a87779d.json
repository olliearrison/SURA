{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"grid\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"rendererElement\",\n  class: \"renderer\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"drawRendererElement\",\n  class: \"renderer\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_4 = [_hoisted_2, _hoisted_3];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_4);\n}","map":{"version":3,"names":["class","_createElementVNode","id","_hoisted_2","_hoisted_3","_createElementBlock","_hoisted_1","_hoisted_4"],"sources":["C:\\Users\\peopl\\Documents\\Arduino\\6d2\\SURA\\src\\components\\GridBackground.vue"],"sourcesContent":["<template>\r\n    <div class=\"grid\">\r\n        <div id=\"rendererElement\" class=\"renderer\"></div>\r\n        <div id=\"drawRendererElement\" class=\"renderer\"></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport * as THREE from 'three';\r\nimport InfiniteGridHelper from \"./InfiniteGridHelper.js\";\r\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\r\nimport { renderer, scene, canvas, frames, drawRenderer } from '../App.vue';\r\nimport { camera } from './Camera.js';\r\nimport { canvasIndex } from './DrawingInput.vue';\r\n\r\nexport let grid = InfiniteGridHelper();\r\nexport let background = new THREE.Object3D();\r\n\r\nexport default {\r\n  name: 'GridBackground',\r\n  props: {\r\n    cameraPosition: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    cameraAngle: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  mounted(){\r\n\r\n    // Create a renderer\r\n    renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n    drawRenderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\r\n    drawRenderer.setPixelRatio(window.devicePixelRatio);\r\n\r\n    let rendererElement = document.getElementById('rendererElement');\r\n    let drawRendererElement = document.getElementById('drawRendererElement');\r\n    rendererElement.appendChild(renderer.domElement);\r\n    drawRendererElement.appendChild(drawRenderer.domElement);\r\n\r\n    camera.rotation.order = \"XYZ\";\r\n    camera.position.set(this.cameraPosition.x, this.cameraPosition.y, this.cameraPosition.z);\r\n    camera.rotation.set(new THREE.Euler(this.cameraAngle.x, this.cameraAngle.y, this.cameraAngle.z));\r\n\r\n    \r\n    renderer.setClearColor(new THREE.Color(0xFFFFFF));\r\n\r\n    scene.add(grid);\r\n\r\n    \r\n\r\n    const loader = new GLTFLoader();\r\n\r\n    loader.load( './model.glb', function ( gltf ) {\r\n      console.log(\"getting model\");\r\n\r\n      background = gltf.scene\r\n\r\n    }, undefined, function ( error ) {\r\n\r\n      console.error( error );\r\n\r\n    } );\r\n\r\n    //let rotationSpeed = 0.01; // Initial rotation speed\r\n    const self = this;\r\n    function animate() {\r\n        \r\n\r\n        // Rotate the cube\r\n        if (frames.play){\r\n          //console.log(frames.getFrame().pos);\r\n\r\n          camera.position.copy(frames.currentPos);\r\n          const angle = frames.currentAngle;\r\n          camera.rotation.set(angle.x, angle.y, angle.z);\r\n\r\n\r\n        } else {\r\n          camera.position.copy(self.cameraPosition);\r\n          camera.rotation.set(self.cameraAngle.x, self.cameraAngle.y, self.cameraAngle.z);\r\n        }\r\n        canvas[canvasIndex].rotation.set(self.cameraAngle.x, self.cameraAngle.y, self.cameraAngle.z);\r\n\r\n        const frontVector = new THREE.Vector3(0, 0, 4); // Direction in front of the camera\r\n        const canvasPosition = camera.position.clone().add(camera.getWorldDirection(new THREE.Vector3()).multiplyScalar(frontVector.z));\r\n        canvas[canvasIndex].position.copy(canvasPosition);\r\n\r\n        renderer.render(scene, camera);\r\n\r\n        const s = frames.getFrameScene().add(background);\r\n        let onionSkin = new THREE.Scene();\r\n\r\n        if (!frames.play){\r\n          s.add(canvas[canvasIndex]);\r\n          if (frames.onion){\r\n            onionSkin = self.getOnion();\r\n            s.add(onionSkin)\r\n          }\r\n        }\r\n\r\n        \r\n\r\n        drawRenderer.render(s, camera);\r\n\r\n        s.remove(background);\r\n        if (frames.onion){\r\n            s.remove(onionSkin);\r\n        }\r\n        frames.getFrameScene().remove(canvas[canvasIndex]);\r\n        \r\n        requestAnimationFrame(animate);\r\n        \r\n        \r\n    }\r\n    this.windowResizeHandler();\r\n    animate();\r\n    window.addEventListener('resize', this.windowResizeHandler);\r\n  }, \r\n  beforeUnmount() {\r\n    window.removeEventListener('resize', this.windowResizeHandler);\r\n},\r\n  methods: {\r\n    windowResizeHandler() {\r\n        const width = this.$el.clientWidth;\r\n        const height = this.$el.clientHeight;\r\n\r\n        camera.aspect = width / height;\r\n        camera.updateProjectionMatrix();\r\n        renderer.setSize(width, height);\r\n        drawRenderer.setSize(width, height);\r\n    },\r\n    addTransparency(scene, value){\r\n        scene.traverse(function (child) {\r\n        if (child instanceof THREE.Mesh) {\r\n          if (child.material instanceof Array) {\r\n            // Handle multi-material objects\r\n            child.material.forEach(function (material) {\r\n              material.opacity = 0.5;\r\n              material.transparent = true; // Needed for the opacity to take effect\r\n            });\r\n          } else {\r\n            child.material.opacity = value;\r\n            child.material.transparent = true; // Needed for the opacity to take effect\r\n          }\r\n        }\r\n      });\r\n\r\n    },\r\n    getOnion(){\r\n      const before = Math.min(3, frames.index);\r\n      const after = Math.min(3, frames.frameList.length - frames.index);\r\n\r\n      console.log(before, after);\r\n\r\n      const s = new THREE.Scene();\r\n\r\n      for (let i = 0; i < before; i++){\r\n        let index = frames.index - i - 1;\r\n        let opacity = (4 - i)/8\r\n        const frameScene = frames.getFrameAtIndex(index).scene.clone();\r\n        this.addTransparency(frameScene, opacity);\r\n        s.add(frameScene);\r\n      }\r\n\r\n      return s;\r\n\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n.grid {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n}\r\n\r\n.renderer {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n}\r\n\r\n</style>"],"mappings":";;EACSA,KAAK,EAAC;AAAM;gCACbC,mBAAA,CAAiD;EAA5CC,EAAE,EAAC,iBAAiB;EAACF,KAAK,EAAC;;gCAChCC,mBAAA,CAAqD;EAAhDC,EAAE,EAAC,qBAAqB;EAACF,KAAK,EAAC;;oBADpCG,UAAiD,EACjDC,UAAqD,C;;uBAFzDC,mBAAA,CAGM,OAHNC,UAGM,EAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}