{"ast":null,"code":"import * as THREE from 'three';\nconst scene = new THREE.Scene();\n\n// Create a renderer\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\n// Create a camera\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\ncamera.position.z = 2;\ncamera.position.x = 0;\nrenderer.setClearColor(new THREE.Color(0x000000));\n\n// Create a geometry\nconst geometry = new THREE.BoxGeometry(1, 1, 1);\nconst edges = new THREE.EdgesGeometry(geometry);\n\n// Create a material\n\nconst lineMaterial = new THREE.LineBasicMaterial({\n  color: 0x00ff00\n});\n\n// Create a mesh\n\nconst size = 100; // Size of the grid\nconst divisions = 20; // Number of divisions\nconst gridHelper = new THREE.GridHelper(size, divisions);\n\n// Set the line width for all grid lines\ngridHelper.material.linewidth = 1;\n\n// Iterate over the grid lines and set a thicker line width for every 5th section\nfor (let i = 0; i < gridHelper.geometry.attributes.position.count; i += divisions) {\n  if (i % (divisions * 5) == 0) {\n    // Set a thicker line width for every 5th section\n    gridHelper.geometry.attributes.lineWidth.array[i] = 2;\n  }\n}\n\n// Update the buffer attributes to apply the changes\n//gridHelper.geometry.attributes.lineWidth.needsUpdate = true;\n\n// Add the grid helper to the scene\nscene.add(gridHelper);\nconst cube = new THREE.LineSegments(edges, lineMaterial);\n\n// Add the mesh to the scene\n\nscene.add(cube);\nlet rotationSpeed = 0.01; // Initial rotation speed\n\n// Create a button\nconst button = document.createElement('button');\nbutton.textContent = 'Increase Speed';\ndocument.body.appendChild(button);\n\n// Add event listener to the button\nbutton.addEventListener('click', () => {\n  rotationSpeed += 0.01; // Increase the rotation speed by 0.01\n});\n\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // Rotate the cube\n  cube.rotation.x += rotationSpeed;\n  cube.rotation.y += rotationSpeed;\n  gridHelper.rotation.x += .001;\n\n  // Render the scene with the camera\n  renderer.render(scene, camera);\n}\nanimate();\nimport HelloWorld from './components/HelloWorld.vue';\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld\n  }\n};","map":{"version":3,"names":["THREE","scene","Scene","renderer","WebGLRenderer","setSize","window","innerWidth","innerHeight","document","body","appendChild","domElement","camera","PerspectiveCamera","position","z","x","setClearColor","Color","geometry","BoxGeometry","edges","EdgesGeometry","lineMaterial","LineBasicMaterial","color","size","divisions","gridHelper","GridHelper","material","linewidth","i","attributes","count","lineWidth","array","add","cube","LineSegments","rotationSpeed","button","createElement","textContent","addEventListener","animate","requestAnimationFrame","rotation","y","render","HelloWorld","name","components"],"sources":["/Users/olliearrison/Desktop/v1/src/App.vue"],"sourcesContent":["<template>\n  <HelloWorld msg=\"Welcome to Your Vue.js App\"/>\n</template>\n\n<script>\nimport * as THREE from 'three';\n\n\nconst scene = new THREE.Scene();\n\n// Create a renderer\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\n// Create a camera\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\ncamera.position.z = 2;\ncamera.position.x = 0;\n\n\nrenderer.setClearColor(new THREE.Color(0x000000));\n\n\n// Create a geometry\nconst geometry = new THREE.BoxGeometry(1, 1, 1);\n\nconst edges = new THREE.EdgesGeometry(geometry);\n\n// Create a material\n\nconst lineMaterial = new THREE.LineBasicMaterial({ color: 0x00ff00 });\n\n// Create a mesh\n\n\nconst size = 100; // Size of the grid\nconst divisions = 20; // Number of divisions\nconst gridHelper = new THREE.GridHelper(size, divisions);\n\n// Set the line width for all grid lines\ngridHelper.material.linewidth = 1;\n\n// Iterate over the grid lines and set a thicker line width for every 5th section\nfor (let i = 0; i < gridHelper.geometry.attributes.position.count; i += divisions) {\n  if (i % (divisions * 5) == 0) {\n    // Set a thicker line width for every 5th section\n    gridHelper.geometry.attributes.lineWidth.array[i] = 2;\n  }\n}\n\n// Update the buffer attributes to apply the changes\n//gridHelper.geometry.attributes.lineWidth.needsUpdate = true;\n\n// Add the grid helper to the scene\nscene.add(gridHelper);\n\nconst cube = new THREE.LineSegments(edges, lineMaterial);\n\n// Add the mesh to the scene\n\n\nscene.add(cube);\n\nlet rotationSpeed = 0.01; // Initial rotation speed\n\n// Create a button\nconst button = document.createElement('button');\nbutton.textContent = 'Increase Speed';\ndocument.body.appendChild(button);\n\n// Add event listener to the button\nbutton.addEventListener('click', () => {\n  rotationSpeed += 0.01; // Increase the rotation speed by 0.01\n});\n\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // Rotate the cube\n  cube.rotation.x += rotationSpeed;\n  cube.rotation.y += rotationSpeed;\n  gridHelper.rotation.x += .001;\n\n  // Render the scene with the camera\n  renderer.render(scene, camera);\n}\n\nanimate();\n\n\n\nimport HelloWorld from './components/HelloWorld.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld\n  }\n}\n\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}