{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_HelloWorld = _resolveComponent(\"HelloWorld\");\n  return _openBlock(), _createBlock(_component_HelloWorld, {\n    msg: \"Welcome to Your Vue.js App\"\n  });\n}","map":{"version":3,"names":["_createBlock","_component_HelloWorld","msg"],"sources":["/Users/olliearrison/Desktop/v1/src/App.vue"],"sourcesContent":["<template>\n  <HelloWorld msg=\"Welcome to Your Vue.js App\"/>\n</template>\n\n<script>\nimport * as THREE from 'three';\n\n\nconst scene = new THREE.Scene();\n\n// Create a renderer\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\n// Create a camera\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\ncamera.position.z = 2;\ncamera.position.x = 0;\n\n\nrenderer.setClearColor(new THREE.Color(0x000000));\n\n\n// Create a geometry\nconst geometry = new THREE.BoxGeometry(1, 1, 1);\n\nconst edges = new THREE.EdgesGeometry(geometry);\n\n// Create a material\n\nconst lineMaterial = new THREE.LineBasicMaterial({ color: 0x00ff00 });\n\n// Create a mesh\n\nconst cube = new THREE.LineSegments(edges, lineMaterial);\n\n// Add the mesh to the scene\n\n\nscene.add(cube);\n\nconst axes = 'xzy';\nconst planeAxes = axes.slice(0, 2);\nconst color = new THREE.Color('white');\nconst size1 = 10;\nconst size2 = 5;\n\nconst distance = 200;\n\nconst material = new THREE.ShaderMaterial({\n\nside: THREE.DoubleSide,\n\nuniforms: {\n    uSize1: {\n        value: size1\n    },\n    uSize2: {\n        value: size2\n    },\n    uColor: {\n        value: color\n    },\n    uDistance: {\n        value: distance\n    }\n},\ntransparent: true,\nvertexShader: `\n   \n   varying vec3 worldPosition;\n\n   uniform float uDistance;\n   \n   void main() {\n   \n        vec3 pos = position.${axes} * uDistance;\n        pos.${planeAxes} += cameraPosition.${planeAxes};\n        \n        worldPosition = pos;\n        \n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n   \n   }\n   `,\n\n\nfragmentShader: `\n   \n   varying vec3 worldPosition;\n   \n   uniform float uSize1;\n   uniform float uSize2;\n   uniform vec3 uColor;\n   uniform float uDistance;\n    \n    \n    \n    float getGrid(float size) {\n    \n        vec2 r = worldPosition.${planeAxes} / size;\n        \n        \n        vec2 grid = abs(fract(r - 0.5) - 0.5) / fwidth(r);\n        float line = min(grid.x, grid.y);\n        \n    \n        return 1.0 - min(line, 1.0);\n    }\n    \n   void main() {\n   \n        \n          float d = 1.0 - min(distance(cameraPosition.${planeAxes}, worldPosition.${planeAxes}) / uDistance, 1.0);\n        \n          float g1 = getGrid(uSize1);\n          float g2 = getGrid(uSize2);\n          \n          \n          gl_FragColor = vec4(uColor.rgb, mix(g2, g1, g1) * pow(d, 3.0));\n          gl_FragColor.a = mix(0.5 * gl_FragColor.a, gl_FragColor.a, g2);\n        \n          if ( gl_FragColor.a <= 0.0 ) discard;\n        \n   \n   }\n   \n   `,\n\nextensions: {\n    derivatives: true\n}\n\n});\n\nconst planeGeometry = new THREE.PlaneGeometry(2, 2, 1, 1);\nconst grid = new THREE.Mesh(planeGeometry, material);\nscene.add(grid);\n\nlet rotationSpeed = 0.01; // Initial rotation speed\n\n// Create a button\nconst button = document.createElement('button');\nbutton.textContent = 'Increase Speed';\ndocument.body.appendChild(button);\n\n// Add event listener to the button\nbutton.addEventListener('click', () => {\n  rotationSpeed += 0.01; // Increase the rotation speed by 0.01\n});\n\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // Rotate the cube\n  cube.rotation.x += rotationSpeed;\n  cube.rotation.y += rotationSpeed;\n\n  grid.rotation.x += .005;\n  grid.rotation.y += .003;\n\n  // Render the scene with the camera\n  renderer.render(scene, camera);\n}\n\nanimate();\n\n\n\nimport HelloWorld from './components/HelloWorld.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld\n  }\n}\n\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"],"mappings":";;;uBACEA,YAAA,CAA8CC,qBAAA;IAAlCC,GAAG,EAAC;EAA4B"},"metadata":{},"sourceType":"module","externalDependencies":[]}