{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-352fa47c\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"drawing-input\",\n  style: {\n    \"position\": \"relative\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"template\", null, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleEraserMode && $options.toggleEraserMode(...args))\n  }, _toDisplayString($data.isEraserMode ? 'Disable Eraser Mode' : 'Enable Eraser Mode'), 1 /* TEXT */)])]);\n}","map":{"version":3,"names":["class","style","_createElementBlock","_createElementVNode","_hoisted_1","onClick","_cache","args","$options","toggleEraserMode","$data","isEraserMode"],"sources":["/Users/olliearrison/Desktop/SURA/src/components/DrawingInput.vue"],"sourcesContent":["<template>\n    <template>\n    <div class=\"drawing-input\" style=\"position: relative;\">\n        <button @click=\"toggleEraserMode\">{{ isEraserMode ? 'Disable Eraser Mode' : 'Enable Eraser Mode' }}</button>\n    </div>\n</template>\n    \n</template>\n  \n<script>\nimport { draw } from \"./DrawHelper.js\";\nimport { arcRenderer } from '../App.vue';\n//import * as THREE from \"three\";\n//import { renderer, scene, camera } from \"../App.vue\";\n\nlet drawing = false;\n\n\nexport default {\n    name: 'DrawingInput',\n\n    data(){\n        return {\n            isDrawing: false,\n            isEraserMode: false,\n            stroke: {\n                show_stroke: true,\n                lineWidth: .25,\n                color: 0x000000,\n            }\n        };\n    },\n    mounted (){\n        // document.body \n\n\n        document.body.addEventListener('mouseup', (event) => {\n            if (this.inCanvas(event)){\n                this.handleMouseUp();\n                drawing = false;\n            }\n        });\n\n        document.body.addEventListener('mousedown', (event) => {\n            if (this.inCanvas(event)) {\n                drawing = true;\n                this.handleMouseDown(event);\n            }\n        });\n\n        document.body.addEventListener('pointermove', (event) => {\n            //console.log(event.pressure);\n            if (event.pressure > 0){\n                this.stroke.lineWidth = event.pressure * .5;\n            }\n\n        });\n\n        document.body.addEventListener('mousemove', (event) => {\n            //console.log(event.pressure);\n            if (this.inCanvas(event)) {\n                if (drawing) {\n                    this.handleMouseMove(event);\n                }\n            } else {\n                if (drawing){\n                    this.handleMouseUp();\n                    drawing = false;\n                }\n            }\n        });\n        //this.handleMouseMove(event);\n\n       \n\n    },\n    methods: {\n        inCanvas( event ) {\n            var rect = arcRenderer.domElement.getBoundingClientRect();\n            var centerX = rect.left + rect.width / 2;\n            var centerY = rect.top + rect.height / 2;\n\n            const dx = event.clientX - centerX;\n            const dy = event.clientY - centerY;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n\n            if (distance < rect.width/2){\n                return false;\n            }\n            return true;\n        },\n        handleMouseMove(event) {\n            if (!this.isDrawing) return;\n            let x = event.clientX;\n            let y = event.clientY;\n            // Assuming a 2D drawing, so Z is constant, but this could be modified as per the requirement.\n            draw.onMove(x, y, this.stroke);\n        },\n        handleMouseDown(event) {\n            //console.log(\"mouse down\");\n            this.isDrawing = true;\n            let x = event.clientX;\n            let y = event.clientY;\n            draw.onStart(x, y, this.stroke);\n        },\n        handleMouseUp() {\n            this.isDrawing = false;\n            draw.onEnd();\n        },\n        handleClick() {\n            \n        // Your function logic here\n        console.log('Button clicked!');\n        console.log(\"hiiiii\");\n        },\n        toggleEraserMode() {\n            console.log('Toggling eraser mode');\n        this.isEraserMode = !this.isEraserMode;\n    },\n    }\n}\n</script>\n\n<style scoped>\n.drawing-input {\n    width: 100%;\n    height: 100%;\n}\n\n.button {\n    position: absolute;\n    top: 0;\n}\n</style>\n"],"mappings":";;;EAESA,KAAK,EAAC,eAAe;EAACC,KAA2B,EAA3B;IAAA;EAAA;;;uBAD3BC,mBAAA,CAIO,mBAHPC,mBAAA,CAEM,OAFNC,UAEM,GADFD,mBAAA,CAA4G;IAAnGE,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,gBAAA,IAAAD,QAAA,CAAAC,gBAAA,IAAAF,IAAA,CAAgB;sBAAKG,KAAA,CAAAC,YAAY,gE"},"metadata":{},"sourceType":"module","externalDependencies":[]}