{"ast":null,"code":"import * as THREE from 'three';\nimport InfiniteGridHelper from \"./InfiniteGridHelper.js\";\nimport { renderer, camera, scene, plane, drawSceneList, drawRenderer } from '../App.vue';\nimport { index } from './DrawingInput.vue';\nexport let grid = InfiniteGridHelper();\nexport default {\n  name: 'GridBackground',\n  props: {\n    cameraPosition: {\n      type: Object,\n      required: true\n    },\n    cameraAngle: {\n      type: Object,\n      required: true\n    }\n  },\n  mounted() {\n    // Create a renderer\n    renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    drawRenderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    drawRenderer.setPixelRatio(window.devicePixelRatio);\n    let rendererElement = document.getElementById('rendererElement');\n    let drawRendererElement = document.getElementById('drawRendererElement');\n    rendererElement.appendChild(renderer.domElement);\n    drawRendererElement.appendChild(drawRenderer.domElement);\n\n    //document.body.appendChild(renderer.domElement);\n    document.body.appendChild(drawRenderer.domElement);\n    // Create a camera\n\n    //camera = camera;\n    camera.rotation.order = \"XYZ\";\n    camera.position.set(this.cameraPosition.x, this.cameraPosition.y, this.cameraPosition.z);\n    camera.rotation.set(new THREE.Euler(this.cameraAngle.x, this.cameraAngle.y, this.cameraAngle.z));\n    renderer.setClearColor(new THREE.Color(0xFFFFFF));\n    renderer.setClearAlpha(0);\n    scene.add(grid);\n\n    //let rotationSpeed = 0.01; // Initial rotation speed\n    const self = this;\n    function animate() {\n      requestAnimationFrame(animate);\n\n      // Rotate the cube\n\n      camera.position.copy(self.cameraPosition);\n      camera.rotation.set(self.cameraAngle.x, self.cameraAngle.y, self.cameraAngle.z);\n      plane.rotation.set(self.cameraAngle.x, self.cameraAngle.y, self.cameraAngle.z);\n      //planeL.rotation.set(self.cameraAngle.x, self.cameraAngle.y, self.cameraAngle.z);\n\n      //plane.position.set(self.cameraPosition.x-10, self.cameraPosition.y-10, self.cameraPosition.z-10);\n\n      // Render the scene with the camera\n\n      renderer.render(scene, camera);\n      drawRenderer.render(drawSceneList[index], camera);\n    }\n    this.windowResizeHandler();\n    animate();\n    window.addEventListener('resize', this.windowResizeHandler);\n  },\n  beforeUnmount() {\n    window.removeEventListener('resize', this.windowResizeHandler);\n  },\n  methods: {\n    windowResizeHandler() {\n      const width = this.$el.clientWidth;\n      const height = this.$el.clientHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n      drawRenderer.setSize(width, height);\n    }\n  }\n};","map":{"version":3,"names":["THREE","InfiniteGridHelper","renderer","camera","scene","plane","drawSceneList","drawRenderer","index","grid","name","props","cameraPosition","type","Object","required","cameraAngle","mounted","setSize","$el","clientWidth","clientHeight","setPixelRatio","window","devicePixelRatio","rendererElement","document","getElementById","drawRendererElement","appendChild","domElement","body","rotation","order","position","set","x","y","z","Euler","setClearColor","Color","setClearAlpha","add","self","animate","requestAnimationFrame","copy","render","windowResizeHandler","addEventListener","beforeUnmount","removeEventListener","methods","width","height","aspect","updateProjectionMatrix"],"sources":["/Users/olliearrison/Desktop/SURA/src/components/GridBackground.vue"],"sourcesContent":["<template>\n    <div class=\"grid\">\n        <div id=\"rendererElement\"></div>\n        <div id=\"drawRendererElement\"></div>\n    </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\nimport InfiniteGridHelper from \"./InfiniteGridHelper.js\";\nimport { renderer, camera, scene, plane, drawSceneList, drawRenderer } from '../App.vue';\nimport { index } from './DrawingInput.vue';\n\nexport let grid = InfiniteGridHelper();\n\nexport default {\n  name: 'GridBackground',\n  props: {\n    cameraPosition: {\n      type: Object,\n      required: true\n    },\n    cameraAngle: {\n      type: Object,\n      required: true\n    }\n  },\n  mounted(){\n\n    // Create a renderer\n    renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    drawRenderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    drawRenderer.setPixelRatio(window.devicePixelRatio);\n\n    let rendererElement = document.getElementById('rendererElement');\n    let drawRendererElement = document.getElementById('drawRendererElement');\n    rendererElement.appendChild(renderer.domElement);\n    drawRendererElement.appendChild(drawRenderer.domElement);\n\n    //document.body.appendChild(renderer.domElement);\n    document.body.appendChild(drawRenderer.domElement);\n    // Create a camera\n    \n    //camera = camera;\n    camera.rotation.order = \"XYZ\";\n    camera.position.set(this.cameraPosition.x, this.cameraPosition.y, this.cameraPosition.z);\n    camera.rotation.set(new THREE.Euler(this.cameraAngle.x, this.cameraAngle.y, this.cameraAngle.z));\n\n    \n    renderer.setClearColor(new THREE.Color(0xFFFFFF));\n    renderer.setClearAlpha(0);\n\n\n    scene.add(grid);\n\n    //let rotationSpeed = 0.01; // Initial rotation speed\n    const self = this;\n    function animate() {\n        requestAnimationFrame(animate);\n\n        // Rotate the cube\n\n        camera.position.copy(self.cameraPosition);\n        camera.rotation.set(self.cameraAngle.x, self.cameraAngle.y, self.cameraAngle.z);\n        plane.rotation.set(self.cameraAngle.x, self.cameraAngle.y, self.cameraAngle.z);\n        //planeL.rotation.set(self.cameraAngle.x, self.cameraAngle.y, self.cameraAngle.z);\n\n        //plane.position.set(self.cameraPosition.x-10, self.cameraPosition.y-10, self.cameraPosition.z-10);\n\n        // Render the scene with the camera\n        \n        renderer.render(scene, camera);\n        drawRenderer.render(drawSceneList[index], camera);\n        \n        \n    }\n    this.windowResizeHandler();\n    animate();\n    window.addEventListener('resize', this.windowResizeHandler);\n  }, \n  beforeUnmount() {\n    window.removeEventListener('resize', this.windowResizeHandler);\n},\n  methods: {\n    windowResizeHandler() {\n        const width = this.$el.clientWidth;\n        const height = this.$el.clientHeight;\n\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n        renderer.setSize(width, height);\n        drawRenderer.setSize(width, height);\n    }\n  }\n}\n</script>\n\n<style>\n\n.grid {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}