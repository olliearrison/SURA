{"ast":null,"code":"import * as THREE from 'three';\nimport InfiniteGridHelper from \"./InfiniteGridHelper.js\";\nexport let camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\nexport let renderer = new THREE.WebGLRenderer();\nexport default {\n  name: 'GridBackground',\n  props: {},\n  mounted() {\n    const scene = new THREE.Scene();\n\n    // Create a renderer\n    renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    document.body.appendChild(renderer.domElement);\n\n    // Create a camera\n\n    //camera = camera;\n    camera.position.z = 2;\n    camera.position.x = 0;\n    renderer.setClearColor(new THREE.Color(0x000000));\n\n    // Create a geometry\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    const edges = new THREE.EdgesGeometry(geometry);\n\n    // Create a material\n\n    const lineMaterial = new THREE.LineBasicMaterial({\n      color: 0x00ff00\n    });\n\n    // Create a mesh\n\n    const cube = new THREE.LineSegments(edges, lineMaterial);\n\n    // Add the mesh to the scene\n\n    scene.add(cube);\n    const grid = InfiniteGridHelper();\n    scene.add(grid);\n    let rotationSpeed = 0.01; // Initial rotation speed\n\n    function animate() {\n      requestAnimationFrame(animate);\n\n      // Rotate the cube\n      cube.rotation.x += rotationSpeed;\n      cube.rotation.y += rotationSpeed;\n      grid.rotation.x += .005;\n      grid.rotation.y += .003;\n\n      // Render the scene with the camera\n      renderer.render(scene, camera);\n    }\n    this.windowResizeHandler();\n    animate();\n    window.addEventListener('resize', this.windowResizeHandler);\n  },\n  beforeUnmount() {\n    window.removeEventListener('resize', this.windowResizeHandler);\n  },\n  methods: {\n    windowResizeHandler() {\n      console.log(\"hi\");\n      const width = this.$el.clientWidth;\n      const height = this.$el.clientHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    }\n  }\n};","map":{"version":3,"names":["THREE","InfiniteGridHelper","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","name","props","mounted","scene","Scene","setSize","$el","clientWidth","clientHeight","document","body","appendChild","domElement","position","z","x","setClearColor","Color","geometry","BoxGeometry","edges","EdgesGeometry","lineMaterial","LineBasicMaterial","color","cube","LineSegments","add","grid","rotationSpeed","animate","requestAnimationFrame","rotation","y","render","windowResizeHandler","addEventListener","beforeUnmount","removeEventListener","methods","console","log","width","height","aspect","updateProjectionMatrix"],"sources":["/Users/olliearrison/Desktop/SURA/src/components/GridBackground.vue"],"sourcesContent":["<template>\n    <div class=\"grid\"> </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\nimport InfiniteGridHelper from \"./InfiniteGridHelper.js\";\n\nexport let camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\nexport let renderer = new THREE.WebGLRenderer();\n\nexport default {\n  name: 'GridBackground',\n  props: {\n  },\n  mounted(){\n    const scene = new THREE.Scene();\n\n    // Create a renderer\n    renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    document.body.appendChild(renderer.domElement);\n\n    // Create a camera\n    \n    //camera = camera;\n    camera.position.z = 2;\n    camera.position.x = 0;\n\n\n    renderer.setClearColor(new THREE.Color(0x000000));\n\n\n    // Create a geometry\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n\n    const edges = new THREE.EdgesGeometry(geometry);\n\n    // Create a material\n\n    const lineMaterial = new THREE.LineBasicMaterial({ color: 0x00ff00 });\n\n    // Create a mesh\n\n    const cube = new THREE.LineSegments(edges, lineMaterial);\n\n    // Add the mesh to the scene\n\n\n    scene.add(cube);\n\n    const grid = InfiniteGridHelper();\n    scene.add(grid);\n\n    let rotationSpeed = 0.01; // Initial rotation speed\n    \n    function animate() {\n        requestAnimationFrame(animate);\n\n        // Rotate the cube\n        cube.rotation.x += rotationSpeed;\n        cube.rotation.y += rotationSpeed;\n\n        grid.rotation.x += .005;\n        grid.rotation.y += .003;\n\n\n        // Render the scene with the camera\n        renderer.render(scene, camera);\n        \n    }\n    this.windowResizeHandler();\n    animate();\n    window.addEventListener('resize', this.windowResizeHandler);\n  }, \n  beforeUnmount() {\n    window.removeEventListener('resize', this.windowResizeHandler);\n},\n  methods: {\n    windowResizeHandler() {\n        console.log(\"hi\");\n    const width = this.$el.clientWidth;\n    const height = this.$el.clientHeight;\n\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n    renderer.setSize(width, height);\n    }\n  }\n}\n</script>\n\n<style>\n\n.grid {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}