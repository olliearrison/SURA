{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"arc\",\n  ref: \"arcballContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1"],"sources":["/Users/olliearrison/Desktop/SURA/src/components/ArcballControl.vue"],"sourcesContent":["<template>\n    <div class=\"arc\" ref=\"arcballContainer\"></div>\n</template>\n\n<script>\nimport * as THREE from 'three';\nimport { ArcballControls } from 'three/addons/controls/ArcballControls.js';\n\nexport let renderer = new THREE.WebGLRenderer({alpha: true, antialias: true});\nexport let camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 10000 );\nlet controls, scene;\n\nexport default {\n  name: 'ArcballControl',\n  props: {\n    cameraPosition: {\n      type: Object,\n      required: true\n    },\n    cameraAngle: {\n      type: Object,\n      required: true\n    }\n  },\n  /*\n  data() {\n    return {\n      renderer: renderer,\n      controls: null,\n      scene: null\n    };\n  },\n  */\n  mounted() {\n    \n    renderer.setSize(this.$el.clientWidth, this.$el.clientHeight);\n    this.$el.appendChild(renderer.domElement);\n\n    scene = new THREE.Scene();\n\n    //this.$emit('update:camera', camera);\n\n    //this.$emit('update:camera', camera.clone());\n\n    controls = new ArcballControls( camera, renderer.domElement, scene );\n    controls.addEventListener('change', this.handleCameraChange);\n\n\n    camera.position.set( 0, 0, 2 );\n    this.windowResizeHandler();\n    controls.update();\n    this.animate();\n    \n    window.addEventListener('resize', this.windowResizeHandler);\n\n  },beforeUnmount() {\n    window.removeEventListener('resize', this.windowResizeHandler);\n    controls.removeEventListener('change', this.handleCameraChange);\n  },\n   methods: {\n    handleCameraChange(event) {\n      const rect = this.$refs.arcballContainer.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      \n      // Only respond to mouse events within a certain area.\n      const minX = 0;\n      const maxX = this.$refs.arcballContainer.clientWidth;\n      const minY = 0;\n      const maxY = this.$refs.arcballContainer.clientHeight;\n      console.log(\"hi\")\n      if (x >= minX && x <= maxX && y >= minY && y <= maxY) {\n        console.log(\"hi\")\n        const cameraPosition = camera.position.clone();\n        const cameraAngle = camera.rotation.clone();\n\n        this.$emit('camera-updated', {\n          position: cameraPosition,\n          angle: cameraAngle\n        });\n\n        renderer.render( scene, camera );\n      }\n\n    },\n\n    windowResizeHandler() {\n      const width = this.$el.clientWidth;\n      const height = this.$el.clientHeight;\n\n      /*\n      this.$emit('update:camera', {\n        aspect: width / height,\n        width: width,\n        height: height\n      });\n      */\n      \n\n      renderer.setSize(width, height);\n    },\n    animate() {\n      requestAnimationFrame(this.animate);\n      controls.update();\n      renderer.render(scene, camera);\n    }\n  }\n}\n</script>\n\n<style>\n.arc {\n  position: absolute;\n  top: 5%;\n  right: 5%;\n  width: 150px;  /* Adjust these as necessary */\n  height: 150px; /* Adjust these as necessary */\n}\n</style>"],"mappings":";;EACSA,KAAK,EAAC,KAAK;EAACC,GAAG,EAAC;;;uBAArBC,mBAAA,CAA8C,OAA9CC,UAA8C"},"metadata":{},"sourceType":"module","externalDependencies":[]}